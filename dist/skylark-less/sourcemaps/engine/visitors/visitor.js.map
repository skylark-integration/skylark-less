{"version":3,"sources":["engine/visitors/visitor.js"],"names":["tree","require","_visitArgs","visitDeeper","_hasIndexed","_noop","node","indexNodeTypes","parent","ticker","key","child","prototype","type","typeIndex","Visitor","implementation","this","_implementation","_visitInCache","_visitOutCache","visit","nodeTypeIndex","value","fnName","impl","func","funcOut","visitArgs","newNode","call","isReplacing","accept","visitArray","nodes","nonReplacing","i","cnt","length","out","evald","undefined","splice","flatten","push","arr","item","nestedCnt","j","nestedItem","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,WACfC,YAAeC,aAAa,GAAQC,aAAc,EACtD,SAASC,MAAMC,GACX,OAAOA,EAEX,SAASC,eAAeC,EAAQC,GAC5B,IAAIC,EAAKC,EACT,IAAKD,KAAOF,EAER,cADAG,EAAQH,EAAOE,KAEf,IAAK,WACGC,EAAMC,WAAaD,EAAMC,UAAUC,OACnCF,EAAMC,UAAUE,UAAYL,KAEhC,MACJ,IAAK,SACDA,EAASF,eAAeI,EAAOF,GAIvC,OAAOA,EAEX,IAAIM,QAAU,SAAUC,GACpBC,KAAKC,gBAAkBF,EACvBC,KAAKE,iBACLF,KAAKG,kBACAhB,cACDG,eAAeP,KAAM,GACrBI,aAAc,IAGtBW,QAAQH,WACJS,MAAO,SAAUf,GACb,IAAKA,EACD,OAAOA,EAEX,IAAIgB,EAAgBhB,EAAKQ,UACzB,IAAKQ,EAID,OAHIhB,EAAKiB,OAASjB,EAAKiB,MAAMT,WACzBG,KAAKI,MAAMf,EAAKiB,OAEbjB,EAEX,IAAiJkB,EAA7IC,EAAOR,KAAKC,gBAAiBQ,EAAOT,KAAKE,cAAcG,GAAgBK,EAAUV,KAAKG,eAAeE,GAAgBM,EAAY1B,WASrI,GARA0B,EAAUzB,aAAc,EACnBuB,IAEDA,EAAOD,EADPD,EAAS,QAAUlB,EAAKO,OACDR,MACvBsB,EAAUF,EAAKD,EAAS,QAAUnB,MAClCY,KAAKE,cAAcG,GAAiBI,EACpCT,KAAKG,eAAeE,GAAiBK,GAErCD,IAASrB,MAAO,CAChB,IAAIwB,EAAUH,EAAKI,KAAKL,EAAMnB,EAAMsB,GAChCtB,GAAQmB,EAAKM,cACbzB,EAAOuB,GASf,OANID,EAAUzB,aAAeG,GAAQA,EAAK0B,QACtC1B,EAAK0B,OAAOf,MAEZU,GAAWtB,OACXsB,EAAQG,KAAKL,EAAMnB,GAEhBA,GAEX2B,WAAY,SAAUC,EAAOC,GACzB,IAAKD,EACD,OAAOA,EAEX,IAAwBE,EAApBC,EAAMH,EAAMI,OAChB,GAAIH,IAAiBlB,KAAKC,gBAAgBa,YAAa,CACnD,IAAKK,EAAI,EAAGA,EAAIC,EAAKD,IACjBnB,KAAKI,MAAMa,EAAME,IAErB,OAAOF,EAEX,IAAIK,KACJ,IAAKH,EAAI,EAAGA,EAAIC,EAAKD,IAAK,CACtB,IAAII,EAAQvB,KAAKI,MAAMa,EAAME,SACfK,IAAVD,IAGCA,EAAME,OAEAF,EAAMF,QACbrB,KAAK0B,QAAQH,EAAOD,GAFpBA,EAAIK,KAAKJ,IAKjB,OAAOD,GAEXI,QAAS,SAAUE,EAAKN,GAIpB,IAAIF,EAAKD,EAAGU,EAAMC,EAAWC,EAAGC,EAChC,IAJKV,IACDA,MAGCH,EAAI,EAAGC,EAAMQ,EAAIP,OAAQF,EAAIC,EAAKD,IAEnC,QAAaK,KADbK,EAAOD,EAAIT,IAIX,GAAKU,EAAKJ,OAIV,IAAKM,EAAI,EAAGD,EAAYD,EAAKR,OAAQU,EAAID,EAAWC,SAE7BP,KADnBQ,EAAaH,EAAKE,MAIbC,EAAWP,OAELO,EAAWX,QAClBrB,KAAK0B,QAAQM,EAAYV,GAFzBA,EAAIK,KAAKK,SATbV,EAAIK,KAAKE,GAejB,OAAOP,IAGfW,OAAOC,QAAUpC","file":"../../../engine/visitors/visitor.js","sourcesContent":["var tree = require('../tree');\nvar _visitArgs = { visitDeeper: true }, _hasIndexed = false;\nfunction _noop(node) {\n    return node;\n}\nfunction indexNodeTypes(parent, ticker) {\n    var key, child;\n    for (key in parent) {\n        child = parent[key];\n        switch (typeof child) {\n        case 'function':\n            if (child.prototype && child.prototype.type) {\n                child.prototype.typeIndex = ticker++;\n            }\n            break;\n        case 'object':\n            ticker = indexNodeTypes(child, ticker);\n            break;\n        }\n    }\n    return ticker;\n}\nvar Visitor = function (implementation) {\n    this._implementation = implementation;\n    this._visitInCache = {};\n    this._visitOutCache = {};\n    if (!_hasIndexed) {\n        indexNodeTypes(tree, 1);\n        _hasIndexed = true;\n    }\n};\nVisitor.prototype = {\n    visit: function (node) {\n        if (!node) {\n            return node;\n        }\n        var nodeTypeIndex = node.typeIndex;\n        if (!nodeTypeIndex) {\n            if (node.value && node.value.typeIndex) {\n                this.visit(node.value);\n            }\n            return node;\n        }\n        var impl = this._implementation, func = this._visitInCache[nodeTypeIndex], funcOut = this._visitOutCache[nodeTypeIndex], visitArgs = _visitArgs, fnName;\n        visitArgs.visitDeeper = true;\n        if (!func) {\n            fnName = 'visit' + node.type;\n            func = impl[fnName] || _noop;\n            funcOut = impl[fnName + 'Out'] || _noop;\n            this._visitInCache[nodeTypeIndex] = func;\n            this._visitOutCache[nodeTypeIndex] = funcOut;\n        }\n        if (func !== _noop) {\n            var newNode = func.call(impl, node, visitArgs);\n            if (node && impl.isReplacing) {\n                node = newNode;\n            }\n        }\n        if (visitArgs.visitDeeper && node && node.accept) {\n            node.accept(this);\n        }\n        if (funcOut != _noop) {\n            funcOut.call(impl, node);\n        }\n        return node;\n    },\n    visitArray: function (nodes, nonReplacing) {\n        if (!nodes) {\n            return nodes;\n        }\n        var cnt = nodes.length, i;\n        if (nonReplacing || !this._implementation.isReplacing) {\n            for (i = 0; i < cnt; i++) {\n                this.visit(nodes[i]);\n            }\n            return nodes;\n        }\n        var out = [];\n        for (i = 0; i < cnt; i++) {\n            var evald = this.visit(nodes[i]);\n            if (evald === undefined) {\n                continue;\n            }\n            if (!evald.splice) {\n                out.push(evald);\n            } else if (evald.length) {\n                this.flatten(evald, out);\n            }\n        }\n        return out;\n    },\n    flatten: function (arr, out) {\n        if (!out) {\n            out = [];\n        }\n        var cnt, i, item, nestedCnt, j, nestedItem;\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n            item = arr[i];\n            if (item === undefined) {\n                continue;\n            }\n            if (!item.splice) {\n                out.push(item);\n                continue;\n            }\n            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                nestedItem = item[j];\n                if (nestedItem === undefined) {\n                    continue;\n                }\n                if (!nestedItem.splice) {\n                    out.push(nestedItem);\n                } else if (nestedItem.length) {\n                    this.flatten(nestedItem, out);\n                }\n            }\n        }\n        return out;\n    }\n};\nmodule.exports = Visitor;"]}