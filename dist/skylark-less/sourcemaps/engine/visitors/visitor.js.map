{"version":3,"sources":["engine/visitors/visitor.js"],"names":["define","__module__0","exports","module","tree","_visitArgs","visitDeeper","_hasIndexed","_noop","node","Visitor","implementation","this","_implementation","_visitInCache","_visitOutCache","indexNodeTypes","parent","ticker","key","child","prototype","type","typeIndex","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","visit","nodeTypeIndex","value","fnName","impl","func","funcOut","visitArgs","newNode","call","isReplacing","accept","visitArray","nodes","nonReplacing","i","cnt","length","out","evald","undefined","splice","flatten","push","arr","item","nestedCnt","j","nestedItem"],"mappings":";;;;;;;AAAAA,QAAQ,iBAAkB,SAAUC,GAChC,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAOH,EACPI,GAAeC,aAAa,GAAQC,GAAc,EACtD,SAASC,EAAMC,GACX,OAAOA,EAmBX,IAAIC,EAAU,SAAUC,GACpBC,KAAKC,gBAAkBF,EACvBC,KAAKE,iBACLF,KAAKG,kBACAR,KArBT,SAASS,EAAeC,EAAQC,GAC5B,IAAIC,EAAKC,EACT,IAAKD,KAAOF,EAER,cADAG,EAAQH,EAAOE,KAEf,IAAK,WACGC,EAAMC,WAAaD,EAAMC,UAAUC,OACnCF,EAAMC,UAAUE,UAAYL,KAEhC,MACJ,IAAK,SACDA,EAASF,EAAeI,EAAOF,GAIvC,OAAOA,EAOHF,CAAeZ,EAAM,GACrBG,GAAc,IAmGtB,SAASiB,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAnGAf,EAAQW,WACJS,MAAO,SAAUrB,GACb,IAAKA,EACD,OAAOA,EAEX,IAAIsB,EAAgBtB,EAAKc,UACzB,IAAKQ,EAID,OAHItB,EAAKuB,OAASvB,EAAKuB,MAAMT,WACzBX,KAAKkB,MAAMrB,EAAKuB,OAEbvB,EAEX,IAAiJwB,EAA7IC,EAAOtB,KAAKC,gBAAiBsB,EAAOvB,KAAKE,cAAciB,GAAgBK,EAAUxB,KAAKG,eAAegB,GAAgBM,EAAYhC,EASrI,GARAgC,EAAU/B,aAAc,EACnB6B,IAEDA,EAAOD,EADPD,EAAS,QAAUxB,EAAKa,OACDd,EACvB4B,EAAUF,EAAKD,EAAS,QAAUzB,EAClCI,KAAKE,cAAciB,GAAiBI,EACpCvB,KAAKG,eAAegB,GAAiBK,GAErCD,IAAS3B,EAAO,CAChB,IAAI8B,EAAUH,EAAKI,KAAKL,EAAMzB,EAAM4B,GAChC5B,GAAQyB,EAAKM,cACb/B,EAAO6B,GASf,OANID,EAAU/B,aAAeG,GAAQA,EAAKgC,QACtChC,EAAKgC,OAAO7B,MAEZwB,GAAW5B,GACX4B,EAAQG,KAAKL,EAAMzB,GAEhBA,GAEXiC,WAAY,SAAUC,EAAOC,GACzB,IAAKD,EACD,OAAOA,EAEX,IAAwBE,EAApBC,EAAMH,EAAMI,OAChB,GAAIH,IAAiBhC,KAAKC,gBAAgB2B,YAAa,CACnD,IAAKK,EAAI,EAAGA,EAAIC,EAAKD,IACjBjC,KAAKkB,MAAMa,EAAME,IAErB,OAAOF,EAEX,IAAIK,KACJ,IAAKH,EAAI,EAAGA,EAAIC,EAAKD,IAAK,CACtB,IAAII,EAAQrC,KAAKkB,MAAMa,EAAME,SACfK,IAAVD,IAGCA,EAAME,OAEAF,EAAMF,QACbnC,KAAKwC,QAAQH,EAAOD,GAFpBA,EAAIK,KAAKJ,IAKjB,OAAOD,GAEXI,QAAS,SAAUE,EAAKN,GAIpB,IAAIF,EAAKD,EAAGU,EAAMC,EAAWC,EAAGC,EAChC,IAJKV,IACDA,MAGCH,EAAI,EAAGC,EAAMQ,EAAIP,OAAQF,EAAIC,EAAKD,IAEnC,QAAaK,KADbK,EAAOD,EAAIT,IAIX,GAAKU,EAAKJ,OAIV,IAAKM,EAAI,EAAGD,EAAYD,EAAKR,OAAQU,EAAID,EAAWC,SAE7BP,KADnBQ,EAAaH,EAAKE,MAIbC,EAAWP,OAELO,EAAWX,QAClBnC,KAAKwC,QAAQM,EAAYV,GAFzBA,EAAIK,KAAKK,SATbV,EAAIK,KAAKE,GAejB,OAAOP,IAGf7C,EAAOD,QAAUQ,EAUbc,EAAkBrB,EAAOD,SAClBC,EAAOD,QACTsB,EAAkBtB,GAChBA,OADN","file":"../../../engine/visitors/visitor.js","sourcesContent":["define(['../tree/index'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var tree = __module__0;\n    var _visitArgs = { visitDeeper: true }, _hasIndexed = false;\n    function _noop(node) {\n        return node;\n    }\n    function indexNodeTypes(parent, ticker) {\n        var key, child;\n        for (key in parent) {\n            child = parent[key];\n            switch (typeof child) {\n            case 'function':\n                if (child.prototype && child.prototype.type) {\n                    child.prototype.typeIndex = ticker++;\n                }\n                break;\n            case 'object':\n                ticker = indexNodeTypes(child, ticker);\n                break;\n            }\n        }\n        return ticker;\n    }\n    var Visitor = function (implementation) {\n        this._implementation = implementation;\n        this._visitInCache = {};\n        this._visitOutCache = {};\n        if (!_hasIndexed) {\n            indexNodeTypes(tree, 1);\n            _hasIndexed = true;\n        }\n    };\n    Visitor.prototype = {\n        visit: function (node) {\n            if (!node) {\n                return node;\n            }\n            var nodeTypeIndex = node.typeIndex;\n            if (!nodeTypeIndex) {\n                if (node.value && node.value.typeIndex) {\n                    this.visit(node.value);\n                }\n                return node;\n            }\n            var impl = this._implementation, func = this._visitInCache[nodeTypeIndex], funcOut = this._visitOutCache[nodeTypeIndex], visitArgs = _visitArgs, fnName;\n            visitArgs.visitDeeper = true;\n            if (!func) {\n                fnName = 'visit' + node.type;\n                func = impl[fnName] || _noop;\n                funcOut = impl[fnName + 'Out'] || _noop;\n                this._visitInCache[nodeTypeIndex] = func;\n                this._visitOutCache[nodeTypeIndex] = funcOut;\n            }\n            if (func !== _noop) {\n                var newNode = func.call(impl, node, visitArgs);\n                if (node && impl.isReplacing) {\n                    node = newNode;\n                }\n            }\n            if (visitArgs.visitDeeper && node && node.accept) {\n                node.accept(this);\n            }\n            if (funcOut != _noop) {\n                funcOut.call(impl, node);\n            }\n            return node;\n        },\n        visitArray: function (nodes, nonReplacing) {\n            if (!nodes) {\n                return nodes;\n            }\n            var cnt = nodes.length, i;\n            if (nonReplacing || !this._implementation.isReplacing) {\n                for (i = 0; i < cnt; i++) {\n                    this.visit(nodes[i]);\n                }\n                return nodes;\n            }\n            var out = [];\n            for (i = 0; i < cnt; i++) {\n                var evald = this.visit(nodes[i]);\n                if (evald === undefined) {\n                    continue;\n                }\n                if (!evald.splice) {\n                    out.push(evald);\n                } else if (evald.length) {\n                    this.flatten(evald, out);\n                }\n            }\n            return out;\n        },\n        flatten: function (arr, out) {\n            if (!out) {\n                out = [];\n            }\n            var cnt, i, item, nestedCnt, j, nestedItem;\n            for (i = 0, cnt = arr.length; i < cnt; i++) {\n                item = arr[i];\n                if (item === undefined) {\n                    continue;\n                }\n                if (!item.splice) {\n                    out.push(item);\n                    continue;\n                }\n                for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                    nestedItem = item[j];\n                    if (nestedItem === undefined) {\n                        continue;\n                    }\n                    if (!nestedItem.splice) {\n                        out.push(nestedItem);\n                    } else if (nestedItem.length) {\n                        this.flatten(nestedItem, out);\n                    }\n                }\n            }\n            return out;\n        }\n    };\n    module.exports = Visitor;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}