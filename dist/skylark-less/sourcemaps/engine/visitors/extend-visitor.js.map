{"version":3,"sources":["engine/visitors/extend-visitor.js"],"names":["tree","require","Visitor","logger","utils","ExtendFinderVisitor","this","_visitor","contexts","allExtendsStack","prototype","run","root","visit","allExtends","visitDeclaration","declNode","visitArgs","visitDeeper","visitMixinDefinition","mixinDefinitionNode","visitRuleset","rulesetNode","i","j","extend","extendList","allSelectorsExtendList","rules","ruleCnt","length","Extend","push","extendOnEveryPath","paths","selectorPath","selExtendList","copyArray","concat","map","allSelectorsExtend","clone","foundExtends","findSelfSelectors","ruleset","firstExtendOnThisSelectorPath","selectors","visitRulesetOut","visitMedia","mediaNode","visitMediaOut","visitAtRule","atRuleNode","visitAtRuleOut","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","filter","hasFoundMatches","parent_ids","forEach","selector","toCSS","_","index","warn","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","newSelector","targetExtend","newExtend","extendsToAdd","extendVisitor","indexOf","object_id","selfSelectors","findMatch","selfSelector","info","visibilityInfo","extendSelector","isVisible","option","fileInfo","extendChainCount","selectorOne","selectorTwo","e","message","ruleNode","visitSelector","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","potentialMatch","needleElements","elements","potentialMatches","allowBefore","matched","initialCombinator","combinator","value","isElementValuesEqual","finished","allowAfter","endPathIndex","endPathElementIndex","splice","elementValue1","elementValue2","Attribute","op","key","Selector","replacementSelector","matchIndex","firstElement","match","newElements","currentSelectorPathIndex","currentSelectorPathElementIndex","path","Element","isVariable","getIndex","slice","currentValue","derived","createDerived","ensureVisibility","ensureInvisibility","newAllExtends","lastIndex","module","exports"],"mappings":"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","file":"../../../engine/visitors/extend-visitor.js","sourcesContent":["var tree = require('../tree'), Visitor = require('./visitor'), logger = require('../logger'), utils = require('../utils');\nvar ExtendFinderVisitor = function () {\n    this._visitor = new Visitor(this);\n    this.contexts = [];\n    this.allExtendsStack = [[]];\n};\nExtendFinderVisitor.prototype = {\n    run: function (root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        var i, j, extend, allSelectorsExtendList = [], extendList;\n        var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n        var paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            var selectorPath = paths[i], selector = selectorPath[selectorPath.length - 1], selExtendList = selector.extendList;\n            extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList) : allSelectorsExtendList;\n            if (extendList) {\n                extendList = extendList.map(function (allSelectorsExtend) {\n                    return allSelectorsExtend.clone();\n                });\n            }\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) {\n                    extend.firstExtendOnThisSelectorPath = true;\n                }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n        this.contexts.push(rulesetNode.selectors);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        atRuleNode.allExtends = [];\n        this.allExtendsStack.push(atRuleNode.allExtends);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n};\nvar ProcessExtendsVisitor = function () {\n    this._visitor = new Visitor(this);\n};\nProcessExtendsVisitor.prototype = {\n    run: function (root) {\n        var extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) {\n            return root;\n        }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        var newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    },\n    checkExtendsForNonMatched: function (extendList) {\n        var indices = this.extendIndices;\n        extendList.filter(function (extend) {\n            return !extend.hasFoundMatches && extend.parent_ids.length == 1;\n        }).forEach(function (extend) {\n            var selector = '_unknown_';\n            try {\n                selector = extend.selector.toCSS({});\n            } catch (_) {\n            }\n            if (!indices[extend.index + ' ' + selector]) {\n                indices[extend.index + ' ' + selector] = true;\n                logger.warn(\"extend '\" + selector + \"' has no matches\");\n            }\n        });\n    },\n    doExtendChaining: function (extendsList, extendsListTarget, iterationCount) {\n        var extendIndex, targetExtendIndex, matches, extendsToAdd = [], newSelector, extendVisitor = this, selectorPath, extend, targetExtend, newExtend;\n        iterationCount = iterationCount || 0;\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n                if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\n                    continue;\n                }\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n                    extend.selfSelectors.forEach(function (selfSelector) {\n                        var info = targetExtend.visibilityInfo();\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n                        newExtend = new tree.Extend(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                        newExtend.selfSelectors = newSelector;\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n        if (extendsToAdd.length) {\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                var selectorOne = '{unable to calculate}';\n                var selectorTwo = '{unable to calculate}';\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                } catch (e) {\n                }\n                throw { message: 'extend circular reference detected. One of the circular extends is currently:' + selectorOne + ':extend(' + selectorTwo + ')' };\n            }\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    },\n    visitDeclaration: function (ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitSelector: function (selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        var matches, pathIndex, extendIndex, allExtends = this.allExtendsStack[this.allExtendsStack.length - 1], selectorsToAdd = [], extendVisitor = this, selectorPath;\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n                if (rulesetNode.extendOnEveryPath) {\n                    continue;\n                }\n                var extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) {\n                    continue;\n                }\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n                    allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {\n                        var extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    },\n    findMatch: function (extend, haystackSelectorPath) {\n        var haystackSelectorIndex, hackstackSelector, hackstackElementIndex, haystackElement, targetCombinator, i, extendVisitor = this, needleElements = extend.selector.elements, potentialMatches = [], potentialMatch, matches = [];\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n                if (extend.allowBefore || haystackSelectorIndex === 0 && hackstackElementIndex === 0) {\n                    potentialMatches.push({\n                        pathIndex: haystackSelectorIndex,\n                        index: hackstackElementIndex,\n                        matched: 0,\n                        initialCombinator: haystackElement.combinator\n                    });\n                }\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) || potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished && (!extend.allowAfter && (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1;\n                            potentialMatches.length = 0;\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    },\n    isElementValuesEqual: function (elementValue1, elementValue2) {\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (var i = 0; i < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    },\n    extendSelector: function (matches, selectorPath, replacementSelector, isVisible) {\n        var currentSelectorPathIndex = 0, currentSelectorPathElementIndex = 0, path = [], matchIndex, selector, firstElement, match, newElements;\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].isVariable, replacementSelector.elements[0].getIndex(), replacementSelector.elements[0].fileInfo());\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n            newElements = selector.elements.slice(currentSelectorPathElementIndex, match.index).concat([firstElement]).concat(replacementSelector.elements.slice(1));\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n                path.push(new tree.Selector(newElements));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(function (currentValue) {\n            var derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitMediaOut: function (mediaNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n};\nmodule.exports = ProcessExtendsVisitor;"]}