{"version":3,"sources":["engine/visitors/extend-visitor.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","exports","module","tree","Visitor","logger","utils","ExtendFinderVisitor","this","_visitor","contexts","allExtendsStack","prototype","run","root","visit","allExtends","visitDeclaration","declNode","visitArgs","visitDeeper","visitMixinDefinition","mixinDefinitionNode","visitRuleset","rulesetNode","i","j","extend","extendList","allSelectorsExtendList","rules","ruleCnt","length","Extend","push","extendOnEveryPath","paths","selectorPath","selExtendList","copyArray","concat","map","allSelectorsExtend","clone","foundExtends","findSelfSelectors","ruleset","firstExtendOnThisSelectorPath","selectors","visitRulesetOut","visitMedia","mediaNode","visitMediaOut","visitAtRule","atRuleNode","visitAtRuleOut","ProcessExtendsVisitor","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","filter","hasFoundMatches","parent_ids","forEach","selector","toCSS","_","index","warn","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","newSelector","targetExtend","newExtend","extendsToAdd","extendVisitor","indexOf","object_id","selfSelectors","findMatch","selfSelector","info","visibilityInfo","extendSelector","isVisible","option","fileInfo","extendChainCount","selectorOne","selectorTwo","e","message","ruleNode","visitSelector","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","potentialMatch","needleElements","elements","potentialMatches","allowBefore","matched","initialCombinator","combinator","value","isElementValuesEqual","finished","allowAfter","endPathIndex","endPathElementIndex","splice","elementValue1","elementValue2","Attribute","op","key","Selector","replacementSelector","matchIndex","firstElement","match","newElements","currentSelectorPathIndex","currentSelectorPathElementIndex","path","Element","isVariable","getIndex","slice","currentValue","derived","createDerived","ensureVisibility","ensureInvisibility","newAllExtends","lastIndex"],"mappings":"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","file":"../../../engine/visitors/extend-visitor.js","sourcesContent":["define([\n    '../tree/index',\n    './visitor',\n    '../logger',\n    '../utils'\n], function (__module__0, __module__1, __module__2, __module__3) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var tree = __module__0, Visitor = __module__1, logger = __module__2, utils = __module__3;\n    var ExtendFinderVisitor = function () {\n        this._visitor = new Visitor(this);\n        this.contexts = [];\n        this.allExtendsStack = [[]];\n    };\n    ExtendFinderVisitor.prototype = {\n        run: function (root) {\n            root = this._visitor.visit(root);\n            root.allExtends = this.allExtendsStack[0];\n            return root;\n        },\n        visitDeclaration: function (declNode, visitArgs) {\n            visitArgs.visitDeeper = false;\n        },\n        visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n            visitArgs.visitDeeper = false;\n        },\n        visitRuleset: function (rulesetNode, visitArgs) {\n            if (rulesetNode.root) {\n                return;\n            }\n            var i, j, extend, allSelectorsExtendList = [], extendList;\n            var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\n            for (i = 0; i < ruleCnt; i++) {\n                if (rulesetNode.rules[i] instanceof tree.Extend) {\n                    allSelectorsExtendList.push(rules[i]);\n                    rulesetNode.extendOnEveryPath = true;\n                }\n            }\n            var paths = rulesetNode.paths;\n            for (i = 0; i < paths.length; i++) {\n                var selectorPath = paths[i], selector = selectorPath[selectorPath.length - 1], selExtendList = selector.extendList;\n                extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList) : allSelectorsExtendList;\n                if (extendList) {\n                    extendList = extendList.map(function (allSelectorsExtend) {\n                        return allSelectorsExtend.clone();\n                    });\n                }\n                for (j = 0; j < extendList.length; j++) {\n                    this.foundExtends = true;\n                    extend = extendList[j];\n                    extend.findSelfSelectors(selectorPath);\n                    extend.ruleset = rulesetNode;\n                    if (j === 0) {\n                        extend.firstExtendOnThisSelectorPath = true;\n                    }\n                    this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n                }\n            }\n            this.contexts.push(rulesetNode.selectors);\n        },\n        visitRulesetOut: function (rulesetNode) {\n            if (!rulesetNode.root) {\n                this.contexts.length = this.contexts.length - 1;\n            }\n        },\n        visitMedia: function (mediaNode, visitArgs) {\n            mediaNode.allExtends = [];\n            this.allExtendsStack.push(mediaNode.allExtends);\n        },\n        visitMediaOut: function (mediaNode) {\n            this.allExtendsStack.length = this.allExtendsStack.length - 1;\n        },\n        visitAtRule: function (atRuleNode, visitArgs) {\n            atRuleNode.allExtends = [];\n            this.allExtendsStack.push(atRuleNode.allExtends);\n        },\n        visitAtRuleOut: function (atRuleNode) {\n            this.allExtendsStack.length = this.allExtendsStack.length - 1;\n        }\n    };\n    var ProcessExtendsVisitor = function () {\n        this._visitor = new Visitor(this);\n    };\n    ProcessExtendsVisitor.prototype = {\n        run: function (root) {\n            var extendFinder = new ExtendFinderVisitor();\n            this.extendIndices = {};\n            extendFinder.run(root);\n            if (!extendFinder.foundExtends) {\n                return root;\n            }\n            root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n            this.allExtendsStack = [root.allExtends];\n            var newRoot = this._visitor.visit(root);\n            this.checkExtendsForNonMatched(root.allExtends);\n            return newRoot;\n        },\n        checkExtendsForNonMatched: function (extendList) {\n            var indices = this.extendIndices;\n            extendList.filter(function (extend) {\n                return !extend.hasFoundMatches && extend.parent_ids.length == 1;\n            }).forEach(function (extend) {\n                var selector = '_unknown_';\n                try {\n                    selector = extend.selector.toCSS({});\n                } catch (_) {\n                }\n                if (!indices[extend.index + ' ' + selector]) {\n                    indices[extend.index + ' ' + selector] = true;\n                    logger.warn(\"extend '\" + selector + \"' has no matches\");\n                }\n            });\n        },\n        doExtendChaining: function (extendsList, extendsListTarget, iterationCount) {\n            var extendIndex, targetExtendIndex, matches, extendsToAdd = [], newSelector, extendVisitor = this, selectorPath, extend, targetExtend, newExtend;\n            iterationCount = iterationCount || 0;\n            for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n                for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n                    extend = extendsList[extendIndex];\n                    targetExtend = extendsListTarget[targetExtendIndex];\n                    if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\n                        continue;\n                    }\n                    selectorPath = [targetExtend.selfSelectors[0]];\n                    matches = extendVisitor.findMatch(extend, selectorPath);\n                    if (matches.length) {\n                        extend.hasFoundMatches = true;\n                        extend.selfSelectors.forEach(function (selfSelector) {\n                            var info = targetExtend.visibilityInfo();\n                            newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n                            newExtend = new tree.Extend(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                            newExtend.selfSelectors = newSelector;\n                            newSelector[newSelector.length - 1].extendList = [newExtend];\n                            extendsToAdd.push(newExtend);\n                            newExtend.ruleset = targetExtend.ruleset;\n                            newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n                            if (targetExtend.firstExtendOnThisSelectorPath) {\n                                newExtend.firstExtendOnThisSelectorPath = true;\n                                targetExtend.ruleset.paths.push(newSelector);\n                            }\n                        });\n                    }\n                }\n            }\n            if (extendsToAdd.length) {\n                this.extendChainCount++;\n                if (iterationCount > 100) {\n                    var selectorOne = '{unable to calculate}';\n                    var selectorTwo = '{unable to calculate}';\n                    try {\n                        selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                        selectorTwo = extendsToAdd[0].selector.toCSS();\n                    } catch (e) {\n                    }\n                    throw { message: 'extend circular reference detected. One of the circular extends is currently:' + selectorOne + ':extend(' + selectorTwo + ')' };\n                }\n                return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n            } else {\n                return extendsToAdd;\n            }\n        },\n        visitDeclaration: function (ruleNode, visitArgs) {\n            visitArgs.visitDeeper = false;\n        },\n        visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n            visitArgs.visitDeeper = false;\n        },\n        visitSelector: function (selectorNode, visitArgs) {\n            visitArgs.visitDeeper = false;\n        },\n        visitRuleset: function (rulesetNode, visitArgs) {\n            if (rulesetNode.root) {\n                return;\n            }\n            var matches, pathIndex, extendIndex, allExtends = this.allExtendsStack[this.allExtendsStack.length - 1], selectorsToAdd = [], extendVisitor = this, selectorPath;\n            for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n                for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                    selectorPath = rulesetNode.paths[pathIndex];\n                    if (rulesetNode.extendOnEveryPath) {\n                        continue;\n                    }\n                    var extendList = selectorPath[selectorPath.length - 1].extendList;\n                    if (extendList && extendList.length) {\n                        continue;\n                    }\n                    matches = this.findMatch(allExtends[extendIndex], selectorPath);\n                    if (matches.length) {\n                        allExtends[extendIndex].hasFoundMatches = true;\n                        allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {\n                            var extendedSelectors;\n                            extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                            selectorsToAdd.push(extendedSelectors);\n                        });\n                    }\n                }\n            }\n            rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n        },\n        findMatch: function (extend, haystackSelectorPath) {\n            var haystackSelectorIndex, hackstackSelector, hackstackElementIndex, haystackElement, targetCombinator, i, extendVisitor = this, needleElements = extend.selector.elements, potentialMatches = [], potentialMatch, matches = [];\n            for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n                hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n                for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n                    haystackElement = hackstackSelector.elements[hackstackElementIndex];\n                    if (extend.allowBefore || haystackSelectorIndex === 0 && hackstackElementIndex === 0) {\n                        potentialMatches.push({\n                            pathIndex: haystackSelectorIndex,\n                            index: hackstackElementIndex,\n                            matched: 0,\n                            initialCombinator: haystackElement.combinator\n                        });\n                    }\n                    for (i = 0; i < potentialMatches.length; i++) {\n                        potentialMatch = potentialMatches[i];\n                        targetCombinator = haystackElement.combinator.value;\n                        if (targetCombinator === '' && hackstackElementIndex === 0) {\n                            targetCombinator = ' ';\n                        }\n                        if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) || potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator) {\n                            potentialMatch = null;\n                        } else {\n                            potentialMatch.matched++;\n                        }\n                        if (potentialMatch) {\n                            potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                            if (potentialMatch.finished && (!extend.allowAfter && (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                                potentialMatch = null;\n                            }\n                        }\n                        if (potentialMatch) {\n                            if (potentialMatch.finished) {\n                                potentialMatch.length = needleElements.length;\n                                potentialMatch.endPathIndex = haystackSelectorIndex;\n                                potentialMatch.endPathElementIndex = hackstackElementIndex + 1;\n                                potentialMatches.length = 0;\n                                matches.push(potentialMatch);\n                            }\n                        } else {\n                            potentialMatches.splice(i, 1);\n                            i--;\n                        }\n                    }\n                }\n            }\n            return matches;\n        },\n        isElementValuesEqual: function (elementValue1, elementValue2) {\n            if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n                return elementValue1 === elementValue2;\n            }\n            if (elementValue1 instanceof tree.Attribute) {\n                if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                    return false;\n                }\n                if (!elementValue1.value || !elementValue2.value) {\n                    if (elementValue1.value || elementValue2.value) {\n                        return false;\n                    }\n                    return true;\n                }\n                elementValue1 = elementValue1.value.value || elementValue1.value;\n                elementValue2 = elementValue2.value.value || elementValue2.value;\n                return elementValue1 === elementValue2;\n            }\n            elementValue1 = elementValue1.value;\n            elementValue2 = elementValue2.value;\n            if (elementValue1 instanceof tree.Selector) {\n                if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                    return false;\n                }\n                for (var i = 0; i < elementValue1.elements.length; i++) {\n                    if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                        if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                            return false;\n                        }\n                    }\n                    if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        },\n        extendSelector: function (matches, selectorPath, replacementSelector, isVisible) {\n            var currentSelectorPathIndex = 0, currentSelectorPathElementIndex = 0, path = [], matchIndex, selector, firstElement, match, newElements;\n            for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n                match = matches[matchIndex];\n                selector = selectorPath[match.pathIndex];\n                firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].isVariable, replacementSelector.elements[0].getIndex(), replacementSelector.elements[0].fileInfo());\n                if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                    path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                    currentSelectorPathElementIndex = 0;\n                    currentSelectorPathIndex++;\n                }\n                newElements = selector.elements.slice(currentSelectorPathElementIndex, match.index).concat([firstElement]).concat(replacementSelector.elements.slice(1));\n                if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                    path[path.length - 1].elements = path[path.length - 1].elements.concat(newElements);\n                } else {\n                    path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n                    path.push(new tree.Selector(newElements));\n                }\n                currentSelectorPathIndex = match.endPathIndex;\n                currentSelectorPathElementIndex = match.endPathElementIndex;\n                if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                    currentSelectorPathElementIndex = 0;\n                    currentSelectorPathIndex++;\n                }\n            }\n            if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathIndex++;\n            }\n            path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n            path = path.map(function (currentValue) {\n                var derived = currentValue.createDerived(currentValue.elements);\n                if (isVisible) {\n                    derived.ensureVisibility();\n                } else {\n                    derived.ensureInvisibility();\n                }\n                return derived;\n            });\n            return path;\n        },\n        visitMedia: function (mediaNode, visitArgs) {\n            var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n            newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n            this.allExtendsStack.push(newAllExtends);\n        },\n        visitMediaOut: function (mediaNode) {\n            var lastIndex = this.allExtendsStack.length - 1;\n            this.allExtendsStack.length = lastIndex;\n        },\n        visitAtRule: function (atRuleNode, visitArgs) {\n            var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n            newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n            this.allExtendsStack.push(newAllExtends);\n        },\n        visitAtRuleOut: function (atRuleNode) {\n            var lastIndex = this.allExtendsStack.length - 1;\n            this.allExtendsStack.length = lastIndex;\n        }\n    };\n    module.exports = ProcessExtendsVisitor;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}