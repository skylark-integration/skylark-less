{"version":3,"sources":["engine/visitors/to-css-visitor.js"],"names":["tree","require","Visitor","CSSVisitorUtils","context","this","_visitor","_context","prototype","containsSilentNonBlockedChild","bodyRules","rule","r","length","isSilent","blocksVisibility","keepOnlyVisibleChilds","owner","rules","filter","thing","isVisible","isEmpty","hasVisibleSelector","rulesetNode","paths","resolveVisibility","node","originalRules","compiledRulesBody","ensureVisibility","removeVisibilityBlock","isVisibleRuleset","firstRoot","root","ToCSSVisitor","utils","isReplacing","run","visit","visitDeclaration","declNode","visitArgs","variable","visitMixinDefinition","mixinNode","frames","visitExtend","extendNode","visitComment","commentNode","visitMedia","mediaNode","accept","visitDeeper","visitImport","importNode","visitAtRule","atRuleNode","visitAtRuleWithBody","visitAtRuleWithoutBody","visitAnonymous","anonymousNode","nodeRules","hasFakeRuleset","getBodyRules","_mergeRules","name","charset","debugInfo","comment","Comment","toCSS","replace","checkValidNodes","isRoot","i","ruleNode","Declaration","message","index","getIndex","filename","fileInfo","Call","type","allowRoot","visitRuleset","rulesets","_compileRulesetPaths","nodeRuleCnt","push","splice","_removeDuplicateRules","p","elements","combinator","value","Combinator","getIsOutput","ruleList","ruleCache","ruleCSS","indexOf","groups","groupsArr","merge","key","forEach","group","result","space","comma","Expression","important","Value","module","exports"],"mappings":"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","file":"../../../engine/visitors/to-css-visitor.js","sourcesContent":["var tree = require('../tree'), Visitor = require('./visitor');\nvar CSSVisitorUtils = function (context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n};\nCSSVisitorUtils.prototype = {\n    containsSilentNonBlockedChild: function (bodyRules) {\n        var rule;\n        if (!bodyRules) {\n            return false;\n        }\n        for (var r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                return true;\n            }\n        }\n        return false;\n    },\n    keepOnlyVisibleChilds: function (owner) {\n        if (owner && owner.rules) {\n            owner.rules = owner.rules.filter(function (thing) {\n                return thing.isVisible();\n            });\n        }\n    },\n    isEmpty: function (owner) {\n        return owner && owner.rules ? owner.rules.length === 0 : true;\n    },\n    hasVisibleSelector: function (rulesetNode) {\n        return rulesetNode && rulesetNode.paths ? rulesetNode.paths.length > 0 : false;\n    },\n    resolveVisibility: function (node, originalRules) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                return;\n            }\n            return node;\n        }\n        var compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n        if (this.isEmpty(compiledRulesBody)) {\n            return;\n        }\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n        return node;\n    },\n    isVisibleRuleset: function (rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n        return true;\n    }\n};\nvar ToCSSVisitor = function (context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.blocksVisibility() || declNode.variable) {\n            return;\n        }\n        return declNode;\n    },\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        mixinNode.frames = [];\n    },\n    visitExtend: function (extendNode, visitArgs) {\n    },\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        var originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return;\n        }\n        return importNode;\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n        } else {\n            return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n        }\n    },\n    visitAnonymous: function (anonymousNode, visitArgs) {\n        if (!anonymousNode.blocksVisibility()) {\n            anonymousNode.accept(this._visitor);\n            return anonymousNode;\n        }\n    },\n    visitAtRuleWithBody: function (atRuleNode, visitArgs) {\n        function hasFakeRuleset(atRuleNode) {\n            var bodyRules = atRuleNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(atRuleNode) {\n            var nodeRules = atRuleNode.rules;\n            if (hasFakeRuleset(atRuleNode)) {\n                return nodeRules[0].rules;\n            }\n            return nodeRules;\n        }\n        var originalRules = getBodyRules(atRuleNode);\n        atRuleNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n        if (!this.utils.isEmpty(atRuleNode)) {\n            this._mergeRules(atRuleNode.rules[0].rules);\n        }\n        return this.utils.resolveVisibility(atRuleNode, originalRules);\n    },\n    visitAtRuleWithoutBody: function (atRuleNode, visitArgs) {\n        if (atRuleNode.blocksVisibility()) {\n            return;\n        }\n        if (atRuleNode.name === '@charset') {\n            if (this.charset) {\n                if (atRuleNode.debugInfo) {\n                    var comment = new tree.Comment('/* ' + atRuleNode.toCSS(this._context).replace(/\\n/g, '') + ' */\\n');\n                    comment.debugInfo = atRuleNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n        return atRuleNode;\n    },\n    checkValidNodes: function (rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n        for (var i = 0; i < rules.length; i++) {\n            var ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                throw {\n                    message: 'Properties must be inside selector blocks. They cannot be in the root',\n                    index: ruleNode.getIndex(),\n                    filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n                };\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw {\n                    message: \"Function '\" + ruleNode.name + \"' is undefined\",\n                    index: ruleNode.getIndex(),\n                    filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n                };\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw {\n                    message: ruleNode.type + ' node returned by a function is not valid here',\n                    index: ruleNode.getIndex(),\n                    filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n                };\n            }\n        }\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        var rule, rulesets = [];\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n        if (!rulesetNode.root) {\n            this._compileRulesetPaths(rulesetNode);\n            var nodeRules = rulesetNode.rules, nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (var i = 0; i < nodeRuleCnt;) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n        } else {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n    _compileRulesetPaths: function (rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths.filter(function (p) {\n                var i;\n                if (p[0].elements[0].combinator.value === ' ') {\n                    p[0].elements[0].combinator = new tree.Combinator('');\n                }\n                for (i = 0; i < p.length; i++) {\n                    if (p[i].isVisible() && p[i].getIsOutput()) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n    },\n    _removeDuplicateRules: function (rules) {\n        if (!rules) {\n            return;\n        }\n        var ruleCache = {}, ruleList, rule, i;\n        for (i = rules.length - 1; i >= 0; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Declaration) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Declaration) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    var ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n    _mergeRules: function (rules) {\n        if (!rules) {\n            return;\n        }\n        var groups = {}, groupsArr = [];\n        for (var i = 0; i < rules.length; i++) {\n            var rule = rules[i];\n            if (rule.merge) {\n                var key = rule.name;\n                groups[key] ? rules.splice(i--, 1) : groupsArr.push(groups[key] = []);\n                groups[key].push(rule);\n            }\n        }\n        groupsArr.forEach(function (group) {\n            if (group.length > 0) {\n                var result = group[0], space = [], comma = [new tree.Expression(space)];\n                group.forEach(function (rule) {\n                    if (rule.merge === '+' && space.length > 0) {\n                        comma.push(new tree.Expression(space = []));\n                    }\n                    space.push(rule.value);\n                    result.important = result.important || rule.important;\n                });\n                result.value = new tree.Value(comma);\n            }\n        });\n    }\n};\nmodule.exports = ToCSSVisitor;"]}