{"version":3,"sources":["engine/visitors/to-css-visitor.js"],"names":["define","__module__0","__module__1","exports","module","tree","Visitor","CSSVisitorUtils","context","this","_visitor","_context","prototype","containsSilentNonBlockedChild","bodyRules","rule","r","length","isSilent","blocksVisibility","keepOnlyVisibleChilds","owner","rules","filter","thing","isVisible","isEmpty","hasVisibleSelector","rulesetNode","paths","resolveVisibility","node","originalRules","compiledRulesBody","ensureVisibility","removeVisibilityBlock","isVisibleRuleset","firstRoot","root","ToCSSVisitor","utils","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","isReplacing","run","visit","visitDeclaration","declNode","visitArgs","variable","visitMixinDefinition","mixinNode","frames","visitExtend","extendNode","visitComment","commentNode","visitMedia","mediaNode","accept","visitDeeper","visitImport","importNode","visitAtRule","atRuleNode","visitAtRuleWithBody","visitAtRuleWithoutBody","visitAnonymous","anonymousNode","nodeRules","hasFakeRuleset","getBodyRules","_mergeRules","name","charset","debugInfo","comment","Comment","toCSS","replace","checkValidNodes","isRoot","i","ruleNode","Declaration","message","index","getIndex","filename","fileInfo","Call","type","allowRoot","visitRuleset","rulesets","_compileRulesetPaths","nodeRuleCnt","push","splice","_removeDuplicateRules","p","elements","combinator","value","Combinator","getIsOutput","ruleList","ruleCache","ruleCSS","indexOf","groups","groupsArr","merge","key","forEach","group","result","space","comma","Expression","important","Value"],"mappings":"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","file":"../../../engine/visitors/to-css-visitor.js","sourcesContent":["define([\n    '../tree/index',\n    './visitor'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var tree = __module__0, Visitor = __module__1;\n    var CSSVisitorUtils = function (context) {\n        this._visitor = new Visitor(this);\n        this._context = context;\n    };\n    CSSVisitorUtils.prototype = {\n        containsSilentNonBlockedChild: function (bodyRules) {\n            var rule;\n            if (!bodyRules) {\n                return false;\n            }\n            for (var r = 0; r < bodyRules.length; r++) {\n                rule = bodyRules[r];\n                if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        keepOnlyVisibleChilds: function (owner) {\n            if (owner && owner.rules) {\n                owner.rules = owner.rules.filter(function (thing) {\n                    return thing.isVisible();\n                });\n            }\n        },\n        isEmpty: function (owner) {\n            return owner && owner.rules ? owner.rules.length === 0 : true;\n        },\n        hasVisibleSelector: function (rulesetNode) {\n            return rulesetNode && rulesetNode.paths ? rulesetNode.paths.length > 0 : false;\n        },\n        resolveVisibility: function (node, originalRules) {\n            if (!node.blocksVisibility()) {\n                if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                    return;\n                }\n                return node;\n            }\n            var compiledRulesBody = node.rules[0];\n            this.keepOnlyVisibleChilds(compiledRulesBody);\n            if (this.isEmpty(compiledRulesBody)) {\n                return;\n            }\n            node.ensureVisibility();\n            node.removeVisibilityBlock();\n            return node;\n        },\n        isVisibleRuleset: function (rulesetNode) {\n            if (rulesetNode.firstRoot) {\n                return true;\n            }\n            if (this.isEmpty(rulesetNode)) {\n                return false;\n            }\n            if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n                return false;\n            }\n            return true;\n        }\n    };\n    var ToCSSVisitor = function (context) {\n        this._visitor = new Visitor(this);\n        this._context = context;\n        this.utils = new CSSVisitorUtils(context);\n    };\n    ToCSSVisitor.prototype = {\n        isReplacing: true,\n        run: function (root) {\n            return this._visitor.visit(root);\n        },\n        visitDeclaration: function (declNode, visitArgs) {\n            if (declNode.blocksVisibility() || declNode.variable) {\n                return;\n            }\n            return declNode;\n        },\n        visitMixinDefinition: function (mixinNode, visitArgs) {\n            mixinNode.frames = [];\n        },\n        visitExtend: function (extendNode, visitArgs) {\n        },\n        visitComment: function (commentNode, visitArgs) {\n            if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n                return;\n            }\n            return commentNode;\n        },\n        visitMedia: function (mediaNode, visitArgs) {\n            var originalRules = mediaNode.rules[0].rules;\n            mediaNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n            return this.utils.resolveVisibility(mediaNode, originalRules);\n        },\n        visitImport: function (importNode, visitArgs) {\n            if (importNode.blocksVisibility()) {\n                return;\n            }\n            return importNode;\n        },\n        visitAtRule: function (atRuleNode, visitArgs) {\n            if (atRuleNode.rules && atRuleNode.rules.length) {\n                return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n            } else {\n                return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n            }\n        },\n        visitAnonymous: function (anonymousNode, visitArgs) {\n            if (!anonymousNode.blocksVisibility()) {\n                anonymousNode.accept(this._visitor);\n                return anonymousNode;\n            }\n        },\n        visitAtRuleWithBody: function (atRuleNode, visitArgs) {\n            function hasFakeRuleset(atRuleNode) {\n                var bodyRules = atRuleNode.rules;\n                return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n            }\n            function getBodyRules(atRuleNode) {\n                var nodeRules = atRuleNode.rules;\n                if (hasFakeRuleset(atRuleNode)) {\n                    return nodeRules[0].rules;\n                }\n                return nodeRules;\n            }\n            var originalRules = getBodyRules(atRuleNode);\n            atRuleNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n            if (!this.utils.isEmpty(atRuleNode)) {\n                this._mergeRules(atRuleNode.rules[0].rules);\n            }\n            return this.utils.resolveVisibility(atRuleNode, originalRules);\n        },\n        visitAtRuleWithoutBody: function (atRuleNode, visitArgs) {\n            if (atRuleNode.blocksVisibility()) {\n                return;\n            }\n            if (atRuleNode.name === '@charset') {\n                if (this.charset) {\n                    if (atRuleNode.debugInfo) {\n                        var comment = new tree.Comment('/* ' + atRuleNode.toCSS(this._context).replace(/\\n/g, '') + ' */\\n');\n                        comment.debugInfo = atRuleNode.debugInfo;\n                        return this._visitor.visit(comment);\n                    }\n                    return;\n                }\n                this.charset = true;\n            }\n            return atRuleNode;\n        },\n        checkValidNodes: function (rules, isRoot) {\n            if (!rules) {\n                return;\n            }\n            for (var i = 0; i < rules.length; i++) {\n                var ruleNode = rules[i];\n                if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                    throw {\n                        message: 'Properties must be inside selector blocks. They cannot be in the root',\n                        index: ruleNode.getIndex(),\n                        filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n                    };\n                }\n                if (ruleNode instanceof tree.Call) {\n                    throw {\n                        message: \"Function '\" + ruleNode.name + \"' is undefined\",\n                        index: ruleNode.getIndex(),\n                        filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n                    };\n                }\n                if (ruleNode.type && !ruleNode.allowRoot) {\n                    throw {\n                        message: ruleNode.type + ' node returned by a function is not valid here',\n                        index: ruleNode.getIndex(),\n                        filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n                    };\n                }\n            }\n        },\n        visitRuleset: function (rulesetNode, visitArgs) {\n            var rule, rulesets = [];\n            this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n            if (!rulesetNode.root) {\n                this._compileRulesetPaths(rulesetNode);\n                var nodeRules = rulesetNode.rules, nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n                for (var i = 0; i < nodeRuleCnt;) {\n                    rule = nodeRules[i];\n                    if (rule && rule.rules) {\n                        rulesets.push(this._visitor.visit(rule));\n                        nodeRules.splice(i, 1);\n                        nodeRuleCnt--;\n                        continue;\n                    }\n                    i++;\n                }\n                if (nodeRuleCnt > 0) {\n                    rulesetNode.accept(this._visitor);\n                } else {\n                    rulesetNode.rules = null;\n                }\n                visitArgs.visitDeeper = false;\n            } else {\n                rulesetNode.accept(this._visitor);\n                visitArgs.visitDeeper = false;\n            }\n            if (rulesetNode.rules) {\n                this._mergeRules(rulesetNode.rules);\n                this._removeDuplicateRules(rulesetNode.rules);\n            }\n            if (this.utils.isVisibleRuleset(rulesetNode)) {\n                rulesetNode.ensureVisibility();\n                rulesets.splice(0, 0, rulesetNode);\n            }\n            if (rulesets.length === 1) {\n                return rulesets[0];\n            }\n            return rulesets;\n        },\n        _compileRulesetPaths: function (rulesetNode) {\n            if (rulesetNode.paths) {\n                rulesetNode.paths = rulesetNode.paths.filter(function (p) {\n                    var i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new tree.Combinator('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n            }\n        },\n        _removeDuplicateRules: function (rules) {\n            if (!rules) {\n                return;\n            }\n            var ruleCache = {}, ruleList, rule, i;\n            for (i = rules.length - 1; i >= 0; i--) {\n                rule = rules[i];\n                if (rule instanceof tree.Declaration) {\n                    if (!ruleCache[rule.name]) {\n                        ruleCache[rule.name] = rule;\n                    } else {\n                        ruleList = ruleCache[rule.name];\n                        if (ruleList instanceof tree.Declaration) {\n                            ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                        }\n                        var ruleCSS = rule.toCSS(this._context);\n                        if (ruleList.indexOf(ruleCSS) !== -1) {\n                            rules.splice(i, 1);\n                        } else {\n                            ruleList.push(ruleCSS);\n                        }\n                    }\n                }\n            }\n        },\n        _mergeRules: function (rules) {\n            if (!rules) {\n                return;\n            }\n            var groups = {}, groupsArr = [];\n            for (var i = 0; i < rules.length; i++) {\n                var rule = rules[i];\n                if (rule.merge) {\n                    var key = rule.name;\n                    groups[key] ? rules.splice(i--, 1) : groupsArr.push(groups[key] = []);\n                    groups[key].push(rule);\n                }\n            }\n            groupsArr.forEach(function (group) {\n                if (group.length > 0) {\n                    var result = group[0], space = [], comma = [new tree.Expression(space)];\n                    group.forEach(function (rule) {\n                        if (rule.merge === '+' && space.length > 0) {\n                            comma.push(new tree.Expression(space = []));\n                        }\n                        space.push(rule.value);\n                        result.important = result.important || rule.important;\n                    });\n                    result.value = new tree.Value(comma);\n                }\n            });\n        }\n    };\n    module.exports = ToCSSVisitor;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}