{"version":3,"sources":["engine/contexts.js"],"names":["contexts","module","exports","Constants","require","copyFromOriginal","original","destination","propertiesToCopy","i","length","hasOwnProperty","parseCopyProperties","Parse","options","this","paths","evalCopyProperties","isPathRelative","path","test","isPathLocalRelative","charAt","Eval","frames","importantScope","prototype","enterCalc","calcStack","push","inCalc","exitCalc","pop","inParenthesis","parensStack","outOfParenthesis","mathOn","isMathOn","op","math","Math","ALWAYS","PARENS_DIVISION","pathRequiresRewrite","rewriteUrls","RewriteUrls","LOCAL","rewritePath","rootpath","newPath","normalizePath","segment","segments","split","reverse","join"],"mappings":";;;;;;;AAAA,IAAIA,YACJC,OAAOC,QAAUF,SACjB,IAAIG,UAAYC,QAAQ,eACpBC,iBAAmB,SAA0BC,EAAUC,EAAaC,GACpE,GAAKF,EAGL,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAiBE,OAAQD,IACrCH,EAASK,eAAeH,EAAiBC,MACzCF,EAAYC,EAAiBC,IAAMH,EAASE,EAAiBC,MAIrEG,qBACA,QACA,cACA,WACA,gBACA,WACA,kBACA,WACA,aACA,aACA,OACA,eACA,iBACA,iBAEJZ,SAASa,MAAQ,SAAUC,GACvBT,iBAAiBS,EAASC,KAAMH,qBACN,iBAAfG,KAAKC,QACZD,KAAKC,OAASD,KAAKC,SAG3B,IAAIC,oBACA,QACA,WACA,WACA,OACA,cACA,YACA,iBACA,UACA,oBACA,gBACA,iBACA,eAiFJ,SAASC,eAAeC,GACpB,OAAQ,sBAAsBC,KAAKD,GAEvC,SAASE,oBAAoBF,GACzB,MAA0B,MAAnBA,EAAKG,OAAO,GAnFvBtB,SAASuB,KAAO,SAAUT,EAASU,GAC/BnB,iBAAiBS,EAASC,KAAME,oBACN,iBAAfF,KAAKC,QACZD,KAAKC,OAASD,KAAKC,QAEvBD,KAAKS,OAASA,MACdT,KAAKU,eAAiBV,KAAKU,oBAE/BzB,SAASuB,KAAKG,UAAUC,UAAY,WAC3BZ,KAAKa,YACNb,KAAKa,cAETb,KAAKa,UAAUC,MAAK,GACpBd,KAAKe,QAAS,GAElB9B,SAASuB,KAAKG,UAAUK,SAAW,WAC/BhB,KAAKa,UAAUI,MACVjB,KAAKa,YACNb,KAAKe,QAAS,IAGtB9B,SAASuB,KAAKG,UAAUO,cAAgB,WAC/BlB,KAAKmB,cACNnB,KAAKmB,gBAETnB,KAAKmB,YAAYL,MAAK,IAE1B7B,SAASuB,KAAKG,UAAUS,iBAAmB,WACvCpB,KAAKmB,YAAYF,OAErBhC,SAASuB,KAAKG,UAAUI,QAAS,EACjC9B,SAASuB,KAAKG,UAAUU,QAAS,EACjCpC,SAASuB,KAAKG,UAAUW,SAAW,SAAUC,GACzC,QAAKvB,KAAKqB,YAGC,MAAPE,GAAcvB,KAAKwB,OAASpC,UAAUqC,KAAKC,QAAY1B,KAAKmB,aAAgBnB,KAAKmB,YAAYxB,YAG7FK,KAAKwB,KAAOpC,UAAUqC,KAAKE,kBACpB3B,KAAKmB,aAAenB,KAAKmB,YAAYxB,UAIpDV,SAASuB,KAAKG,UAAUiB,oBAAsB,SAAUxB,GAEpD,OADiBJ,KAAK6B,cAAgBzC,UAAU0C,YAAYC,MAAQzB,oBAAsBH,gBACxEC,IAEtBnB,SAASuB,KAAKG,UAAUqB,YAAc,SAAU5B,EAAM6B,GAClD,IAAIC,EAMJ,OALAD,EAAWA,GAAY,GACvBC,EAAUlC,KAAKmC,cAAcF,EAAW7B,GACpCE,oBAAoBF,IAASD,eAAe8B,KAA8C,IAAjC3B,oBAAoB4B,KAC7EA,EAAU,KAAOA,GAEdA,GAEXjD,SAASuB,KAAKG,UAAUwB,cAAgB,SAAU/B,GAC9C,IAA0CgC,EAAtCC,EAAWjC,EAAKkC,MAAM,KAAKC,UAE/B,IADAnC,KAC2B,IAApBiC,EAAS1C,QAEZ,OADAyC,EAAUC,EAASpB,OAEnB,IAAK,IACD,MACJ,IAAK,KACmB,IAAhBb,EAAKT,QAA0C,OAA1BS,EAAKA,EAAKT,OAAS,GACxCS,EAAKU,KAAKsB,GAEVhC,EAAKa,MAET,MACJ,QACIb,EAAKU,KAAKsB,GAIlB,OAAOhC,EAAKoC,KAAK","file":"../../engine/contexts.js","sourcesContent":["var contexts = {};\nmodule.exports = contexts;\nvar Constants = require('./constants');\nvar copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) {\n        return;\n    }\n    for (var i = 0; i < propertiesToCopy.length; i++) {\n        if (original.hasOwnProperty(propertiesToCopy[i])) {\n            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n        }\n    }\n};\nvar parseCopyProperties = [\n    'paths',\n    'rewriteUrls',\n    'rootpath',\n    'strictImports',\n    'insecure',\n    'dumpLineNumbers',\n    'compress',\n    'syncImport',\n    'chunkInput',\n    'mime',\n    'useFileCache',\n    'processImports',\n    'pluginManager'\n];\ncontexts.Parse = function (options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n    if (typeof this.paths === 'string') {\n        this.paths = [this.paths];\n    }\n};\nvar evalCopyProperties = [\n    'paths',\n    'compress',\n    'ieCompat',\n    'math',\n    'strictUnits',\n    'sourceMap',\n    'importMultiple',\n    'urlArgs',\n    'javascriptEnabled',\n    'pluginManager',\n    'importantScope',\n    'rewriteUrls'\n];\ncontexts.Eval = function (options, frames) {\n    copyFromOriginal(options, this, evalCopyProperties);\n    if (typeof this.paths === 'string') {\n        this.paths = [this.paths];\n    }\n    this.frames = frames || [];\n    this.importantScope = this.importantScope || [];\n};\ncontexts.Eval.prototype.enterCalc = function () {\n    if (!this.calcStack) {\n        this.calcStack = [];\n    }\n    this.calcStack.push(true);\n    this.inCalc = true;\n};\ncontexts.Eval.prototype.exitCalc = function () {\n    this.calcStack.pop();\n    if (!this.calcStack) {\n        this.inCalc = false;\n    }\n};\ncontexts.Eval.prototype.inParenthesis = function () {\n    if (!this.parensStack) {\n        this.parensStack = [];\n    }\n    this.parensStack.push(true);\n};\ncontexts.Eval.prototype.outOfParenthesis = function () {\n    this.parensStack.pop();\n};\ncontexts.Eval.prototype.inCalc = false;\ncontexts.Eval.prototype.mathOn = true;\ncontexts.Eval.prototype.isMathOn = function (op) {\n    if (!this.mathOn) {\n        return false;\n    }\n    if (op === '/' && this.math !== Constants.Math.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n        return false;\n    }\n    if (this.math > Constants.Math.PARENS_DIVISION) {\n        return this.parensStack && this.parensStack.length;\n    }\n    return true;\n};\ncontexts.Eval.prototype.pathRequiresRewrite = function (path) {\n    var isRelative = this.rewriteUrls === Constants.RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n    return isRelative(path);\n};\ncontexts.Eval.prototype.rewritePath = function (path, rootpath) {\n    var newPath;\n    rootpath = rootpath || '';\n    newPath = this.normalizePath(rootpath + path);\n    if (isPathLocalRelative(path) && isPathRelative(rootpath) && isPathLocalRelative(newPath) === false) {\n        newPath = './' + newPath;\n    }\n    return newPath;\n};\ncontexts.Eval.prototype.normalizePath = function (path) {\n    var segments = path.split('/').reverse(), segment;\n    path = [];\n    while (segments.length !== 0) {\n        segment = segments.pop();\n        switch (segment) {\n        case '.':\n            break;\n        case '..':\n            if (path.length === 0 || path[path.length - 1] === '..') {\n                path.push(segment);\n            } else {\n                path.pop();\n            }\n            break;\n        default:\n            path.push(segment);\n            break;\n        }\n    }\n    return path.join('/');\n};\nfunction isPathRelative(path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n}\nfunction isPathLocalRelative(path) {\n    return path.charAt(0) === '.';\n}"]}