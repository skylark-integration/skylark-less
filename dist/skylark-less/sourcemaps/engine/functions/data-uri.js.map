{"version":3,"sources":["engine/functions/data-uri.js"],"names":["module","exports","environment","Quoted","require","URL","utils","functionRegistry","fallback","functionThis","node","index","currentFileInfo","eval","context","logger","add","mimetypeNode","filePathNode","mimetype","value","filePath","this","currentDirectory","rewriteUrls","entryPath","fragmentStart","indexOf","fragment","slice","clone","rawBuffer","fileManager","getFileManager","useBase64","test","mimeLookup","charset","charsetLookup","fileSync","loadFileSync","contents","warn","buf","encodeBase64","uri","encodeURIComponent","length","ieCompat"],"mappings":";;;;;;;AAAAA,OAAOC,QAAU,SAAUC,GACvB,IAAIC,EAASC,QAAQ,kBAAmBC,EAAMD,QAAQ,eAAgBE,EAAQF,QAAQ,YAAaG,EAAmBH,QAAQ,uBAAwBI,EAAW,SAAUC,EAAcC,GACjL,OAAO,IAAIL,EAAIK,EAAMD,EAAaE,MAAOF,EAAaG,iBAAiBC,KAAKJ,EAAaK,UAC1FC,EAASX,QAAQ,aACxBG,EAAiBS,IAAI,WAAY,SAAUC,EAAcC,GAChDA,IACDA,EAAeD,EACfA,EAAe,MAEnB,IAAIE,EAAWF,GAAgBA,EAAaG,MACxCC,EAAWH,EAAaE,MACxBR,EAAkBU,KAAKV,gBACvBW,EAAmBX,EAAgBY,YAAcZ,EAAgBW,iBAAmBX,EAAgBa,UACpGC,EAAgBL,EAASM,QAAQ,KACjCC,EAAW,IACQ,IAAnBF,IACAE,EAAWP,EAASQ,MAAMH,GAC1BL,EAAWA,EAASQ,MAAM,EAAGH,IAEjC,IAAIZ,EAAUR,EAAMwB,MAAMR,KAAKR,SAC/BA,EAAQiB,WAAY,EACpB,IAAIC,EAAc9B,EAAY+B,eAAeZ,EAAUE,EAAkBT,EAASZ,GAAa,GAC/F,IAAK8B,EACD,OAAOxB,EAASc,KAAMJ,GAE1B,IAAIgB,GAAY,EAChB,GAAKjB,EAeDiB,EAAY,WAAWC,KAAKhB,OAfb,CAEf,GAAiB,mBADjBA,EAAWjB,EAAYkC,WAAWf,IAE9Ba,GAAY,MACT,CACH,IAAIG,EAAUnC,EAAYoC,cAAcnB,GACxCe,GACI,WACA,SACFP,QAAQU,GAAW,EAErBH,IACAf,GAAY,WAKpB,IAAIoB,EAAWP,EAAYQ,aAAanB,EAAUE,EAAkBT,EAASZ,GAC7E,IAAKqC,EAASE,SAEV,OADA1B,EAAO2B,KAAK,iCAAmCrB,EAAW,2BACnDb,EAASc,KAAMJ,GAAgBD,GAE1C,IAAI0B,EAAMJ,EAASE,SACnB,GAAIP,IAAchC,EAAY0C,aAC1B,OAAOpC,EAASc,KAAMJ,GAG1B,IAAI2B,EAAM,QAAU1B,EAAW,KAD/BwB,EAAMT,EAAYhC,EAAY0C,aAAaD,GAAOG,mBAAmBH,IAC1Bf,EAE3C,OAAIiB,EAAIE,QADW,QAEe,IAA1BzB,KAAKR,QAAQkC,UACbjC,EAAO2B,KAAK,iCAAmCrB,EAAW,sBAAwBwB,EAAIE,OAAS,mDACxFvC,EAASc,KAAMJ,GAAgBD,IAGvC,IAAIZ,EAAI,IAAIF,EAAO,IAAM0C,EAAM,IAAKA,GAAK,EAAOvB,KAAKX,MAAOW,KAAKV,iBAAkBU,KAAKX,MAAOW,KAAKV","file":"../../../engine/functions/data-uri.js","sourcesContent":["module.exports = function (environment) {\n    var Quoted = require('../tree/quoted'), URL = require('../tree/url'), utils = require('../utils'), functionRegistry = require('./function-registry'), fallback = function (functionThis, node) {\n            return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);\n        }, logger = require('../logger');\n    functionRegistry.add('data-uri', function (mimetypeNode, filePathNode) {\n        if (!filePathNode) {\n            filePathNode = mimetypeNode;\n            mimetypeNode = null;\n        }\n        var mimetype = mimetypeNode && mimetypeNode.value;\n        var filePath = filePathNode.value;\n        var currentFileInfo = this.currentFileInfo;\n        var currentDirectory = currentFileInfo.rewriteUrls ? currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n        var fragmentStart = filePath.indexOf('#');\n        var fragment = '';\n        if (fragmentStart !== -1) {\n            fragment = filePath.slice(fragmentStart);\n            filePath = filePath.slice(0, fragmentStart);\n        }\n        var context = utils.clone(this.context);\n        context.rawBuffer = true;\n        var fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n        if (!fileManager) {\n            return fallback(this, filePathNode);\n        }\n        var useBase64 = false;\n        if (!mimetypeNode) {\n            mimetype = environment.mimeLookup(filePath);\n            if (mimetype === 'image/svg+xml') {\n                useBase64 = false;\n            } else {\n                var charset = environment.charsetLookup(mimetype);\n                useBase64 = [\n                    'US-ASCII',\n                    'UTF-8'\n                ].indexOf(charset) < 0;\n            }\n            if (useBase64) {\n                mimetype += ';base64';\n            }\n        } else {\n            useBase64 = /;base64$/.test(mimetype);\n        }\n        var fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n        if (!fileSync.contents) {\n            logger.warn('Skipped data-uri embedding of ' + filePath + ' because file not found');\n            return fallback(this, filePathNode || mimetypeNode);\n        }\n        var buf = fileSync.contents;\n        if (useBase64 && !environment.encodeBase64) {\n            return fallback(this, filePathNode);\n        }\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n        var uri = 'data:' + mimetype + ',' + buf + fragment;\n        var DATA_URI_MAX = 32768;\n        if (uri.length >= DATA_URI_MAX) {\n            if (this.context.ieCompat !== false) {\n                logger.warn('Skipped data-uri embedding of ' + filePath + ' because its size (' + uri.length + ' characters) exceeds IE8-safe ' + DATA_URI_MAX + ' characters!');\n                return fallback(this, filePathNode || mimetypeNode);\n            }\n        }\n        return new URL(new Quoted('\"' + uri + '\"', uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    });\n};"]}