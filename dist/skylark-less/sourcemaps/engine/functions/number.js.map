{"version":3,"sources":["engine/functions/number.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","exports","module","Dimension","Anonymous","mathHelper","minMax","isMin","args","Array","prototype","slice","call","length","type","message","i","j","current","currentUnified","referenceUnified","unit","unitStatic","unitClone","order","values","toString","undefined","value","unify","push","isArray","apply","map","a","toCSS","this","context","join","compress","__isValidToReturn","obj","attr","__isEmptyObject","addMultiple","min","arguments","max","convert","val","convertTo","pi","Math","PI","mod","b","pow","x","y","percentage","n","_math","num"],"mappings":";;;;;;;AAAAA,QACI,oBACA,oBACA,sBACA,iBACD,SAAUC,EAAaC,EAAaC,EAAaC,GAChD,aACA,IAAIC,KACAC,KACAC,EAAYN,EAAaO,EAAYN,EAA6CO,EAAaL,EAC/FM,EAAS,SAAUC,EAAOC,GAE1B,QADAA,EAAOC,MAAMC,UAAUC,MAAMC,KAAKJ,IACrBK,QACb,KAAK,EACD,MACIC,KAAM,WACNC,QAAS,kCAGjB,IAAIC,EAAGC,EAAGC,EAASC,EAAgBC,EAAkBC,EAAMC,EAAYC,EAAWC,KAAYC,KAC9F,IAAKT,EAAI,EAAGA,EAAIR,EAAKK,OAAQG,IAEzB,IADAE,EAAUV,EAAKQ,cACUb,EAWzB,GAHAmB,EAAsB,MADtBD,EAA0C,MAD1CF,EAA6C,KAA5BD,EAAQG,KAAKK,iBAAmCC,IAAdJ,EAA0B,IAAIpB,EAAUe,EAAQU,MAAOL,GAAWM,QAAUX,EAAQW,SACjHR,KAAKK,iBAAoCC,IAAfL,EAA2BA,EAAaH,EAAeE,KAAKK,kBACjEC,IAAfL,GAAqC,KAATD,GAAoD,KAArCG,EAAM,GAAGK,QAAQR,KAAKK,WAAoBL,EAAOC,EACxHC,EAAqB,KAATF,QAA6BM,IAAdJ,EAA0BL,EAAQG,KAAKK,WAAaH,OAErEI,KADVV,OAAmBU,IAAfF,EAAO,KAA8B,KAATJ,GAAeA,IAASC,EAAaG,EAAO,IAAMA,EAAOJ,IAYzFD,EAAgD,KAA7BI,EAAMP,GAAGI,KAAKK,iBAAmCC,IAAdJ,EAA0B,IAAIpB,EAAUqB,EAAMP,GAAGW,MAAOL,GAAWM,QAAUL,EAAMP,GAAGY,SACxItB,GAASY,EAAeS,MAAQR,EAAiBQ,QAAUrB,GAASY,EAAeS,MAAQR,EAAiBQ,SAC5GJ,EAAMP,GAAKC,OAbf,CACI,QAAmBS,IAAfL,GAA4BD,IAASC,EACrC,MACIR,KAAM,WACNC,QAAS,sBAGjBU,EAAOJ,GAAQG,EAAMX,OACrBW,EAAMM,KAAKZ,QAlBPT,MAAMsB,QAAQvB,EAAKQ,GAAGY,QACtBnB,MAAMC,UAAUoB,KAAKE,MAAMxB,EAAMC,MAAMC,UAAUC,MAAMC,KAAKJ,EAAKQ,GAAGY,QAyBhF,OAAoB,GAAhBJ,EAAMX,OACCW,EAAM,IAEjBhB,EAAOgB,EAAMS,IAAI,SAAUC,GACvB,OAAOA,EAAEC,MAAMC,KAAKC,WACrBC,KAAKF,KAAKC,QAAQE,SAAW,IAAM,MAC/B,IAAInC,GAAWG,EAAQ,MAAQ,OAAS,IAAMC,EAAO,OA2ChE,SAASgC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBhC,MAAMsB,QAAQU,KAPnD,SAAyBA,GACrB,IAAIC,EACJ,IAAKA,KAAQD,EACT,OAAO,EACX,OAAO,EAGiDE,CAAgBF,GAE5E,OA5FyE1C,EAgDxD6C,aACbC,IAAK,WACD,OAAOvC,GAAO,EAAMwC,YAExBC,IAAK,WACD,OAAOzC,GAAO,EAAOwC,YAEzBE,QAAS,SAAUC,EAAK5B,GACpB,OAAO4B,EAAIC,UAAU7B,EAAKO,QAE9BuB,GAAI,WACA,OAAO,IAAIhD,EAAUiD,KAAKC,KAE9BC,IAAK,SAAUpB,EAAGqB,GACd,OAAO,IAAIpD,EAAU+B,EAAEN,MAAQ2B,EAAE3B,MAAOM,EAAEb,OAE9CmC,IAAK,SAAUC,EAAGC,GACd,GAAiB,iBAAND,GAA+B,iBAANC,EAChCD,EAAI,IAAItD,EAAUsD,GAClBC,EAAI,IAAIvD,EAAUuD,QACf,KAAMD,aAAatD,GAAgBuD,aAAavD,GACnD,MACIW,KAAM,WACNC,QAAS,6BAGjB,OAAO,IAAIZ,EAAUiD,KAAKI,IAAIC,EAAE7B,MAAO8B,EAAE9B,OAAQ6B,EAAEpC,OAEvDsC,WAAY,SAAUC,GAIlB,OAHavD,EAAWwD,MAAM,SAAUC,GACpC,OAAa,IAANA,GACR,IAAKF,MAaZpB,EAAkBtC,GACXA,EACFsC,EAAkBvC,GAChBA,OADN","file":"../../../engine/functions/number.js","sourcesContent":["define([\n    '../tree/dimension',\n    '../tree/anonymous',\n    './function-registry',\n    './math-helper'\n], function (__module__0, __module__1, __module__2, __module__3) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Dimension = __module__0, Anonymous = __module__1, functionRegistry = __module__2, mathHelper = __module__3;\n    var minMax = function (isMin, args) {\n        args = Array.prototype.slice.call(args);\n        switch (args.length) {\n        case 0:\n            throw {\n                type: 'Argument',\n                message: 'one or more arguments required'\n            };\n        }\n        var i, j, current, currentUnified, referenceUnified, unit, unitStatic, unitClone, order = [], values = {};\n        for (i = 0; i < args.length; i++) {\n            current = args[i];\n            if (!(current instanceof Dimension)) {\n                if (Array.isArray(args[i].value)) {\n                    Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n                }\n                continue;\n            }\n            currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n            unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n            unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n            unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n            j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n            if (j === undefined) {\n                if (unitStatic !== undefined && unit !== unitStatic) {\n                    throw {\n                        type: 'Argument',\n                        message: 'incompatible types'\n                    };\n                }\n                values[unit] = order.length;\n                order.push(current);\n                continue;\n            }\n            referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n            if (isMin && currentUnified.value < referenceUnified.value || !isMin && currentUnified.value > referenceUnified.value) {\n                order[j] = current;\n            }\n        }\n        if (order.length == 1) {\n            return order[0];\n        }\n        args = order.map(function (a) {\n            return a.toCSS(this.context);\n        }).join(this.context.compress ? ',' : ', ');\n        return new Anonymous((isMin ? 'min' : 'max') + '(' + args + ')');\n    };\n    functionRegistry.addMultiple({\n        min: function () {\n            return minMax(true, arguments);\n        },\n        max: function () {\n            return minMax(false, arguments);\n        },\n        convert: function (val, unit) {\n            return val.convertTo(unit.value);\n        },\n        pi: function () {\n            return new Dimension(Math.PI);\n        },\n        mod: function (a, b) {\n            return new Dimension(a.value % b.value, a.unit);\n        },\n        pow: function (x, y) {\n            if (typeof x === 'number' && typeof y === 'number') {\n                x = new Dimension(x);\n                y = new Dimension(y);\n            } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n                throw {\n                    type: 'Argument',\n                    message: 'arguments must be numbers'\n                };\n            }\n            return new Dimension(Math.pow(x.value, y.value), x.unit);\n        },\n        percentage: function (n) {\n            var result = mathHelper._math(function (num) {\n                return num * 100;\n            }, '%', n);\n            return result;\n        }\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}