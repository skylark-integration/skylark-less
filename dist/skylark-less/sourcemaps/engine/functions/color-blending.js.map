{"version":3,"sources":["engine/functions/color-blending.js"],"names":["define","__module__0","__module__1","exports","module","Color","functionRegistry","colorBlend","mode","color1","color2","cb","cs","ar","cr","ab","alpha","as","r","i","rgb","colorBlendModeFunctions","multiply","screen","overlay","softlight","d","e","Math","sqrt","hardlight","difference","abs","exclusion","average","negation","f","hasOwnProperty","bind","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","addMultiple"],"mappings":";;;;;;;AAAAA,QACI,gBACA,uBACD,SAAUC,EAAaC,GACtB,aACA,IAAIC,KACAC,KACAC,EAAQJ,EAAaK,EAAmBJ,EAC5C,SAASK,EAAWC,EAAMC,EAAQC,GAC9B,IAAuBC,EAAuBC,EAAIC,EAAIC,EAAlDC,EAAKN,EAAOO,MAAWC,EAAKP,EAAOM,MAAmBE,KAC1DL,EAAKI,EAAKF,GAAM,EAAIE,GACpB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAGnBL,EAAKN,EAFLG,EAAKF,EAAOW,IAAID,GAAK,IACrBP,EAAKF,EAAOU,IAAID,GAAK,KAEjBN,IACAC,GAAMG,EAAKL,EAAKG,GAAMJ,EAAKM,GAAMN,EAAKC,EAAKE,KAAQD,GAEvDK,EAAEC,GAAU,IAALL,EAEX,OAAO,IAAIT,EAAMa,EAAGL,GAExB,IAAIQ,GACAC,SAAU,SAAUX,EAAIC,GACpB,OAAOD,EAAKC,GAEhBW,OAAQ,SAAUZ,EAAIC,GAClB,OAAOD,EAAKC,EAAKD,EAAKC,GAE1BY,QAAS,SAAUb,EAAIC,GAEnB,OADAD,GAAM,IACO,EAAIU,EAAwBC,SAASX,EAAIC,GAAMS,EAAwBE,OAAOZ,EAAK,EAAGC,IAEvGa,UAAW,SAAUd,EAAIC,GACrB,IAAIc,EAAI,EAAGC,EAAIhB,EAKf,OAJIC,EAAK,KACLe,EAAI,EACJD,EAAIf,EAAK,IAAOiB,KAAKC,KAAKlB,KAAQ,GAAKA,EAAK,IAAMA,EAAK,GAAKA,GAEzDA,GAAM,EAAI,EAAIC,GAAMe,GAAKD,EAAIf,IAExCmB,UAAW,SAAUnB,EAAIC,GACrB,OAAOS,EAAwBG,QAAQZ,EAAID,IAE/CoB,WAAY,SAAUpB,EAAIC,GACtB,OAAOgB,KAAKI,IAAIrB,EAAKC,IAEzBqB,UAAW,SAAUtB,EAAIC,GACrB,OAAOD,EAAKC,EAAK,EAAID,EAAKC,GAE9BsB,QAAS,SAAUvB,EAAIC,GACnB,OAAQD,EAAKC,GAAM,GAEvBuB,SAAU,SAAUxB,EAAIC,GACpB,OAAO,EAAIgB,KAAKI,IAAIrB,EAAKC,EAAK,KAGtC,IAAK,IAAIwB,KAAKf,EACNA,EAAwBgB,eAAeD,KACvC7B,EAAW6B,GAAK7B,EAAW+B,KAAK,KAAMjB,EAAwBe,KAUtE,SAASG,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAVAlC,EAAiBuC,YAAYtC,GAUzBgC,EAAkBnC,GACXA,EACFmC,EAAkBpC,GAChBA,OADN","file":"../../../engine/functions/color-blending.js","sourcesContent":["define([\n    '../tree/color',\n    './function-registry'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Color = __module__0, functionRegistry = __module__1;\n    function colorBlend(mode, color1, color2) {\n        var ab = color1.alpha, cb, as = color2.alpha, cs, ar, cr, r = [];\n        ar = as + ab * (1 - as);\n        for (var i = 0; i < 3; i++) {\n            cb = color1.rgb[i] / 255;\n            cs = color2.rgb[i] / 255;\n            cr = mode(cb, cs);\n            if (ar) {\n                cr = (as * cs + ab * (cb - as * (cb + cs - cr))) / ar;\n            }\n            r[i] = cr * 255;\n        }\n        return new Color(r, ar);\n    }\n    var colorBlendModeFunctions = {\n        multiply: function (cb, cs) {\n            return cb * cs;\n        },\n        screen: function (cb, cs) {\n            return cb + cs - cb * cs;\n        },\n        overlay: function (cb, cs) {\n            cb *= 2;\n            return cb <= 1 ? colorBlendModeFunctions.multiply(cb, cs) : colorBlendModeFunctions.screen(cb - 1, cs);\n        },\n        softlight: function (cb, cs) {\n            var d = 1, e = cb;\n            if (cs > 0.5) {\n                e = 1;\n                d = cb > 0.25 ? Math.sqrt(cb) : ((16 * cb - 12) * cb + 4) * cb;\n            }\n            return cb - (1 - 2 * cs) * e * (d - cb);\n        },\n        hardlight: function (cb, cs) {\n            return colorBlendModeFunctions.overlay(cs, cb);\n        },\n        difference: function (cb, cs) {\n            return Math.abs(cb - cs);\n        },\n        exclusion: function (cb, cs) {\n            return cb + cs - 2 * cb * cs;\n        },\n        average: function (cb, cs) {\n            return (cb + cs) / 2;\n        },\n        negation: function (cb, cs) {\n            return 1 - Math.abs(cb + cs - 1);\n        }\n    };\n    for (var f in colorBlendModeFunctions) {\n        if (colorBlendModeFunctions.hasOwnProperty(f)) {\n            colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n        }\n    }\n    functionRegistry.addMultiple(colorBlend);\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}