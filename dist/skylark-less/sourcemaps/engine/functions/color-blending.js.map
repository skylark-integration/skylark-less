{"version":3,"sources":["engine/functions/color-blending.js"],"names":["Color","require","functionRegistry","colorBlend","mode","color1","color2","cb","cs","ar","cr","ab","alpha","as","r","i","rgb","colorBlendModeFunctions","multiply","screen","overlay","softlight","d","e","Math","sqrt","hardlight","difference","abs","exclusion","average","negation","f","hasOwnProperty","bind","addMultiple"],"mappings":";;;;;;;AAAA,IAAIA,MAAQC,QAAQ,iBAChBC,iBAAmBD,QAAQ,uBAK/B,SAASE,WAAWC,EAAMC,EAAQC,GAC9B,IAAuBC,EACAC,EACnBC,EAAIC,EAFJC,EAAKN,EAAOO,MACZC,EAAKP,EAAOM,MACJE,KAEZL,EAAKI,EAAKF,GAAM,EAAIE,GACpB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAGnBL,EAAKN,EAFLG,EAAKF,EAAOW,IAAID,GAAK,IACrBP,EAAKF,EAAOU,IAAID,GAAK,KAEjBN,IACAC,GAAMG,EAAKL,EAAKG,GAAMJ,EAChBM,GAAMN,EAAKC,EAAKE,KAAQD,GAElCK,EAAEC,GAAU,IAALL,EAGX,OAAO,IAAIV,MAAMc,EAAGL,GAGxB,IAAIQ,yBACAC,SAAU,SAASX,EAAIC,GACnB,OAAOD,EAAKC,GAEhBW,OAAQ,SAASZ,EAAIC,GACjB,OAAOD,EAAKC,EAAKD,EAAKC,GAE1BY,QAAS,SAASb,EAAIC,GAElB,OADAD,GAAM,IACQ,EACVU,wBAAwBC,SAASX,EAAIC,GACrCS,wBAAwBE,OAAOZ,EAAK,EAAGC,IAE/Ca,UAAW,SAASd,EAAIC,GACpB,IAAIc,EAAI,EAAGC,EAAIhB,EAMf,OALIC,EAAK,KACLe,EAAI,EACJD,EAAKf,EAAK,IAAQiB,KAAKC,KAAKlB,KACpB,GAAKA,EAAK,IAAMA,EAAK,GAAKA,GAE/BA,GAAM,EAAI,EAAIC,GAAMe,GAAKD,EAAIf,IAExCmB,UAAW,SAASnB,EAAIC,GACpB,OAAOS,wBAAwBG,QAAQZ,EAAID,IAE/CoB,WAAY,SAASpB,EAAIC,GACrB,OAAOgB,KAAKI,IAAIrB,EAAKC,IAEzBqB,UAAW,SAAStB,EAAIC,GACpB,OAAOD,EAAKC,EAAK,EAAID,EAAKC,GAI9BsB,QAAS,SAASvB,EAAIC,GAClB,OAAQD,EAAKC,GAAM,GAEvBuB,SAAU,SAASxB,EAAIC,GACnB,OAAO,EAAIgB,KAAKI,IAAIrB,EAAKC,EAAK,KAItC,IAAK,IAAIwB,KAAKf,wBACNA,wBAAwBgB,eAAeD,KACvC7B,WAAW6B,GAAK7B,WAAW+B,KAAK,KAAMjB,wBAAwBe,KAItE9B,iBAAiBiC,YAAYhC","file":"../../../engine/functions/color-blending.js","sourcesContent":["var Color = require('../tree/color'),\n    functionRegistry = require('./function-registry');\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n    var ab = color1.alpha, cb, // backdrop\n        as = color2.alpha, cs, // source\n        ar, cr, r = [];        // result\n\n    ar = as + ab * (1 - as);\n    for (var i = 0; i < 3; i++) {\n        cb = color1.rgb[i] / 255;\n        cs = color2.rgb[i] / 255;\n        cr = mode(cb, cs);\n        if (ar) {\n            cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n        }\n        r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n}\n\nvar colorBlendModeFunctions = {\n    multiply: function(cb, cs) {\n        return cb * cs;\n    },\n    screen: function(cb, cs) {\n        return cb + cs - cb * cs;\n    },\n    overlay: function(cb, cs) {\n        cb *= 2;\n        return (cb <= 1) ?\n            colorBlendModeFunctions.multiply(cb, cs) :\n            colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function(cb, cs) {\n        var d = 1, e = cb;\n        if (cs > 0.5) {\n            e = 1;\n            d = (cb > 0.25) ? Math.sqrt(cb)\n                : ((16 * cb - 12) * cb + 4) * cb;\n        }\n        return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function(cb, cs) {\n        return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function(cb, cs) {\n        return Math.abs(cb - cs);\n    },\n    exclusion: function(cb, cs) {\n        return cb + cs - 2 * cb * cs;\n    },\n\n    // non-w3c functions:\n    average: function(cb, cs) {\n        return (cb + cs) / 2;\n    },\n    negation: function(cb, cs) {\n        return 1 - Math.abs(cb + cs - 1);\n    }\n};\n\nfor (var f in colorBlendModeFunctions) {\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n}\n\nfunctionRegistry.addMultiple(colorBlend);\n"]}