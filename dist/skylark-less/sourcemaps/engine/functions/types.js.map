{"version":3,"sources":["engine/functions/types.js"],"names":["Keyword","require","DetachedRuleset","Dimension","Color","Quoted","Anonymous","URL","Operation","functionRegistry","isa","n","Type","True","False","isunit","unit","undefined","type","message","value","is","addMultiple","isruleset","iscolor","isnumber","isstring","iskeyword","isurl","ispixel","ispercentage","isem","val","toCSS","get-unit"],"mappings":";;;;;;;AAAA,IAAIA,QAAUC,QAAQ,mBAClBC,gBAAkBD,QAAQ,4BAC1BE,UAAYF,QAAQ,qBACpBG,MAAQH,QAAQ,iBAChBI,OAASJ,QAAQ,kBACjBK,UAAYL,QAAQ,qBACpBM,IAAMN,QAAQ,eACdO,UAAYP,QAAQ,qBACpBQ,iBAAmBR,QAAQ,uBAE3BS,IAAM,SAAUC,EAAGC,GACf,OAAQD,aAAaC,EAAQZ,QAAQa,KAAOb,QAAQc,OAExDC,OAAS,SAAUJ,EAAGK,GAClB,QAAaC,IAATD,EACA,MAAQE,KAAM,WAAYC,QAAS,mDAGvC,GAAoB,iBADpBH,EAA6B,iBAAfA,EAAKI,MAAqBJ,EAAKI,MAAQJ,GAEjD,MAAQE,KAAM,WAAYC,QAAS,2DAEvC,OAAQR,aAAaR,WAAcQ,EAAEK,KAAKK,GAAGL,GAAQhB,QAAQa,KAAOb,QAAQc,OAGpFL,iBAAiBa,aACbC,UAAW,SAAUZ,GACjB,OAAOD,IAAIC,EAAGT,kBAElBsB,QAAS,SAAUb,GACf,OAAOD,IAAIC,EAAGP,QAElBqB,SAAU,SAAUd,GAChB,OAAOD,IAAIC,EAAGR,YAElBuB,SAAU,SAAUf,GAChB,OAAOD,IAAIC,EAAGN,SAElBsB,UAAW,SAAUhB,GACjB,OAAOD,IAAIC,EAAGX,UAElB4B,MAAO,SAAUjB,GACb,OAAOD,IAAIC,EAAGJ,MAElBsB,QAAS,SAAUlB,GACf,OAAOI,OAAOJ,EAAG,OAErBmB,aAAc,SAAUnB,GACpB,OAAOI,OAAOJ,EAAG,MAErBoB,KAAM,SAAUpB,GACZ,OAAOI,OAAOJ,EAAG,OAErBI,OAAQA,OACRC,KAAM,SAAUgB,EAAKhB,GACjB,KAAMgB,aAAe7B,WACjB,MAAQe,KAAM,WACVC,QAAS,+CACJa,aAAexB,UAAY,oCAAsC,KAW9E,OAPQQ,EAFJA,EACIA,aAAgBhB,QACTgB,EAAKI,MAELJ,EAAKiB,QAGT,GAEJ,IAAI9B,UAAU6B,EAAIZ,MAAOJ,IAEpCkB,WAAY,SAAUvB,GAClB,OAAO,IAAIL,UAAUK,EAAEK","file":"../../../engine/functions/types.js","sourcesContent":["var Keyword = require('../tree/keyword'),\n    DetachedRuleset = require('../tree/detached-ruleset'),\n    Dimension = require('../tree/dimension'),\n    Color = require('../tree/color'),\n    Quoted = require('../tree/quoted'),\n    Anonymous = require('../tree/anonymous'),\n    URL = require('../tree/url'),\n    Operation = require('../tree/operation'),\n    functionRegistry = require('./function-registry');\n\nvar isa = function (n, Type) {\n        return (n instanceof Type) ? Keyword.True : Keyword.False;\n    },\n    isunit = function (n, unit) {\n        if (unit === undefined) {\n            throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\n        }\n        unit = typeof unit.value === 'string' ? unit.value : unit;\n        if (typeof unit !== 'string') {\n            throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\n        }\n        return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n    };\n\nfunctionRegistry.addMultiple({\n    isruleset: function (n) {\n        return isa(n, DetachedRuleset);\n    },\n    iscolor: function (n) {\n        return isa(n, Color);\n    },\n    isnumber: function (n) {\n        return isa(n, Dimension);\n    },\n    isstring: function (n) {\n        return isa(n, Quoted);\n    },\n    iskeyword: function (n) {\n        return isa(n, Keyword);\n    },\n    isurl: function (n) {\n        return isa(n, URL);\n    },\n    ispixel: function (n) {\n        return isunit(n, 'px');\n    },\n    ispercentage: function (n) {\n        return isunit(n, '%');\n    },\n    isem: function (n) {\n        return isunit(n, 'em');\n    },\n    isunit: isunit,\n    unit: function (val, unit) {\n        if (!(val instanceof Dimension)) {\n            throw { type: 'Argument',\n                message: 'the first argument to unit must be a number' +\n                    (val instanceof Operation ? '. Have you forgotten parenthesis?' : '') };\n        }\n        if (unit) {\n            if (unit instanceof Keyword) {\n                unit = unit.value;\n            } else {\n                unit = unit.toCSS();\n            }\n        } else {\n            unit = '';\n        }\n        return new Dimension(val.value, unit);\n    },\n    'get-unit': function (n) {\n        return new Anonymous(n.unit);\n    }\n});\n"]}