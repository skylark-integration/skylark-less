{"version":3,"sources":["engine/functions/list.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","__module__4","__module__5","__module__6","__module__7","exports","module","Comment","Dimension","Declaration","Expression","Ruleset","Selector","Element","getItemsFromNode","node","Array","isArray","value","__isValidToReturn","obj","attr","__isEmptyObject","addMultiple","_SELF","n","extract","values","index","length","range","start","end","step","from","to","stepValue","list","i","push","unit","each","rs","newRules","iterator","rules","ruleset","valueName","keyName","indexName","params","name","key","item","slice","this","currentFileInfo","strictImports","visibilityInfo","eval","context"],"mappings":"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","file":"../../../engine/functions/list.js","sourcesContent":["define([\n    '../tree/comment',\n    '../tree/dimension',\n    '../tree/declaration',\n    '../tree/expression',\n    '../tree/ruleset',\n    '../tree/selector',\n    '../tree/element',\n    './function-registry'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4, __module__5, __module__6, __module__7) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Comment = __module__0, Dimension = __module__1, Declaration = __module__2, Expression = __module__3, Ruleset = __module__4, Selector = __module__5, Element = __module__6, functionRegistry = __module__7;\n    var getItemsFromNode = function (node) {\n        var items = Array.isArray(node.value) ? node.value : Array(node);\n        return items;\n    };\n    functionRegistry.addMultiple({\n        _SELF: function (n) {\n            return n;\n        },\n        extract: function (values, index) {\n            index = index.value - 1;\n            return getItemsFromNode(values)[index];\n        },\n        length: function (values) {\n            return new Dimension(getItemsFromNode(values).length);\n        },\n        range: function (start, end, step) {\n            var from, to, stepValue = 1, list = [];\n            if (end) {\n                to = end;\n                from = start.value;\n                if (step) {\n                    stepValue = step.value;\n                }\n            } else {\n                from = 1;\n                to = start;\n            }\n            for (var i = from; i <= to.value; i += stepValue) {\n                list.push(new Dimension(i, to.unit));\n            }\n            return new Expression(list);\n        },\n        each: function (list, rs) {\n            var rules = [], newRules, iterator;\n            if (list.value) {\n                if (Array.isArray(list.value)) {\n                    iterator = list.value;\n                } else {\n                    iterator = [list.value];\n                }\n            } else if (list.ruleset) {\n                iterator = list.ruleset.rules;\n            } else if (list.rules) {\n                iterator = list.rules;\n            } else if (Array.isArray(list)) {\n                iterator = list;\n            } else {\n                iterator = [list];\n            }\n            var valueName = '@value', keyName = '@key', indexName = '@index';\n            if (rs.params) {\n                valueName = rs.params[0] && rs.params[0].name;\n                keyName = rs.params[1] && rs.params[1].name;\n                indexName = rs.params[2] && rs.params[2].name;\n                rs = rs.rules;\n            } else {\n                rs = rs.ruleset;\n            }\n            for (var i = 0; i < iterator.length; i++) {\n                var key, value, item = iterator[i];\n                if (item instanceof Declaration) {\n                    key = typeof item.name === 'string' ? item.name : item.name[0].value;\n                    value = item.value;\n                } else {\n                    key = new Dimension(i + 1);\n                    value = item;\n                }\n                if (item instanceof Comment) {\n                    continue;\n                }\n                newRules = rs.rules.slice(0);\n                if (valueName) {\n                    newRules.push(new Declaration(valueName, value, false, false, this.index, this.currentFileInfo));\n                }\n                if (indexName) {\n                    newRules.push(new Declaration(indexName, new Dimension(i + 1), false, false, this.index, this.currentFileInfo));\n                }\n                if (keyName) {\n                    newRules.push(new Declaration(keyName, key, false, false, this.index, this.currentFileInfo));\n                }\n                rules.push(new Ruleset([new Selector([new Element('', '&')])], newRules, rs.strictImports, rs.visibilityInfo()));\n            }\n            return new Ruleset([new Selector([new Element('', '&')])], rules, rs.strictImports, rs.visibilityInfo()).eval(this.context);\n        }\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}