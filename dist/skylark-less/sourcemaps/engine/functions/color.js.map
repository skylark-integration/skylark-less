{"version":3,"sources":["engine/functions/color.js"],"names":["colorFunctions","Dimension","require","Color","Quoted","Anonymous","functionRegistry","clamp","val","Math","min","max","hsla","origColor","hsl","color","h","s","l","a","value","test","number","n","parseFloat","unit","is","type","message","scaled","size","rgb","r","g","b","rgba","alpha","map","c","e","m1","m2","hue","hsv","v","hsva","i","f","vs","floor","perm","toHSL","saturation","lightness","hsvhue","toHSV","hsvsaturation","hsvvalue","red","green","blue","luma","luminance","saturate","amount","method","desaturate","lighten","darken","fadein","fadeout","fade","spin","mix","color1","color2","weight","console","log","dir","p","w","w1","w2","greyscale","contrast","dark","light","threshold","t","argb","toARGB","slice","undefined","fromKeyword","tint","shade","addMultiple"],"mappings":"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","file":"../../../engine/functions/color.js","sourcesContent":["var Dimension = require('../tree/dimension'),\n    Color = require('../tree/color'),\n    Quoted = require('../tree/quoted'),\n    Anonymous = require('../tree/anonymous'),\n    functionRegistry = require('./function-registry'),\n    colorFunctions;\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\nfunction hsla(origColor, hsl) {\n    var color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n    if (color) {\n        if (origColor.value && \n            /^(rgb|hsl)/.test(origColor.value)) {\n            color.value = origColor.value;\n        } else {\n            color.value = 'rgb';\n        }\n        return color;\n    }\n}\nfunction number(n) {\n    if (n instanceof Dimension) {\n        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n        return n;\n    } else {\n        throw {\n            type: 'Argument',\n            message: 'color functions take numbers as parameters'\n        };\n    }\n}\nfunction scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n        return parseFloat(n.value * size / 100);\n    } else {\n        return number(n);\n    }\n}\ncolorFunctions = {\n    rgb: function (r, g, b) {\n        var color = colorFunctions.rgba(r, g, b, 1.0);\n        if (color) {\n            color.value = 'rgb';\n            return color;\n        }\n    },\n    rgba: function (r, g, b, a) {\n        try {\n            if (r instanceof Color) {\n                if (g) {\n                    a = number(g);\n                } else {\n                    a = r.alpha;\n                }\n                return new Color(r.rgb, a, 'rgba');\n            }\n            var rgb = [r, g, b].map(function (c) { return scaled(c, 255); });\n            a = number(a);\n            return new Color(rgb, a, 'rgba');\n        }\n        catch (e) {}\n    },\n    hsl: function (h, s, l) {\n        var color = colorFunctions.hsla(h, s, l, 1.0);\n        if (color) {\n            color.value = 'hsl';\n            return color;\n        }\n    },\n    hsla: function (h, s, l, a) {\n        try {\n            if (h instanceof Color) {\n                if (s) {\n                    a = number(s);\n                } else {\n                    a = h.alpha;\n                }\n                return new Color(h.rgb, a, 'hsla');\n            }\n\n            var m1, m2;\n\n            function hue(h) {\n                h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n                if (h * 6 < 1) {\n                    return m1 + (m2 - m1) * h * 6;\n                }\n                else if (h * 2 < 1) {\n                    return m2;\n                }\n                else if (h * 3 < 2) {\n                    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n                }\n                else {\n                    return m1;\n                }\n            }\n\n            h = (number(h) % 360) / 360;\n            s = clamp(number(s)); l = clamp(number(l)); a = clamp(number(a));\n\n            m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n            m1 = l * 2 - m2;\n\n            var rgb = [\n                hue(h + 1 / 3) * 255,\n                hue(h)       * 255,\n                hue(h - 1 / 3) * 255\n            ];\n            a = number(a);\n            return new Color(rgb, a, 'hsla');\n        }\n        catch (e) {}\n    },\n\n    hsv: function(h, s, v) {\n        return colorFunctions.hsva(h, s, v, 1.0);\n    },\n\n    hsva: function(h, s, v, a) {\n        h = ((number(h) % 360) / 360) * 360;\n        s = number(s); v = number(v); a = number(a);\n\n        var i, f;\n        i = Math.floor((h / 60) % 6);\n        f = (h / 60) - i;\n\n        var vs = [v,\n            v * (1 - s),\n            v * (1 - f * s),\n            v * (1 - (1 - f) * s)];\n        var perm = [[0, 3, 1],\n            [2, 0, 1],\n            [1, 0, 3],\n            [1, 2, 0],\n            [3, 1, 0],\n            [0, 1, 2]];\n\n        return colorFunctions.rgba(vs[perm[i][0]] * 255,\n            vs[perm[i][1]] * 255,\n            vs[perm[i][2]] * 255,\n            a);\n    },\n\n    hue: function (color) {\n        return new Dimension(color.toHSL().h);\n    },\n    saturation: function (color) {\n        return new Dimension(color.toHSL().s * 100, '%');\n    },\n    lightness: function (color) {\n        return new Dimension(color.toHSL().l * 100, '%');\n    },\n    hsvhue: function(color) {\n        return new Dimension(color.toHSV().h);\n    },\n    hsvsaturation: function (color) {\n        return new Dimension(color.toHSV().s * 100, '%');\n    },\n    hsvvalue: function (color) {\n        return new Dimension(color.toHSV().v * 100, '%');\n    },\n    red: function (color) {\n        return new Dimension(color.rgb[0]);\n    },\n    green: function (color) {\n        return new Dimension(color.rgb[1]);\n    },\n    blue: function (color) {\n        return new Dimension(color.rgb[2]);\n    },\n    alpha: function (color) {\n        return new Dimension(color.toHSL().a);\n    },\n    luma: function (color) {\n        return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function (color) {\n        var luminance =\n            (0.2126 * color.rgb[0] / 255) +\n                (0.7152 * color.rgb[1] / 255) +\n                (0.0722 * color.rgb[2] / 255);\n\n        return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function (color, amount, method) {\n        // filter: saturate(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s +=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s += amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    desaturate: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s -=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s -= amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    lighten: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l +=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l += amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    darken: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l -=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l -= amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    fadein: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a +=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a += amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fadeout: function (color, amount, method) {\n        var hsl = color.toHSL();\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a -=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a -= amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fade: function (color, amount) {\n        var hsl = color.toHSL();\n\n        hsl.a = amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    spin: function (color, amount) {\n        var hsl = color.toHSL();\n        var hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(color, hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        if (!color1.toHSL || !color2.toHSL) {\n            console.log(color2.type);\n            console.dir(color2);\n        }\n        if (!weight) {\n            weight = new Dimension(50);\n        }\n        var p = weight.value / 100.0;\n        var w = p * 2 - 1;\n        var a = color1.toHSL().a - color2.toHSL().a;\n\n        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n\n        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        var alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function (color, dark, light, threshold) {\n        // filter: contrast(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        if (typeof light === 'undefined') {\n            light = colorFunctions.rgba(255, 255, 255, 1.0);\n        }\n        if (typeof dark === 'undefined') {\n            dark = colorFunctions.rgba(0, 0, 0, 1.0);\n        }\n        // Figure out which is actually light and dark:\n        if (dark.luma() > light.luma()) {\n            var t = light;\n            light = dark;\n            dark = t;\n        }\n        if (typeof threshold === 'undefined') {\n            threshold = 0.43;\n        } else {\n            threshold = number(threshold);\n        }\n        if (color.luma() < threshold) {\n            return light;\n        } else {\n            return dark;\n        }\n    },\n    // Changes made in 2.7.0 - Reverted in 3.0.0\n    // contrast: function (color, color1, color2, threshold) {\n    //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n    //     // according to the standard WCAG contrast ratio calculation.\n    //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    //     // The threshold param is no longer used, in line with SASS.\n    //     // filter: contrast(3.2);\n    //     // should be kept as is, so check for color\n    //     if (!color.rgb) {\n    //         return null;\n    //     }\n    //     if (typeof color1 === 'undefined') {\n    //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n    //     }\n    //     if (typeof color2 === 'undefined') {\n    //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n    //     }\n    //     var contrast1, contrast2;\n    //     var luma = color.luma();\n    //     var luma1 = color1.luma();\n    //     var luma2 = color2.luma();\n    //     // Calculate contrast ratios for each color\n    //     if (luma > luma1) {\n    //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n    //     } else {\n    //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (luma > luma2) {\n    //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n    //     } else {\n    //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (contrast1 > contrast2) {\n    //         return color1;\n    //     } else {\n    //         return color2;\n    //     }\n    // },\n    argb: function (color) {\n        return new Anonymous(color.toARGB());\n    },\n    color: function(c) {\n        if ((c instanceof Quoted) &&\n            (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\n            var val = c.value.slice(1);\n            return new Color(val, undefined, '#' + val);\n        }\n        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n            c.value = undefined;\n            return c;\n        }\n        throw {\n            type:    'Argument',\n            message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n        };\n    },\n    tint: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n};\nfunctionRegistry.addMultiple(colorFunctions);\n"]}