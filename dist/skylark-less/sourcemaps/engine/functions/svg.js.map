{"version":3,"sources":["engine/functions/svg.js"],"names":["module","exports","environment","Dimension","require","Color","Expression","Quoted","URL","add","direction","stops","gradientDirectionSvg","returner","i","color","position","positionValue","alpha","gradientType","rectangleDimension","renderEnv","compress","directionValue","toCSS","throwArgumentDescriptor","type","message","arguments","length","value","Array","prototype","slice","call","undefined","toRGB","encodeURIComponent","this","index","currentFileInfo"],"mappings":";;;;;;;AAAAA,OAAOC,QAAU,SAAUC,GACvB,IAAIC,EAAYC,QAAQ,qBAAsBC,EAAQD,QAAQ,iBAAkBE,EAAaF,QAAQ,sBAAuBG,EAASH,QAAQ,kBAAmBI,EAAMJ,QAAQ,eAAmCA,QAAQ,uBACxMK,IAAI,eAAgB,SAAUC,GAC3C,IAAIC,EAAOC,EAAyIC,EAAuDC,EAAGC,EAAOC,EAAUC,EAAeC,EAA7MC,EAAe,SAAUC,EAAqB,mCAAoCC,GAAcC,UAAU,GAAmBC,EAAiBb,EAAUc,MAAMH,GAC/L,SAASI,IACL,MACIC,KAAM,WACNC,QAAS,yIAajB,OAVwB,GAApBC,UAAUC,QACND,UAAU,GAAGE,MAAMD,OAAS,GAC5BJ,IAEJd,EAAQiB,UAAU,GAAGE,OACdF,UAAUC,OAAS,EAC1BJ,IAEAd,EAAQoB,MAAMC,UAAUC,MAAMC,KAAKN,UAAW,GAE1CL,GACR,IAAK,YACDX,EAAuB,oCACvB,MACJ,IAAK,WACDA,EAAuB,oCACvB,MACJ,IAAK,kBACDA,EAAuB,sCACvB,MACJ,IAAK,eACDA,EAAuB,sCACvB,MACJ,IAAK,UACL,IAAK,oBACDO,EAAe,SACfP,EAAuB,4BACvBQ,EAAqB,2CACrB,MACJ,QACI,MACIM,KAAM,WACNC,QAAS,oHAIjB,IADAd,EAAW,8DAAqEM,EAAe,mBAAqBP,EAAuB,IACtIE,EAAI,EAAGA,EAAIH,EAAMkB,OAAQf,GAAK,EAC3BH,EAAMG,aAAcR,GACpBS,EAAQJ,EAAMG,GAAGgB,MAAM,GACvBd,EAAWL,EAAMG,GAAGgB,MAAM,KAE1Bf,EAAQJ,EAAMG,GACdE,OAAWmB,GAETpB,aAAiBV,KAAmB,IAANS,GAAWA,EAAI,IAAMH,EAAMkB,cAAwBM,IAAbnB,GAA6BA,aAAoBb,IACvHsB,IAEJR,EAAgBD,EAAWA,EAASQ,MAAMH,GAAmB,IAANP,EAAU,KAAO,OACxEI,EAAQH,EAAMG,MACdL,GAAY,iBAAmBI,EAAgB,iBAAmBF,EAAMqB,QAAU,KAAOlB,EAAQ,EAAI,kBAAoBA,EAAQ,IAAM,IAAM,KAKjJ,OAHAL,GAAY,KAAOM,EAAe,kBAAyBC,EAAqB,2BAChFP,EAAWwB,mBAAmBxB,GAEvB,IAAIL,EAAI,IAAID,EAAO,KAD1BM,EAAW,sBAAwBA,GACQ,IAAKA,GAAU,EAAOyB,KAAKC,MAAOD,KAAKE,iBAAkBF,KAAKC,MAAOD,KAAKE","file":"../../../engine/functions/svg.js","sourcesContent":["module.exports = function (environment) {\n    var Dimension = require('../tree/dimension'), Color = require('../tree/color'), Expression = require('../tree/expression'), Quoted = require('../tree/quoted'), URL = require('../tree/url'), functionRegistry = require('./function-registry');\n    functionRegistry.add('svg-gradient', function (direction) {\n        var stops, gradientDirectionSvg, gradientType = 'linear', rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"', renderEnv = { compress: false }, returner, directionValue = direction.toCSS(renderEnv), i, color, position, positionValue, alpha;\n        function throwArgumentDescriptor() {\n            throw {\n                type: 'Argument',\n                message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' + ' end_color [end_position] or direction, color list'\n            };\n        }\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n        switch (directionValue) {\n        case 'to bottom':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n            break;\n        case 'to right':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n            break;\n        case 'to bottom right':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n            break;\n        case 'to top right':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n            break;\n        case 'ellipse':\n        case 'ellipse at center':\n            gradientType = 'radial';\n            gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n            rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n            break;\n        default:\n            throw {\n                type: 'Argument',\n                message: \"svg-gradient direction must be 'to bottom', 'to right',\" + \" 'to bottom right', 'to top right' or 'ellipse at center'\"\n            };\n        }\n        returner = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1 1\">' + '<' + gradientType + 'Gradient id=\"g\" ' + gradientDirectionSvg + '>';\n        for (i = 0; i < stops.length; i += 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n            if (!(color instanceof Color) || !((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension)) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n            alpha = color.alpha;\n            returner += '<stop offset=\"' + positionValue + '\" stop-color=\"' + color.toRGB() + '\"' + (alpha < 1 ? ' stop-opacity=\"' + alpha + '\"' : '') + '/>';\n        }\n        returner += '</' + gradientType + 'Gradient>' + '<rect ' + rectangleDimension + ' fill=\"url(#g)\" /></svg>';\n        returner = encodeURIComponent(returner);\n        returner = 'data:image/svg+xml,' + returner;\n        return new URL(new Quoted(\"'\" + returner + \"'\", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    });\n};"]}