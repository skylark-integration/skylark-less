{"version":3,"sources":["engine/functions/string.js"],"names":["Quoted","require","Anonymous","JavaScript","functionRegistry","addMultiple","e","str","evaluated","value","escape","encodeURI","replace","string","pattern","replacement","flags","result","type","toCSS","RegExp","quote","escaped","%","args","Array","prototype","slice","call","arguments","i","length","token","match","encodeURIComponent"],"mappings":";;;;;;;AAAA,IAAIA,OAASC,QAAQ,kBACjBC,UAAYD,QAAQ,qBACpBE,WAAaF,QAAQ,sBACrBG,iBAAmBH,QAAQ,uBAE/BG,iBAAiBC,aACbC,EAAG,SAAUC,GACT,OAAO,IAAIL,UAAUK,aAAeJ,WAAaI,EAAIC,UAAYD,EAAIE,QAEzEC,OAAQ,SAAUH,GACd,OAAO,IAAIL,UACPS,UAAUJ,EAAIE,OAAOG,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAC7FA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,SAElDA,QAAS,SAAUC,EAAQC,EAASC,EAAaC,GAC7C,IAAIC,EAASJ,EAAOJ,MAIpB,OAHAM,EAAoC,WAArBA,EAAYG,KACvBH,EAAYN,MAAQM,EAAYI,QACpCF,EAASA,EAAOL,QAAQ,IAAIQ,OAAON,EAAQL,MAAOO,EAAQA,EAAMP,MAAQ,IAAKM,GACtE,IAAIf,OAAOa,EAAOQ,OAAS,GAAIJ,EAAQJ,EAAOS,UAEzDC,IAAK,SAAUV,GAIX,IAHA,IAAIW,EAAOC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,GAC7CZ,EAASJ,EAAOJ,MAEXqB,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAE7Bb,EAASA,EAAOL,QAAQ,UAAW,SAASoB,GACxC,IAAIvB,EAA2B,WAAjBe,EAAKM,GAAGZ,MAClBc,EAAMC,MAAM,MAAST,EAAKM,GAAGrB,MAAQe,EAAKM,GAAGX,QACjD,OAAOa,EAAMC,MAAM,UAAYC,mBAAmBzB,GAASA,IAInE,OADAQ,EAASA,EAAOL,QAAQ,MAAO,KACxB,IAAIZ,OAAOa,EAAOQ,OAAS,GAAIJ,EAAQJ,EAAOS","file":"../../../engine/functions/string.js","sourcesContent":["var Quoted = require('../tree/quoted'),\n    Anonymous = require('../tree/anonymous'),\n    JavaScript = require('../tree/javascript'),\n    functionRegistry = require('./function-registry');\n\nfunctionRegistry.addMultiple({\n    e: function (str) {\n        return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value);\n    },\n    escape: function (str) {\n        return new Anonymous(\n            encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    },\n    replace: function (string, pattern, replacement, flags) {\n        var result = string.value;\n        replacement = (replacement.type === 'Quoted') ?\n            replacement.value : replacement.toCSS();\n        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n        return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function (string /* arg, arg, ... */) {\n        var args = Array.prototype.slice.call(arguments, 1),\n            result = string.value;\n\n        for (var i = 0; i < args.length; i++) {\n            /* jshint loopfunc:true */\n            result = result.replace(/%[sda]/i, function(token) {\n                var value = ((args[i].type === 'Quoted') &&\n                    token.match(/s/i)) ? args[i].value : args[i].toCSS();\n                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n            });\n        }\n        result = result.replace(/%%/g, '%');\n        return new Quoted(string.quote || '', result, string.escaped);\n    }\n});\n"]}