{"version":3,"sources":["engine/parse-tree.js"],"names":["define","__module__0","__module__1","__module__2","exports","module","LessError","transformTree","logger","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","SourceMapBuilder","ParseTree","root","imports","this","prototype","toCSS","options","evaldRoot","sourceMapBuilder","result","e","compress","Boolean","warn","toCSSOptions","dumpLineNumbers","strictUnits","numPrecision","sourceMap","css","pluginManager","postProcessors","getPostProcessors","i","length","process","file","map","getExternalSourceMap","files","hasOwnProperty","rootFilename","push"],"mappings":";;;;;;;AAAAA,QACI,eACA,mBACA,YACD,SAAUC,EAAaC,EAAaC,GACnC,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAYL,EAAaM,EAAgBL,EAAaM,EAASL,EA8DnE,SAASM,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAhEAL,EAAOD,QAAU,SAAUW,GACvB,IAAIC,EAAY,SAAUC,EAAMC,GAC5BC,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,GAkDnB,OAhDAF,EAAUI,UAAUC,MAAQ,SAAUC,GAClC,IAAIC,EAAwBC,EAAbC,KACf,IACIF,EAAYhB,EAAcY,KAAKF,KAAMK,GACvC,MAAOI,GACL,MAAM,IAAIpB,EAAUoB,EAAGP,KAAKD,SAEhC,IACI,IAAIS,EAAWC,QAAQN,EAAQK,UAC3BA,GACAnB,EAAOqB,KAAK,mIAEhB,IAAIC,GACAH,SAAUA,EACVI,gBAAiBT,EAAQS,gBACzBC,YAAaJ,QAAQN,EAAQU,aAC7BC,aAAc,GAEdX,EAAQY,WACRV,EAAmB,IAAIT,EAAiBO,EAAQY,WAChDT,EAAOU,IAAMX,EAAiBH,MAAME,EAAWO,EAAcX,KAAKD,UAElEO,EAAOU,IAAMZ,EAAUF,MAAMS,GAEnC,MAAOJ,GACL,MAAM,IAAIpB,EAAUoB,EAAGP,KAAKD,SAEhC,GAAII,EAAQc,cAER,IADA,IAAIC,EAAiBf,EAAQc,cAAcE,oBAClCC,EAAI,EAAGA,EAAIF,EAAeG,OAAQD,IACvCd,EAAOU,IAAME,EAAeE,GAAGE,QAAQhB,EAAOU,KAC1CD,UAAWV,EACXF,QAASA,EACTJ,QAASC,KAAKD,UAQ1B,IAAK,IAAIwB,KAJLpB,EAAQY,YACRT,EAAOkB,IAAMnB,EAAiBoB,wBAElCnB,EAAOP,WACUC,KAAKD,QAAQ2B,MACtB1B,KAAKD,QAAQ2B,MAAMC,eAAeJ,IAASA,IAASvB,KAAKD,QAAQ6B,cACjEtB,EAAOP,QAAQ8B,KAAKN,GAG5B,OAAOjB,GAEJT,GAWPP,EAAkBJ,EAAOD,SAClBC,EAAOD,QACTK,EAAkBL,GAChBA,OADN","file":"../../engine/parse-tree.js","sourcesContent":["define([\n    './less-error',\n    './transform-tree',\n    './logger'\n], function (__module__0, __module__1, __module__2) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var LessError = __module__0, transformTree = __module__1, logger = __module__2;\n    module.exports = function (SourceMapBuilder) {\n        var ParseTree = function (root, imports) {\n            this.root = root;\n            this.imports = imports;\n        };\n        ParseTree.prototype.toCSS = function (options) {\n            var evaldRoot, result = {}, sourceMapBuilder;\n            try {\n                evaldRoot = transformTree(this.root, options);\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n            try {\n                var compress = Boolean(options.compress);\n                if (compress) {\n                    logger.warn('The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n                }\n                var toCSSOptions = {\n                    compress: compress,\n                    dumpLineNumbers: options.dumpLineNumbers,\n                    strictUnits: Boolean(options.strictUnits),\n                    numPrecision: 8\n                };\n                if (options.sourceMap) {\n                    sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                    result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n                } else {\n                    result.css = evaldRoot.toCSS(toCSSOptions);\n                }\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n            if (options.pluginManager) {\n                var postProcessors = options.pluginManager.getPostProcessors();\n                for (var i = 0; i < postProcessors.length; i++) {\n                    result.css = postProcessors[i].process(result.css, {\n                        sourceMap: sourceMapBuilder,\n                        options: options,\n                        imports: this.imports\n                    });\n                }\n            }\n            if (options.sourceMap) {\n                result.map = sourceMapBuilder.getExternalSourceMap();\n            }\n            result.imports = [];\n            for (var file in this.imports.files) {\n                if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                    result.imports.push(file);\n                }\n            }\n            return result;\n        };\n        return ParseTree;\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}