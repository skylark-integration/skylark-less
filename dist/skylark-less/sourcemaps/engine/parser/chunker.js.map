{"version":3,"sources":["engine/parser/chunker.js"],"names":["module","exports","input","fail","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunkerCurrentIndex","currentChunkStartIndex","cc","cc2","matched","len","length","level","parenLevel","chunks","emitFrom","emitChunk","force","push","slice","charCodeAt","String","fromCharCode"],"mappings":";;;;;;;AAAAA,OAAOC,QAAU,SAAUC,EAAOC,GAC9B,IAAmDC,EAAaC,EAAkBC,EAAkBC,EAAqDC,EAAqBC,EAAwBC,EAAIC,EAAKC,EAA3MC,EAAMX,EAAMY,OAAQC,EAAQ,EAAGC,EAAa,EAA8EC,KAAaC,EAAW,EACtJ,SAASC,EAAUC,GACf,IAAIP,EAAML,EAAsBU,EAC5BL,EAAM,MAAQO,IAAUP,IAG5BI,EAAOI,KAAKnB,EAAMoB,MAAMJ,EAAUV,EAAsB,IACxDU,EAAWV,EAAsB,GAErC,IAAKA,EAAsB,EAAGA,EAAsBK,EAAKL,IAErD,MADAE,EAAKR,EAAMqB,WAAWf,KACZ,IAAME,GAAM,KAAOA,EAAK,IAGlC,OAAQA,GACR,KAAK,GACDM,IACAX,EAAmBG,EACnB,SACJ,KAAK,GACD,KAAMQ,EAAa,EACf,OAAOb,EAAK,sBAAuBK,GAEvC,SACJ,KAAK,GACIQ,GACDG,IAEJ,SACJ,KAAK,IACDJ,IACAX,EAAcI,EACd,SACJ,KAAK,IACD,KAAMO,EAAQ,EACV,OAAOZ,EAAK,sBAAuBK,GAElCO,GAAUC,GACXG,IAEJ,SACJ,KAAK,GACD,GAAIX,EAAsBK,EAAM,EAAG,CAC/BL,IACA,SAEJ,OAAOL,EAAK,iBAAkBK,GAClC,KAAK,GACL,KAAK,GACL,KAAK,GAGD,IAFAI,EAAU,EACVH,EAAyBD,EACpBA,GAA4C,EAAGA,EAAsBK,EAAKL,IAE3E,MADAG,EAAMT,EAAMqB,WAAWf,IACb,IAAV,CAGA,GAAIG,GAAOD,EAAI,CACXE,EAAU,EACV,MAEJ,GAAW,IAAPD,EAAW,CACX,GAAIH,GAAuBK,EAAM,EAC7B,OAAOV,EAAK,iBAAkBK,GAElCA,KAGR,GAAII,EACA,SAEJ,OAAOT,EAAK,cAAgBqB,OAAOC,aAAaf,GAAM,IAAKD,GAC/D,KAAK,GACD,GAAIO,GAAcR,GAAuBK,EAAM,EAC3C,SAGJ,GAAW,KADXF,EAAMT,EAAMqB,WAAWf,EAAsB,IAEzC,IAAKA,GAA4C,EAAGA,EAAsBK,OACtEF,EAAMT,EAAMqB,WAAWf,KACZ,KAAc,IAAPG,GAAoB,IAAPA,GAF4CH,UAM5E,GAAW,IAAPG,EAAW,CAElB,IADAL,EAAmBG,EAAyBD,EACvCA,GAA4C,EAAGA,EAAsBK,EAAM,IAEjE,MADXF,EAAMT,EAAMqB,WAAWf,MAEnBD,EAA2BC,GAEpB,IAAPG,GAG6C,IAA7CT,EAAMqB,WAAWf,EAAsB,IARoCA,KAYnF,GAAIA,GAAuBK,EAAM,EAC7B,OAAOV,EAAK,uBAAwBM,GAExCD,IAEJ,SACJ,KAAK,GACD,GAAIA,EAAsBK,EAAM,GAAkD,IAA7CX,EAAMqB,WAAWf,EAAsB,GACxE,OAAOL,EAAK,iBAAkBK,GAElC,SAGR,OAAc,IAAVO,EAEWZ,EADPG,EAAmBF,GAAeG,EAA2BD,EACjD,8BAEA,sBAF+BF,GAIzB,IAAfY,EACAb,EAAK,sBAAuBE,IAEvCc,GAAU,GACHF","file":"../../../engine/parser/chunker.js","sourcesContent":["module.exports = function (input, fail) {\n    var len = input.length, level = 0, parenLevel = 0, lastOpening, lastOpeningParen, lastMultiComment, lastMultiCommentEndBrace, chunks = [], emitFrom = 0, chunkerCurrentIndex, currentChunkStartIndex, cc, cc2, matched;\n    function emitChunk(force) {\n        var len = chunkerCurrentIndex - emitFrom;\n        if (len < 512 && !force || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (cc >= 97 && cc <= 122 || cc < 34) {\n            continue;\n        }\n        switch (cc) {\n        case 40:\n            parenLevel++;\n            lastOpeningParen = chunkerCurrentIndex;\n            continue;\n        case 41:\n            if (--parenLevel < 0) {\n                return fail('missing opening `(`', chunkerCurrentIndex);\n            }\n            continue;\n        case 59:\n            if (!parenLevel) {\n                emitChunk();\n            }\n            continue;\n        case 123:\n            level++;\n            lastOpening = chunkerCurrentIndex;\n            continue;\n        case 125:\n            if (--level < 0) {\n                return fail('missing opening `{`', chunkerCurrentIndex);\n            }\n            if (!level && !parenLevel) {\n                emitChunk();\n            }\n            continue;\n        case 92:\n            if (chunkerCurrentIndex < len - 1) {\n                chunkerCurrentIndex++;\n                continue;\n            }\n            return fail('unescaped `\\\\`', chunkerCurrentIndex);\n        case 34:\n        case 39:\n        case 96:\n            matched = 0;\n            currentChunkStartIndex = chunkerCurrentIndex;\n            for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                cc2 = input.charCodeAt(chunkerCurrentIndex);\n                if (cc2 > 96) {\n                    continue;\n                }\n                if (cc2 == cc) {\n                    matched = 1;\n                    break;\n                }\n                if (cc2 == 92) {\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail('unescaped `\\\\`', chunkerCurrentIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n            }\n            if (matched) {\n                continue;\n            }\n            return fail('unmatched `' + String.fromCharCode(cc) + '`', currentChunkStartIndex);\n        case 47:\n            if (parenLevel || chunkerCurrentIndex == len - 1) {\n                continue;\n            }\n            cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n            if (cc2 == 47) {\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 <= 13 && (cc2 == 10 || cc2 == 13)) {\n                        break;\n                    }\n                }\n            } else if (cc2 == 42) {\n                lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 == 125) {\n                        lastMultiCommentEndBrace = chunkerCurrentIndex;\n                    }\n                    if (cc2 != 42) {\n                        continue;\n                    }\n                    if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\n                        break;\n                    }\n                }\n                if (chunkerCurrentIndex == len - 1) {\n                    return fail('missing closing `*/`', currentChunkStartIndex);\n                }\n                chunkerCurrentIndex++;\n            }\n            continue;\n        case 42:\n            if (chunkerCurrentIndex < len - 1 && input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\n                return fail('unmatched `/*`', chunkerCurrentIndex);\n            }\n            continue;\n        }\n    }\n    if (level !== 0) {\n        if (lastMultiComment > lastOpening && lastMultiCommentEndBrace > lastMultiComment) {\n            return fail('missing closing `}` or `*/`', lastOpening);\n        } else {\n            return fail('missing closing `}`', lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail('missing closing `)`', lastOpeningParen);\n    }\n    emitChunk(true);\n    return chunks;\n};"]}