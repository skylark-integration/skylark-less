{"version":3,"sources":["engine/source-map-output.js"],"names":["define","exports","module","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","environment","SourceMapOutput","options","this","_css","_rootNode","rootNode","_contentsMap","contentsMap","_contentsIgnoredCharsMap","contentsIgnoredCharsMap","sourceMapFilename","_sourceMapFilename","replace","_outputFilename","outputFilename","sourceMapURL","sourceMapBasepath","_sourceMapBasepath","sourceMapRootpath","_sourceMapRootpath","charAt","length","_outputSourceFiles","outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","prototype","removeBasepath","path","indexOf","substring","normalizeFilename","filename","add","chunk","fileInfo","index","mapLines","lines","sourceLines","columns","sourceColumns","i","inputSource","slice","split","_sourceMapGenerator","addMapping","generated","line","column","original","source","push","isEmpty","toCSS","context","file","sourceRoot","hasOwnProperty","setSourceContent","genCSS","sourceMapContent","JSON","stringify","toJSON","sourceMap","join"],"mappings":"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","file":"../../engine/source-map-output.js","sourcesContent":["define([], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    module.exports = function (environment) {\n        var SourceMapOutput = function (options) {\n            this._css = [];\n            this._rootNode = options.rootNode;\n            this._contentsMap = options.contentsMap;\n            this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n            if (options.sourceMapFilename) {\n                this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n            }\n            this._outputFilename = options.outputFilename;\n            this.sourceMapURL = options.sourceMapURL;\n            if (options.sourceMapBasepath) {\n                this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n            }\n            if (options.sourceMapRootpath) {\n                this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n                if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                    this._sourceMapRootpath += '/';\n                }\n            } else {\n                this._sourceMapRootpath = '';\n            }\n            this._outputSourceFiles = options.outputSourceFiles;\n            this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n            this._lineNumber = 0;\n            this._column = 0;\n        };\n        SourceMapOutput.prototype.removeBasepath = function (path) {\n            if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n                path = path.substring(this._sourceMapBasepath.length);\n                if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n                    path = path.substring(1);\n                }\n            }\n            return path;\n        };\n        SourceMapOutput.prototype.normalizeFilename = function (filename) {\n            filename = filename.replace(/\\\\/g, '/');\n            filename = this.removeBasepath(filename);\n            return (this._sourceMapRootpath || '') + filename;\n        };\n        SourceMapOutput.prototype.add = function (chunk, fileInfo, index, mapLines) {\n            if (!chunk) {\n                return;\n            }\n            var lines, sourceLines, columns, sourceColumns, i;\n            if (fileInfo && fileInfo.filename) {\n                var inputSource = this._contentsMap[fileInfo.filename];\n                if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                    index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                    if (index < 0) {\n                        index = 0;\n                    }\n                    inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n                }\n                inputSource = inputSource.substring(0, index);\n                sourceLines = inputSource.split('\\n');\n                sourceColumns = sourceLines[sourceLines.length - 1];\n            }\n            lines = chunk.split('\\n');\n            columns = lines[lines.length - 1];\n            if (fileInfo && fileInfo.filename) {\n                if (!mapLines) {\n                    this._sourceMapGenerator.addMapping({\n                        generated: {\n                            line: this._lineNumber + 1,\n                            column: this._column\n                        },\n                        original: {\n                            line: sourceLines.length,\n                            column: sourceColumns.length\n                        },\n                        source: this.normalizeFilename(fileInfo.filename)\n                    });\n                } else {\n                    for (i = 0; i < lines.length; i++) {\n                        this._sourceMapGenerator.addMapping({\n                            generated: {\n                                line: this._lineNumber + i + 1,\n                                column: i === 0 ? this._column : 0\n                            },\n                            original: {\n                                line: sourceLines.length + i,\n                                column: i === 0 ? sourceColumns.length : 0\n                            },\n                            source: this.normalizeFilename(fileInfo.filename)\n                        });\n                    }\n                }\n            }\n            if (lines.length === 1) {\n                this._column += columns.length;\n            } else {\n                this._lineNumber += lines.length - 1;\n                this._column = columns.length;\n            }\n            this._css.push(chunk);\n        };\n        SourceMapOutput.prototype.isEmpty = function () {\n            return this._css.length === 0;\n        };\n        SourceMapOutput.prototype.toCSS = function (context) {\n            this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({\n                file: this._outputFilename,\n                sourceRoot: null\n            });\n            if (this._outputSourceFiles) {\n                for (var filename in this._contentsMap) {\n                    if (this._contentsMap.hasOwnProperty(filename)) {\n                        var source = this._contentsMap[filename];\n                        if (this._contentsIgnoredCharsMap[filename]) {\n                            source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                        }\n                        this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                    }\n                }\n            }\n            this._rootNode.genCSS(context, this);\n            if (this._css.length > 0) {\n                var sourceMapURL, sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n                if (this.sourceMapURL) {\n                    sourceMapURL = this.sourceMapURL;\n                } else if (this._sourceMapFilename) {\n                    sourceMapURL = this._sourceMapFilename;\n                }\n                this.sourceMapURL = sourceMapURL;\n                this.sourceMap = sourceMapContent;\n            }\n            return this._css.join('');\n        };\n        return SourceMapOutput;\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}