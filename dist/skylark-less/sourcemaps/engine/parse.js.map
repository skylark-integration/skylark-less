{"version":3,"sources":["engine/parse.js"],"names":["PromiseConstructor","contexts","require","Parser","PluginManager","LessError","utils","module","exports","environment","ParseTree","ImportManager","parse","input","options","callback","copyOptions","this","Promise","self","resolve","reject","call","err","output","context","rootFileInfo","pluginManager","reUsePluginManager","Parse","filename","entryPath","replace","rewriteUrls","rootpath","currentDirectory","rootFilename","slice","imports","importManager","plugins","forEach","plugin","evalResult","contents","fileContent","Loader","evalPlugin","addPlugin","e","root"],"mappings":";;;;;;;AAAA,IAAIA,mBAAoBC,SAAWC,QAAQ,cAAeC,OAASD,QAAQ,mBAAoBE,cAAgBF,QAAQ,oBAAqBG,UAAYH,QAAQ,gBAAiBI,MAAQJ,QAAQ,WACjMK,OAAOC,QAAU,SAAUC,EAAaC,EAAWC,GAC/C,IAAIC,EAAQ,SAAUC,EAAOC,EAASC,GAOlC,GANuB,mBAAZD,GACPC,EAAWD,EACXA,EAAUR,MAAMU,YAAYC,KAAKH,aAEjCA,EAAUR,MAAMU,YAAYC,KAAKH,QAASA,QAEzCC,EAAU,CACNf,qBACDA,mBAAwC,oBAAZkB,QAA0BhB,QAAQ,WAAagB,SAE/E,IAAIC,EAAOF,KACX,OAAO,IAAIjB,mBAAmB,SAAUoB,EAASC,GAC7CT,EAAMU,KAAKH,EAAMN,EAAOC,EAAS,SAAUS,EAAKC,GACxCD,EACAF,EAAOE,GAEPH,EAAQI,OAKpB,IAAIC,EAASC,EAAcC,EAAgB,IAAIvB,cAAca,MAAOH,EAAQc,oBAG5E,GAFAd,EAAQa,cAAgBA,EACxBF,EAAU,IAAIxB,SAAS4B,MAAMf,GACzBA,EAAQY,aACRA,EAAeZ,EAAQY,iBACpB,CACH,IAAII,EAAWhB,EAAQgB,UAAY,QAC/BC,EAAYD,EAASE,QAAQ,YAAa,KAC9CN,GACII,SAAUA,EACVG,YAAaR,EAAQQ,YACrBC,SAAUT,EAAQS,UAAY,GAC9BC,iBAAkBJ,EAClBA,UAAWA,EACXK,aAAcN,IAEDI,UAAgD,MAApCR,EAAaQ,SAASG,OAAO,KACtDX,EAAaQ,UAAY,KAGjC,IAAII,EAAU,IAAI3B,EAAcM,KAAMQ,EAASC,GAC/CT,KAAKsB,cAAgBD,EACjBxB,EAAQ0B,SACR1B,EAAQ0B,QAAQC,QAAQ,SAAUC,GAC9B,IAAIC,EAAYC,EAChB,GAAIF,EAAOG,aAGP,GAFAD,EAAWF,EAAOG,YAAYb,QAAQ,UAAW,KACjDW,EAAahB,EAAcmB,OAAOC,WAAWH,EAAUnB,EAASa,EAASI,EAAO5B,QAAS4B,EAAOZ,qBACtEzB,UACtB,OAAOU,EAAS4B,QAGpBhB,EAAcqB,UAAUN,KAIpC,IAAIvC,OAAOsB,EAASa,EAASZ,GAAcd,MAAMC,EAAO,SAAUoC,EAAGC,GACjE,GAAID,EACA,OAAOlC,EAASkC,GAEpBlC,EAAS,KAAMmC,EAAMZ,EAASxB,IAC/BA,IAGX,OAAOF","file":"../../engine/parse.js","sourcesContent":["var PromiseConstructor, contexts = require('./contexts'), Parser = require('./parser/parser'), PluginManager = require('./plugin-manager'), LessError = require('./less-error'), utils = require('./utils');\nmodule.exports = function (environment, ParseTree, ImportManager) {\n    var parse = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        } else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n        if (!callback) {\n            if (!PromiseConstructor) {\n                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;\n            }\n            var self = this;\n            return new PromiseConstructor(function (resolve, reject) {\n                parse.call(self, input, options, function (err, output) {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            var context, rootFileInfo, pluginManager = new PluginManager(this, !options.reUsePluginManager);\n            options.pluginManager = pluginManager;\n            context = new contexts.Parse(options);\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                var filename = options.filename || 'input';\n                var entryPath = filename.replace(/[^\\/\\\\]*$/, '');\n                rootFileInfo = {\n                    filename: filename,\n                    rewriteUrls: context.rewriteUrls,\n                    rootpath: context.rootpath || '',\n                    currentDirectory: entryPath,\n                    entryPath: entryPath,\n                    rootFilename: filename\n                };\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n                    rootFileInfo.rootpath += '/';\n                }\n            }\n            var imports = new ImportManager(this, context, rootFileInfo);\n            this.importManager = imports;\n            if (options.plugins) {\n                options.plugins.forEach(function (plugin) {\n                    var evalResult, contents;\n                    if (plugin.fileContent) {\n                        contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n                        evalResult = pluginManager.Loader.evalPlugin(contents, context, imports, plugin.options, plugin.filename);\n                        if (evalResult instanceof LessError) {\n                            return callback(evalResult);\n                        }\n                    } else {\n                        pluginManager.addPlugin(plugin);\n                    }\n                });\n            }\n            new Parser(context, imports, rootFileInfo).parse(input, function (e, root) {\n                if (e) {\n                    return callback(e);\n                }\n                callback(null, root, imports, options);\n            }, options);\n        }\n    };\n    return parse;\n};"]}