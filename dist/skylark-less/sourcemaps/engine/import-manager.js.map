{"version":3,"sources":["engine/import-manager.js"],"names":["contexts","require","Parser","LessError","utils","PromiseConstructor","Promise","logger","module","exports","environment","ImportManager","less","context","rootFileInfo","this","rootFilename","filename","paths","contents","contentsIgnoredChars","mime","error","queue","files","prototype","push","path","tryAppendExtension","currentFileInfo","importOptions","callback","importManager","pluginLoader","pluginManager","Loader","fileParsedFunc","e","root","fullPath","splice","indexOf","importedEqualsRoot","optional","rules","info","inline","options","newFileInfo","rewriteUrls","entryPath","rootpath","fileManager","getFileManager","currentDirectory","promise","loadFileCallback","loadedFile","plugin","resolvedFilename","replace","getPath","join","pathDiff","isPathAbsolute","alwaysMakePathsAbsolute","newEnv","Parse","processImports","reference","isPlugin","evalPlugin","pluginArgs","multiple","parse","clone","ext","loadPlugin","loadFile","err","then","message"],"mappings":"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","file":"../../engine/import-manager.js","sourcesContent":["var contexts = require('./contexts'), Parser = require('./parser/parser'), LessError = require('./less-error'), utils = require('./utils'), PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise, logger = require('./logger');\nmodule.exports = function (environment) {\n    var ImportManager = function (less, context, rootFileInfo) {\n        this.less = less;\n        this.rootFilename = rootFileInfo.filename;\n        this.paths = context.paths || [];\n        this.contents = {};\n        this.contentsIgnoredChars = {};\n        this.mime = context.mime;\n        this.error = null;\n        this.context = context;\n        this.queue = [];\n        this.files = {};\n    };\n    ImportManager.prototype.push = function (path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n        var importManager = this, pluginLoader = this.context.pluginManager.Loader;\n        this.queue.push(path);\n        var fileParsedFunc = function (e, root, fullPath) {\n            importManager.queue.splice(importManager.queue.indexOf(path), 1);\n            var importedEqualsRoot = fullPath === importManager.rootFilename;\n            if (importOptions.optional && e) {\n                callback(null, { rules: [] }, false, null);\n                logger.info('The file ' + fullPath + ' was skipped because it was not found and the import was marked optional.');\n            } else {\n                if (!importManager.files[fullPath] && !importOptions.inline) {\n                    importManager.files[fullPath] = {\n                        root: root,\n                        options: importOptions\n                    };\n                }\n                if (e && !importManager.error) {\n                    importManager.error = e;\n                }\n                callback(e, root, importedEqualsRoot, fullPath);\n            }\n        };\n        var newFileInfo = {\n            rewriteUrls: this.context.rewriteUrls,\n            entryPath: currentFileInfo.entryPath,\n            rootpath: currentFileInfo.rootpath,\n            rootFilename: currentFileInfo.rootFilename\n        };\n        var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n        if (!fileManager) {\n            fileParsedFunc({ message: 'Could not find a file-manager for ' + path });\n            return;\n        }\n        var loadFileCallback = function (loadedFile) {\n            var plugin, resolvedFilename = loadedFile.filename, contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n            newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n            if (newFileInfo.rewriteUrls) {\n                newFileInfo.rootpath = fileManager.join(importManager.context.rootpath || '', fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n                if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                    newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                }\n            }\n            newFileInfo.filename = resolvedFilename;\n            var newEnv = new contexts.Parse(importManager.context);\n            newEnv.processImports = false;\n            importManager.contents[resolvedFilename] = contents;\n            if (currentFileInfo.reference || importOptions.reference) {\n                newFileInfo.reference = true;\n            }\n            if (importOptions.isPlugin) {\n                plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n                if (plugin instanceof LessError) {\n                    fileParsedFunc(plugin, null, resolvedFilename);\n                } else {\n                    fileParsedFunc(null, plugin, resolvedFilename);\n                }\n            } else if (importOptions.inline) {\n                fileParsedFunc(null, contents, resolvedFilename);\n            } else {\n                if (importManager.files[resolvedFilename] && !importManager.files[resolvedFilename].options.multiple && !importOptions.multiple) {\n                    fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n                } else {\n                    new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\n                        fileParsedFunc(e, root, resolvedFilename);\n                    });\n                }\n            }\n        };\n        var promise, context = utils.clone(this.context);\n        if (tryAppendExtension) {\n            context.ext = importOptions.isPlugin ? '.js' : '.less';\n        }\n        if (importOptions.isPlugin) {\n            context.mime = 'application/javascript';\n            promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n        } else {\n            promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment, function (err, loadedFile) {\n                if (err) {\n                    fileParsedFunc(err);\n                } else {\n                    loadFileCallback(loadedFile);\n                }\n            });\n        }\n        if (promise) {\n            promise.then(loadFileCallback, fileParsedFunc);\n        }\n    };\n    return ImportManager;\n};"]}