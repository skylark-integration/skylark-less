{"version":3,"sources":["engine/utils.js"],"names":["define","__module__0","exports","module","Constants","utils","getLocation","index","inputStream","n","line","column","charAt","slice","match","length","copyArray","arr","i","copy","Array","clone","obj","cloned","prop","hasOwnProperty","copyOptions","obj1","obj2","_defaults","opts","defaults","strictMath","math","Math","STRICT_LEGACY","relativeUrls","rewriteUrls","RewriteUrls","ALL","toLowerCase","ALWAYS","PARENS_DIVISION","PARENS","OFF","LOCAL","newObj","Object","assign","merge","flattenArray","result","value","isArray","undefined","push","__isValidToReturn","attr","__isEmptyObject"],"mappings":";;;;;;;AAAAA,QAAQ,eAAgB,SAAUC,GAC9B,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAYH,EACZI,GACAC,YAAa,SAAUC,EAAOC,GAE1B,IADA,IAAIC,EAAIF,EAAQ,EAAGG,EAAO,KAAMC,GAAU,IACjCF,GAAK,GAA+B,OAA1BD,EAAYI,OAAOH,IAClCE,IAKJ,MAHqB,iBAAVJ,IACPG,GAAQF,EAAYK,MAAM,EAAGN,GAAOO,MAAM,QAAU,IAAIC,SAGxDL,KAAMA,EACNC,OAAQA,IAGhBK,UAAW,SAAUC,GACjB,IAAIC,EAAGH,EAASE,EAAIF,OAAQI,EAAO,IAAIC,MAAML,GAC7C,IAAKG,EAAI,EAAGA,EAAIH,EAAQG,IACpBC,EAAKD,GAAKD,EAAIC,GAElB,OAAOC,GAEXE,MAAO,SAAUC,GACb,IAAIC,KACJ,IAAK,IAAIC,KAAQF,EACTA,EAAIG,eAAeD,KACnBD,EAAOC,GAAQF,EAAIE,IAG3B,OAAOD,GAEXG,YAAa,SAAUC,EAAMC,GACzB,GAAIA,GAAQA,EAAKC,UACb,OAAOD,EAEX,IAAIE,EAAOzB,EAAM0B,SAASJ,EAAMC,GAOhC,GANIE,EAAKE,aACLF,EAAKG,KAAO7B,EAAU8B,KAAKC,eAE3BL,EAAKM,eACLN,EAAKO,YAAcjC,EAAUkC,YAAYC,KAEpB,iBAAdT,EAAKG,KACZ,OAAQH,EAAKG,KAAKO,eAClB,IAAK,SACDV,EAAKG,KAAO7B,EAAU8B,KAAKO,OAC3B,MACJ,IAAK,kBACDX,EAAKG,KAAO7B,EAAU8B,KAAKQ,gBAC3B,MACJ,IAAK,SACL,IAAK,SACDZ,EAAKG,KAAO7B,EAAU8B,KAAKS,OAC3B,MACJ,IAAK,gBACDb,EAAKG,KAAO7B,EAAU8B,KAAKC,cAGnC,GAAgC,iBAArBL,EAAKO,YACZ,OAAQP,EAAKO,YAAYG,eACzB,IAAK,MACDV,EAAKO,YAAcjC,EAAUkC,YAAYM,IACzC,MACJ,IAAK,QACDd,EAAKO,YAAcjC,EAAUkC,YAAYO,MACzC,MACJ,IAAK,MACDf,EAAKO,YAAcjC,EAAUkC,YAAYC,IAIjD,OAAOT,GAEXC,SAAU,SAAUJ,EAAMC,GACtB,IAAIkB,EAASlB,MACb,IAAKA,EAAKC,UAAW,CACjBiB,KACA,IAAIf,EAAW1B,EAAMgB,MAAMM,GAC3BmB,EAAOjB,UAAYE,EACnB,IAAIR,EAASK,EAAOvB,EAAMgB,MAAMO,MAChCmB,OAAOC,OAAOF,EAAQf,EAAUR,GAEpC,OAAOuB,GAEXG,MAAO,SAAUtB,EAAMC,GACnB,IAAK,IAAIJ,KAAQI,EACTA,EAAKH,eAAeD,KACpBG,EAAKH,GAAQI,EAAKJ,IAG1B,OAAOG,GAEXuB,aAAc,SAAUjC,EAAKkC,GACzBA,EAASA,MACT,IAAK,IAAIjC,EAAI,EAAGH,EAASE,EAAIF,OAAQG,EAAIH,EAAQG,IAAK,CAClD,IAAIkC,EAAQnC,EAAIC,GACZE,MAAMiC,QAAQD,GACd/C,EAAM6C,aAAaE,EAAOD,QAEZG,IAAVF,GACAD,EAAOI,KAAKH,GAIxB,OAAOD,IAUf,SAASK,EAAkBlC,GACvB,MAAqB,iBAAPA,GAAmBF,MAAMiC,QAAQ/B,KAPnD,SAAyBA,GACrB,IAAImC,EACJ,IAAKA,KAAQnC,EACT,OAAO,EACX,OAAO,EAGiDoC,CAAgBpC,GAE5E,OAVAnB,EAAOD,QAAUG,EAUbmD,EAAkBrD,EAAOD,SAClBC,EAAOD,QACTsD,EAAkBtD,GAChBA,OADN","file":"../../engine/utils.js","sourcesContent":["define(['./constants'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Constants = __module__0;\n    var utils = {\n        getLocation: function (index, inputStream) {\n            var n = index + 1, line = null, column = -1;\n            while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n                column++;\n            }\n            if (typeof index === 'number') {\n                line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n            }\n            return {\n                line: line,\n                column: column\n            };\n        },\n        copyArray: function (arr) {\n            var i, length = arr.length, copy = new Array(length);\n            for (i = 0; i < length; i++) {\n                copy[i] = arr[i];\n            }\n            return copy;\n        },\n        clone: function (obj) {\n            var cloned = {};\n            for (var prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    cloned[prop] = obj[prop];\n                }\n            }\n            return cloned;\n        },\n        copyOptions: function (obj1, obj2) {\n            if (obj2 && obj2._defaults) {\n                return obj2;\n            }\n            var opts = utils.defaults(obj1, obj2);\n            if (opts.strictMath) {\n                opts.math = Constants.Math.STRICT_LEGACY;\n            }\n            if (opts.relativeUrls) {\n                opts.rewriteUrls = Constants.RewriteUrls.ALL;\n            }\n            if (typeof opts.math === 'string') {\n                switch (opts.math.toLowerCase()) {\n                case 'always':\n                    opts.math = Constants.Math.ALWAYS;\n                    break;\n                case 'parens-division':\n                    opts.math = Constants.Math.PARENS_DIVISION;\n                    break;\n                case 'strict':\n                case 'parens':\n                    opts.math = Constants.Math.PARENS;\n                    break;\n                case 'strict-legacy':\n                    opts.math = Constants.Math.STRICT_LEGACY;\n                }\n            }\n            if (typeof opts.rewriteUrls === 'string') {\n                switch (opts.rewriteUrls.toLowerCase()) {\n                case 'off':\n                    opts.rewriteUrls = Constants.RewriteUrls.OFF;\n                    break;\n                case 'local':\n                    opts.rewriteUrls = Constants.RewriteUrls.LOCAL;\n                    break;\n                case 'all':\n                    opts.rewriteUrls = Constants.RewriteUrls.ALL;\n                    break;\n                }\n            }\n            return opts;\n        },\n        defaults: function (obj1, obj2) {\n            var newObj = obj2 || {};\n            if (!obj2._defaults) {\n                newObj = {};\n                var defaults = utils.clone(obj1);\n                newObj._defaults = defaults;\n                var cloned = obj2 ? utils.clone(obj2) : {};\n                Object.assign(newObj, defaults, cloned);\n            }\n            return newObj;\n        },\n        merge: function (obj1, obj2) {\n            for (var prop in obj2) {\n                if (obj2.hasOwnProperty(prop)) {\n                    obj1[prop] = obj2[prop];\n                }\n            }\n            return obj1;\n        },\n        flattenArray: function (arr, result) {\n            result = result || [];\n            for (var i = 0, length = arr.length; i < length; i++) {\n                var value = arr[i];\n                if (Array.isArray(value)) {\n                    utils.flattenArray(value, result);\n                } else {\n                    if (value !== undefined) {\n                        result.push(value);\n                    }\n                }\n            }\n            return result;\n        }\n    };\n    module.exports = utils;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}