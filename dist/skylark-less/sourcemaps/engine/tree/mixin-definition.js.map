{"version":3,"sources":["engine/tree/mixin-definition.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","__module__4","__module__5","__module__6","__module__7","exports","module","Selector","Element","Ruleset","Declaration","DetachedRuleset","Expression","contexts","utils","Definition","name","params","rules","condition","variadic","frames","visibilityInfo","this","selectors","_index","_fileInfo","arity","length","_lookups","optionalParameters","required","reduce","count","p","value","push","copyVisibilityInfo","allowRoot","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","evalFirst","accept","visitor","visitArray","visit","evalParams","context","mixinEnv","args","evaldArguments","varargs","arg","i","j","val","isNamedFound","argIndex","frame","copyArray","argsLength","functionRegistry","inherit","Eval","concat","eval","prependRule","splice","message","resetCache","makeImportant","map","r","evalCall","important","ruleset","_arguments","mixinFrames","originalRuleset","matchCondition","matchArgs","len","allArgsCnt","requiredArgsCnt","indexOf","Math","min","toCSS"],"mappings":"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","file":"../../../engine/tree/mixin-definition.js","sourcesContent":["define([\n    './selector',\n    './element',\n    './ruleset',\n    './declaration',\n    './detached-ruleset',\n    './expression',\n    '../contexts',\n    '../utils'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4, __module__5, __module__6, __module__7) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Selector = __module__0, Element = __module__1, Ruleset = __module__2, Declaration = __module__3, DetachedRuleset = __module__4, Expression = __module__5, contexts = __module__6, utils = __module__7;\n    var Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {\n        this.name = name || 'anonymous mixin';\n        this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\n        this.params = params;\n        this.condition = condition;\n        this.variadic = variadic;\n        this.arity = params.length;\n        this.rules = rules;\n        this._lookups = {};\n        var optionalParameters = [];\n        this.required = params.reduce(function (count, p) {\n            if (!p.name || p.name && !p.value) {\n                return count + 1;\n            } else {\n                optionalParameters.push(p.name);\n                return count;\n            }\n        }, 0);\n        this.optionalParameters = optionalParameters;\n        this.frames = frames;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n    };\n    Definition.prototype = new Ruleset();\n    Definition.prototype.type = 'MixinDefinition';\n    Definition.prototype.evalFirst = true;\n    Definition.prototype.accept = function (visitor) {\n        if (this.params && this.params.length) {\n            this.params = visitor.visitArray(this.params);\n        }\n        this.rules = visitor.visitArray(this.rules);\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    };\n    Definition.prototype.evalParams = function (context, mixinEnv, args, evaldArguments) {\n        var frame = new Ruleset(null, null), varargs, arg, params = utils.copyArray(this.params), i, j, val, name, isNamedFound, argIndex, argsLength = 0;\n        if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n            frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n        }\n        mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n        if (args) {\n            args = utils.copyArray(args);\n            argsLength = args.length;\n            for (i = 0; i < argsLength; i++) {\n                arg = args[i];\n                if (name = arg && arg.name) {\n                    isNamedFound = false;\n                    for (j = 0; j < params.length; j++) {\n                        if (!evaldArguments[j] && name === params[j].name) {\n                            evaldArguments[j] = arg.value.eval(context);\n                            frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                            isNamedFound = true;\n                            break;\n                        }\n                    }\n                    if (isNamedFound) {\n                        args.splice(i, 1);\n                        i--;\n                        continue;\n                    } else {\n                        throw {\n                            type: 'Runtime',\n                            message: 'Named argument for ' + this.name + ' ' + args[i].name + ' not found'\n                        };\n                    }\n                }\n            }\n        }\n        argIndex = 0;\n        for (i = 0; i < params.length; i++) {\n            if (evaldArguments[i]) {\n                continue;\n            }\n            arg = args && args[argIndex];\n            if (name = params[i].name) {\n                if (params[i].variadic) {\n                    varargs = [];\n                    for (j = argIndex; j < argsLength; j++) {\n                        varargs.push(args[j].value.eval(context));\n                    }\n                    frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n                } else {\n                    val = arg && arg.value;\n                    if (val) {\n                        if (Array.isArray(val)) {\n                            val = new DetachedRuleset(new Ruleset('', val));\n                        } else {\n                            val = val.eval(context);\n                        }\n                    } else if (params[i].value) {\n                        val = params[i].value.eval(mixinEnv);\n                        frame.resetCache();\n                    } else {\n                        throw {\n                            type: 'Runtime',\n                            message: 'wrong number of arguments for ' + this.name + ' (' + argsLength + ' for ' + this.arity + ')'\n                        };\n                    }\n                    frame.prependRule(new Declaration(name, val));\n                    evaldArguments[i] = val;\n                }\n            }\n            if (params[i].variadic && args) {\n                for (j = argIndex; j < argsLength; j++) {\n                    evaldArguments[j] = args[j].value.eval(context);\n                }\n            }\n            argIndex++;\n        }\n        return frame;\n    };\n    Definition.prototype.makeImportant = function () {\n        var rules = !this.rules ? this.rules : this.rules.map(function (r) {\n            if (r.makeImportant) {\n                return r.makeImportant(true);\n            } else {\n                return r;\n            }\n        });\n        var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n        return result;\n    };\n    Definition.prototype.eval = function (context) {\n        return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || utils.copyArray(context.frames));\n    };\n    Definition.prototype.evalCall = function (context, args, important) {\n        var _arguments = [], mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames, frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments), rules, ruleset;\n        frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n        rules = utils.copyArray(this.rules);\n        ruleset = new Ruleset(null, rules);\n        ruleset.originalRuleset = this;\n        ruleset = ruleset.eval(new contexts.Eval(context, [\n            this,\n            frame\n        ].concat(mixinFrames)));\n        if (important) {\n            ruleset = ruleset.makeImportant();\n        }\n        return ruleset;\n    };\n    Definition.prototype.matchCondition = function (args, context) {\n        if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context, new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])].concat(this.frames || []).concat(context.frames)))) {\n            return false;\n        }\n        return true;\n    };\n    Definition.prototype.matchArgs = function (args, context) {\n        var allArgsCnt = args && args.length || 0, len, optionalParameters = this.optionalParameters;\n        var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\n            if (optionalParameters.indexOf(p.name) < 0) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0);\n        if (!this.variadic) {\n            if (requiredArgsCnt < this.required) {\n                return false;\n            }\n            if (allArgsCnt > this.params.length) {\n                return false;\n            }\n        } else {\n            if (requiredArgsCnt < this.required - 1) {\n                return false;\n            }\n        }\n        len = Math.min(requiredArgsCnt, this.arity);\n        for (var i = 0; i < len; i++) {\n            if (!this.params[i].name && !this.params[i].variadic) {\n                if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    module.exports = Definition;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}