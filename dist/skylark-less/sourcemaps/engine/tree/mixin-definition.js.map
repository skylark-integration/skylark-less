{"version":3,"sources":["engine/tree/mixin-definition.js"],"names":["Selector","require","Element","Ruleset","Declaration","DetachedRuleset","Expression","contexts","utils","Definition","name","params","rules","condition","variadic","frames","visibilityInfo","this","selectors","_index","_fileInfo","arity","length","_lookups","optionalParameters","required","reduce","count","p","value","push","copyVisibilityInfo","allowRoot","prototype","type","evalFirst","accept","visitor","visitArray","visit","evalParams","context","mixinEnv","args","evaldArguments","varargs","arg","i","j","val","isNamedFound","argIndex","frame","copyArray","argsLength","functionRegistry","inherit","Eval","concat","eval","prependRule","splice","message","Array","isArray","resetCache","makeImportant","map","r","evalCall","important","ruleset","_arguments","mixinFrames","originalRuleset","matchCondition","matchArgs","len","allArgsCnt","requiredArgsCnt","indexOf","Math","min","toCSS","module","exports"],"mappings":"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","file":"../../../engine/tree/mixin-definition.js","sourcesContent":["var Selector = require('./selector'), Element = require('./element'), Ruleset = require('./ruleset'), Declaration = require('./declaration'), DetachedRuleset = require('./detached-ruleset'), Expression = require('./expression'), contexts = require('../contexts'), utils = require('../utils');\nvar Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {\n    this.name = name || 'anonymous mixin';\n    this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\n    this.params = params;\n    this.condition = condition;\n    this.variadic = variadic;\n    this.arity = params.length;\n    this.rules = rules;\n    this._lookups = {};\n    var optionalParameters = [];\n    this.required = params.reduce(function (count, p) {\n        if (!p.name || p.name && !p.value) {\n            return count + 1;\n        } else {\n            optionalParameters.push(p.name);\n            return count;\n        }\n    }, 0);\n    this.optionalParameters = optionalParameters;\n    this.frames = frames;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n};\nDefinition.prototype = new Ruleset();\nDefinition.prototype.type = 'MixinDefinition';\nDefinition.prototype.evalFirst = true;\nDefinition.prototype.accept = function (visitor) {\n    if (this.params && this.params.length) {\n        this.params = visitor.visitArray(this.params);\n    }\n    this.rules = visitor.visitArray(this.rules);\n    if (this.condition) {\n        this.condition = visitor.visit(this.condition);\n    }\n};\nDefinition.prototype.evalParams = function (context, mixinEnv, args, evaldArguments) {\n    var frame = new Ruleset(null, null), varargs, arg, params = utils.copyArray(this.params), i, j, val, name, isNamedFound, argIndex, argsLength = 0;\n    if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n        frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n    }\n    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n    if (args) {\n        args = utils.copyArray(args);\n        argsLength = args.length;\n        for (i = 0; i < argsLength; i++) {\n            arg = args[i];\n            if (name = arg && arg.name) {\n                isNamedFound = false;\n                for (j = 0; j < params.length; j++) {\n                    if (!evaldArguments[j] && name === params[j].name) {\n                        evaldArguments[j] = arg.value.eval(context);\n                        frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                        isNamedFound = true;\n                        break;\n                    }\n                }\n                if (isNamedFound) {\n                    args.splice(i, 1);\n                    i--;\n                    continue;\n                } else {\n                    throw {\n                        type: 'Runtime',\n                        message: 'Named argument for ' + this.name + ' ' + args[i].name + ' not found'\n                    };\n                }\n            }\n        }\n    }\n    argIndex = 0;\n    for (i = 0; i < params.length; i++) {\n        if (evaldArguments[i]) {\n            continue;\n        }\n        arg = args && args[argIndex];\n        if (name = params[i].name) {\n            if (params[i].variadic) {\n                varargs = [];\n                for (j = argIndex; j < argsLength; j++) {\n                    varargs.push(args[j].value.eval(context));\n                }\n                frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n            } else {\n                val = arg && arg.value;\n                if (val) {\n                    if (Array.isArray(val)) {\n                        val = new DetachedRuleset(new Ruleset('', val));\n                    } else {\n                        val = val.eval(context);\n                    }\n                } else if (params[i].value) {\n                    val = params[i].value.eval(mixinEnv);\n                    frame.resetCache();\n                } else {\n                    throw {\n                        type: 'Runtime',\n                        message: 'wrong number of arguments for ' + this.name + ' (' + argsLength + ' for ' + this.arity + ')'\n                    };\n                }\n                frame.prependRule(new Declaration(name, val));\n                evaldArguments[i] = val;\n            }\n        }\n        if (params[i].variadic && args) {\n            for (j = argIndex; j < argsLength; j++) {\n                evaldArguments[j] = args[j].value.eval(context);\n            }\n        }\n        argIndex++;\n    }\n    return frame;\n};\nDefinition.prototype.makeImportant = function () {\n    var rules = !this.rules ? this.rules : this.rules.map(function (r) {\n        if (r.makeImportant) {\n            return r.makeImportant(true);\n        } else {\n            return r;\n        }\n    });\n    var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n    return result;\n};\nDefinition.prototype.eval = function (context) {\n    return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || utils.copyArray(context.frames));\n};\nDefinition.prototype.evalCall = function (context, args, important) {\n    var _arguments = [], mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames, frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments), rules, ruleset;\n    frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n    rules = utils.copyArray(this.rules);\n    ruleset = new Ruleset(null, rules);\n    ruleset.originalRuleset = this;\n    ruleset = ruleset.eval(new contexts.Eval(context, [\n        this,\n        frame\n    ].concat(mixinFrames)));\n    if (important) {\n        ruleset = ruleset.makeImportant();\n    }\n    return ruleset;\n};\nDefinition.prototype.matchCondition = function (args, context) {\n    if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context, new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])].concat(this.frames || []).concat(context.frames)))) {\n        return false;\n    }\n    return true;\n};\nDefinition.prototype.matchArgs = function (args, context) {\n    var allArgsCnt = args && args.length || 0, len, optionalParameters = this.optionalParameters;\n    var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\n        if (optionalParameters.indexOf(p.name) < 0) {\n            return count + 1;\n        } else {\n            return count;\n        }\n    }, 0);\n    if (!this.variadic) {\n        if (requiredArgsCnt < this.required) {\n            return false;\n        }\n        if (allArgsCnt > this.params.length) {\n            return false;\n        }\n    } else {\n        if (requiredArgsCnt < this.required - 1) {\n            return false;\n        }\n    }\n    len = Math.min(requiredArgsCnt, this.arity);\n    for (var i = 0; i < len; i++) {\n        if (!this.params[i].name && !this.params[i].variadic) {\n            if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nmodule.exports = Definition;"]}