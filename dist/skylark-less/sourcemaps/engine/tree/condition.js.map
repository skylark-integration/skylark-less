{"version":3,"sources":["engine/tree/condition.js"],"names":["Node","require","Condition","op","l","r","i","negate","this","trim","lvalue","rvalue","_index","prototype","type","accept","visitor","visit","eval","context","result","a","b","compare","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UACfC,UAAY,SAAUC,EAAIC,EAAGC,EAAGC,EAAGC,GACnCC,KAAKL,GAAKA,EAAGM,OACbD,KAAKE,OAASN,EACdI,KAAKG,OAASN,EACdG,KAAKI,OAASN,EACdE,KAAKD,OAASA,GAElBL,UAAUW,UAAY,IAAIb,KAC1BE,UAAUW,UAAUC,KAAO,YAC3BZ,UAAUW,UAAUE,OAAS,SAAUC,GACnCR,KAAKE,OAASM,EAAQC,MAAMT,KAAKE,QACjCF,KAAKG,OAASK,EAAQC,MAAMT,KAAKG,SAErCT,UAAUW,UAAUK,KAAO,SAAUC,GACjC,IAAIC,EAAS,SAAUjB,EAAIkB,EAAGC,GAC1B,OAAQnB,GACR,IAAK,MACD,OAAOkB,GAAKC,EAChB,IAAK,KACD,OAAOD,GAAKC,EAChB,QACI,OAAQtB,KAAKuB,QAAQF,EAAGC,IACxB,KAAM,EACF,MAAc,MAAPnB,GAAqB,OAAPA,GAAsB,OAAPA,EACxC,KAAK,EACD,MAAc,MAAPA,GAAqB,OAAPA,GAAsB,OAAPA,GAAsB,OAAPA,EACvD,KAAK,EACD,MAAc,MAAPA,GAAqB,OAAPA,EACzB,QACI,OAAO,IAfN,CAkBXK,KAAKL,GAAIK,KAAKE,OAAOQ,KAAKC,GAAUX,KAAKG,OAAOO,KAAKC,IACvD,OAAOX,KAAKD,QAAUa,EAASA,GAEnCI,OAAOC,QAAUvB","file":"../../../engine/tree/condition.js","sourcesContent":["var Node = require('./node');\nvar Condition = function (op, l, r, i, negate) {\n    this.op = op.trim();\n    this.lvalue = l;\n    this.rvalue = r;\n    this._index = i;\n    this.negate = negate;\n};\nCondition.prototype = new Node();\nCondition.prototype.type = 'Condition';\nCondition.prototype.accept = function (visitor) {\n    this.lvalue = visitor.visit(this.lvalue);\n    this.rvalue = visitor.visit(this.rvalue);\n};\nCondition.prototype.eval = function (context) {\n    var result = function (op, a, b) {\n        switch (op) {\n        case 'and':\n            return a && b;\n        case 'or':\n            return a || b;\n        default:\n            switch (Node.compare(a, b)) {\n            case -1:\n                return op === '<' || op === '=<' || op === '<=';\n            case 0:\n                return op === '=' || op === '>=' || op === '=<' || op === '<=';\n            case 1:\n                return op === '>' || op === '>=';\n            default:\n                return false;\n            }\n        }\n    }(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n    return this.negate ? !result : result;\n};\nmodule.exports = Condition;"]}