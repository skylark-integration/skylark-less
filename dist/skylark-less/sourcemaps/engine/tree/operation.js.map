{"version":3,"sources":["engine/tree/operation.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","exports","module","Node","Color","Dimension","MATH","Math","Operation","op","operands","isSpaced","this","trim","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","accept","visitor","visit","eval","context","a","b","isMathOn","toColor","operate","math","PARENS_DIVISION","message","genCSS","output","add"],"mappings":";;;;;;;AAAAA,QACI,SACA,UACA,cACA,gBACD,SAAUC,EAAaC,EAAaC,EAAaC,GAChD,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAON,EAAaO,EAAQN,EAAaO,EAAYN,EAAaO,EAAON,EAAYO,KACrFC,EAAY,SAAUC,EAAIC,EAAUC,GACpCC,KAAKH,GAAKA,EAAGI,OACbD,KAAKF,SAAWA,EAChBE,KAAKD,SAAWA,GAuDpB,SAASG,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAxDAP,EAAUY,UAAY,IAAIjB,GACNkB,KAAO,YAC3Bb,EAAUY,UAAUE,OAAS,SAAUC,GACnCX,KAAKF,SAAWa,EAAQC,MAAMZ,KAAKF,WAEvCF,EAAUY,UAAUK,KAAO,SAAUC,GACjC,IAA4EjB,EAAxEkB,EAAIf,KAAKF,SAAS,GAAGe,KAAKC,GAAUE,EAAIhB,KAAKF,SAAS,GAAGe,KAAKC,GAClE,GAAIA,EAAQG,SAASjB,KAAKH,IAAK,CAQ3B,GAPAA,EAAiB,OAAZG,KAAKH,GAAc,IAAMG,KAAKH,GAC/BkB,aAAatB,GAAauB,aAAaxB,IACvCuB,EAAIA,EAAEG,WAENF,aAAavB,GAAasB,aAAavB,IACvCwB,EAAIA,EAAEE,YAELH,EAAEI,QAAS,CACZ,GAAIJ,aAAanB,GAAsB,MAATmB,EAAElB,IAAciB,EAAQM,OAAS1B,EAAK2B,gBAChE,OAAO,IAAIzB,EAAUI,KAAKH,IACtBkB,EACAC,GACDhB,KAAKD,UAEZ,MACIU,KAAM,YACNa,QAAS,gCAGjB,OAAOP,EAAEI,QAAQL,EAASjB,EAAImB,GAE9B,OAAO,IAAIpB,EAAUI,KAAKH,IACtBkB,EACAC,GACDhB,KAAKD,WAGhBH,EAAUY,UAAUe,OAAS,SAAUT,EAASU,GAC5CxB,KAAKF,SAAS,GAAGyB,OAAOT,EAASU,GAC7BxB,KAAKD,UACLyB,EAAOC,IAAI,KAEfD,EAAOC,IAAIzB,KAAKH,IACZG,KAAKD,UACLyB,EAAOC,IAAI,KAEfzB,KAAKF,SAAS,GAAGyB,OAAOT,EAASU,IAErClC,EAAOD,QAAUO,EAUbM,EAAkBZ,EAAOD,SAClBC,EAAOD,QACTa,EAAkBb,GAChBA,OADN","file":"../../../engine/tree/operation.js","sourcesContent":["define([\n    './node',\n    './color',\n    './dimension',\n    '../constants'\n], function (__module__0, __module__1, __module__2, __module__3) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Color = __module__1, Dimension = __module__2, MATH = __module__3.Math;\n    var Operation = function (op, operands, isSpaced) {\n        this.op = op.trim();\n        this.operands = operands;\n        this.isSpaced = isSpaced;\n    };\n    Operation.prototype = new Node();\n    Operation.prototype.type = 'Operation';\n    Operation.prototype.accept = function (visitor) {\n        this.operands = visitor.visit(this.operands);\n    };\n    Operation.prototype.eval = function (context) {\n        var a = this.operands[0].eval(context), b = this.operands[1].eval(context), op;\n        if (context.isMathOn(this.op)) {\n            op = this.op === './' ? '/' : this.op;\n            if (a instanceof Dimension && b instanceof Color) {\n                a = a.toColor();\n            }\n            if (b instanceof Dimension && a instanceof Color) {\n                b = b.toColor();\n            }\n            if (!a.operate) {\n                if (a instanceof Operation && a.op === '/' && context.math === MATH.PARENS_DIVISION) {\n                    return new Operation(this.op, [\n                        a,\n                        b\n                    ], this.isSpaced);\n                }\n                throw {\n                    type: 'Operation',\n                    message: 'Operation on an invalid type'\n                };\n            }\n            return a.operate(context, op, b);\n        } else {\n            return new Operation(this.op, [\n                a,\n                b\n            ], this.isSpaced);\n        }\n    };\n    Operation.prototype.genCSS = function (context, output) {\n        this.operands[0].genCSS(context, output);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        output.add(this.op);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        this.operands[1].genCSS(context, output);\n    };\n    module.exports = Operation;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}