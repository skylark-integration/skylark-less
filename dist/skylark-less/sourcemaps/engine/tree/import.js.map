{"version":3,"sources":["engine/tree/import.js"],"names":["Node","require","Media","URL","Quoted","Ruleset","Anonymous","utils","LessError","Import","path","features","options","index","currentFileInfo","visibilityInfo","this","_index","_fileInfo","allowRoot","undefined","less","inline","css","pathValue","getPath","test","copyVisibilityInfo","setParent","prototype","type","accept","visitor","visit","isPlugin","root","genCSS","context","output","reference","add","value","isVariableImport","containsVariables","evalForImport","eval","evalPath","fileInfo","pathRequiresRewrite","rewritePath","rootpath","normalizePath","result","doEval","blocksVisibility","length","forEach","node","addVisibilityBlock","ruleset","registry","e","message","imports","filename","frames","functionRegistry","functions","addMultiple","skip","contents","importedFilename","newImport","error","copyArray","rules","evalImports","module","exports"],"mappings":"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","file":"../../../engine/tree/import.js","sourcesContent":["var Node = require('./node'), Media = require('./media'), URL = require('./url'), Quoted = require('./quoted'), Ruleset = require('./ruleset'), Anonymous = require('./anonymous'), utils = require('../utils'), LessError = require('../less-error');\nvar Import = function (path, features, options, index, currentFileInfo, visibilityInfo) {\n    this.options = options;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.path = path;\n    this.features = features;\n    this.allowRoot = true;\n    if (this.options.less !== undefined || this.options.inline) {\n        this.css = !this.options.less || this.options.inline;\n    } else {\n        var pathValue = this.getPath();\n        if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\n            this.css = true;\n        }\n    }\n    this.copyVisibilityInfo(visibilityInfo);\n    this.setParent(this.features, this);\n    this.setParent(this.path, this);\n};\nImport.prototype = new Node();\nImport.prototype.type = 'Import';\nImport.prototype.accept = function (visitor) {\n    if (this.features) {\n        this.features = visitor.visit(this.features);\n    }\n    this.path = visitor.visit(this.path);\n    if (!this.options.isPlugin && !this.options.inline && this.root) {\n        this.root = visitor.visit(this.root);\n    }\n};\nImport.prototype.genCSS = function (context, output) {\n    if (this.css && this.path._fileInfo.reference === undefined) {\n        output.add('@import ', this._fileInfo, this._index);\n        this.path.genCSS(context, output);\n        if (this.features) {\n            output.add(' ');\n            this.features.genCSS(context, output);\n        }\n        output.add(';');\n    }\n};\nImport.prototype.getPath = function () {\n    return this.path instanceof URL ? this.path.value.value : this.path.value;\n};\nImport.prototype.isVariableImport = function () {\n    var path = this.path;\n    if (path instanceof URL) {\n        path = path.value;\n    }\n    if (path instanceof Quoted) {\n        return path.containsVariables();\n    }\n    return true;\n};\nImport.prototype.evalForImport = function (context) {\n    var path = this.path;\n    if (path instanceof URL) {\n        path = path.value;\n    }\n    return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n};\nImport.prototype.evalPath = function (context) {\n    var path = this.path.eval(context);\n    var fileInfo = this._fileInfo;\n    if (!(path instanceof URL)) {\n        var pathValue = path.value;\n        if (fileInfo && pathValue && context.pathRequiresRewrite(pathValue)) {\n            path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n        } else {\n            path.value = context.normalizePath(path.value);\n        }\n    }\n    return path;\n};\nImport.prototype.eval = function (context) {\n    var result = this.doEval(context);\n    if (this.options.reference || this.blocksVisibility()) {\n        if (result.length || result.length === 0) {\n            result.forEach(function (node) {\n                node.addVisibilityBlock();\n            });\n        } else {\n            result.addVisibilityBlock();\n        }\n    }\n    return result;\n};\nImport.prototype.doEval = function (context) {\n    var ruleset, registry, features = this.features && this.features.eval(context);\n    if (this.options.isPlugin) {\n        if (this.root && this.root.eval) {\n            try {\n                this.root.eval(context);\n            } catch (e) {\n                e.message = 'Plugin error during evaluation';\n                throw new LessError(e, this.root.imports, this.root.filename);\n            }\n        }\n        registry = context.frames[0] && context.frames[0].functionRegistry;\n        if (registry && this.root && this.root.functions) {\n            registry.addMultiple(this.root.functions);\n        }\n        return [];\n    }\n    if (this.skip) {\n        if (typeof this.skip === 'function') {\n            this.skip = this.skip();\n        }\n        if (this.skip) {\n            return [];\n        }\n    }\n    if (this.options.inline) {\n        var contents = new Anonymous(this.root, 0, {\n            filename: this.importedFilename,\n            reference: this.path._fileInfo && this.path._fileInfo.reference\n        }, true, true);\n        return this.features ? new Media([contents], this.features.value) : [contents];\n    } else if (this.css) {\n        var newImport = new Import(this.evalPath(context), features, this.options, this._index);\n        if (!newImport.css && this.error) {\n            throw this.error;\n        }\n        return newImport;\n    } else {\n        ruleset = new Ruleset(null, utils.copyArray(this.root.rules));\n        ruleset.evalImports(context);\n        return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n    }\n};\nmodule.exports = Import;"]}