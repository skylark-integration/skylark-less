{"version":3,"sources":["engine/tree/ruleset.js"],"names":["Node","require","Declaration","Keyword","Comment","Paren","Selector","Element","Anonymous","contexts","globalFunctionRegistry","defaultFunc","getDebugInfo","utils","Ruleset","selectors","rules","strictImports","visibilityInfo","this","_lookups","_variables","_properties","copyVisibilityInfo","allowRoot","setParent","prototype","type","isRuleset","isRulesetLike","accept","visitor","paths","visitArray","length","eval","context","selCnt","selector","i","hasVariable","hasOnePassingSelector","Array","error","message","j","elements","isVariable","evaldCondition","toParseSelectors","toCSS","parse","parseNode","join","getIndex","fileInfo","err","result","flattenArray","reset","rule","subRule","copyArray","ruleset","originalRuleset","root","firstRoot","allowImports","debugInfo","functionRegistry","frames","found","n","inherit","ctxFrames","unshift","ctxSelectors","evalImports","rsRules","evalFirst","mediaBlockCount","mediaBlocks","filter","r","variable","name","splice","apply","concat","resetCache","isJustParentSelector","shift","bubbleSelectors","importRules","makeImportant","map","matchArgs","args","matchCondition","lastSelector","condition","Eval","_rulesets","variables","reduce","hash","vars","hasOwnProperty","properties","value","push","decl","parseValue","property","lastDeclaration","toParse","self","transformDeclaration","parsed","important","isArray","nodes","forEach","call","rulesets","filtRules","prependRule","find","match","foundMixins","key","slice","path","genCSS","output","ruleNodes","tabLevel","sep","tabRuleStr","compress","tabSetStr","charsetNodeIndex","importNodeIndex","isCharset","add","pathSubCnt","pathCnt","firstSelector","lastRule","currentLastRule","toString","isVisible","isEmpty","joinSelectors","s","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","_index","_fileInfo","createSelector","containedElement","element","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","pop","createDerived","combinator","parentEl","emptyOrWhitespace","restOfPath","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","deriveSelector","deriveFrom","newSelector","extendList","newPaths","replaceParentSelector","inSelector","k","currentElements","newSelectors","selectorsMultiplied","el","maybeSelector","hadParentSelector","nestedSelector","replaced","nestedPaths","replacedNewSelectors","concatenated","bind","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,YAAcD,QAAQ,iBAAkBE,QAAUF,QAAQ,aAAcG,QAAUH,QAAQ,aAAcI,MAAQJ,QAAQ,WAAYK,SAAWL,QAAQ,cAAeM,QAAUN,QAAQ,aAAcO,UAAYP,QAAQ,eAAgBQ,SAAWR,QAAQ,eAAgBS,uBAAyBT,QAAQ,kCAAmCU,YAAcV,QAAQ,wBAAyBW,aAAeX,QAAQ,gBAAiBY,MAAQZ,QAAQ,YAClda,QAAU,SAAUC,EAAWC,EAAOC,EAAeC,GACrDC,KAAKJ,UAAYA,EACjBI,KAAKH,MAAQA,EACbG,KAAKC,YACLD,KAAKE,WAAa,KAClBF,KAAKG,YAAc,KACnBH,KAAKF,cAAgBA,EACrBE,KAAKI,mBAAmBL,GACxBC,KAAKK,WAAY,EACjBL,KAAKM,UAAUN,KAAKJ,UAAWI,MAC/BA,KAAKM,UAAUN,KAAKH,MAAOG,OAE/BL,QAAQY,UAAY,IAAI1B,KACxBc,QAAQY,UAAUC,KAAO,UACzBb,QAAQY,UAAUE,WAAY,EAC9Bd,QAAQY,UAAUG,cAAgB,WAC9B,OAAO,GAEXf,QAAQY,UAAUI,OAAS,SAAUC,GAC7BZ,KAAKa,MACLb,KAAKa,MAAQD,EAAQE,WAAWd,KAAKa,OAAO,GACrCb,KAAKJ,YACZI,KAAKJ,UAAYgB,EAAQE,WAAWd,KAAKJ,YAEzCI,KAAKH,OAASG,KAAKH,MAAMkB,SACzBf,KAAKH,MAAQe,EAAQE,WAAWd,KAAKH,SAG7CF,QAAQY,UAAUS,KAAO,SAAUC,GAC/B,IAAiBrB,EAAWsB,EAAQC,EAAUC,EAAGC,EAAaC,GAAwB,EACtF,GAAItB,KAAKJ,YAAcsB,EAASlB,KAAKJ,UAAUmB,QAAS,CAMpD,IALAnB,EAAY,IAAI2B,MAAML,GACtB1B,YAAYgC,OACRhB,KAAM,SACNiB,QAAS,6DAERL,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CACzBD,EAAWnB,KAAKJ,UAAUwB,GAAGJ,KAAKC,GAClC,IAAK,IAAIS,EAAI,EAAGA,EAAIP,EAASQ,SAASZ,OAAQW,IAC1C,GAAIP,EAASQ,SAASD,GAAGE,WAAY,CACjCP,GAAc,EACd,MAGRzB,EAAUwB,GAAKD,EACXA,EAASU,iBACTP,GAAwB,GAGhC,GAAID,EAAa,CACb,IAAIS,EAAmB,IAAIP,MAAML,GACjC,IAAKE,EAAI,EAAGA,EAAIF,EAAQE,IACpBD,EAAWvB,EAAUwB,GACrBU,EAAiBV,GAAKD,EAASY,MAAMd,GAEzCjB,KAAKgC,MAAMC,UAAUH,EAAiBI,KAAK,MAAO,aAActC,EAAU,GAAGuC,WAAYvC,EAAU,GAAGwC,WAAY,SAAUC,EAAKC,GACzHA,IACA1C,EAAYF,MAAM6C,aAAaD,MAI3C9C,YAAYgD,aAEZlB,GAAwB,EAE5B,IAAiJmB,EAAMC,EAAnJ7C,EAAQG,KAAKH,MAAQH,MAAMiD,UAAU3C,KAAKH,OAAS,KAAM+C,EAAU,IAAIjD,QAAQC,EAAWC,EAAOG,KAAKF,cAAeE,KAAKD,kBAC9H6C,EAAQC,gBAAkB7C,KAC1B4C,EAAQE,KAAO9C,KAAK8C,KACpBF,EAAQG,UAAY/C,KAAK+C,UACzBH,EAAQI,aAAehD,KAAKgD,aACxBhD,KAAKiD,YACLL,EAAQK,UAAYjD,KAAKiD,WAExB3B,IACDzB,EAAMkB,OAAS,GAEnB6B,EAAQM,iBAAmB,SAAUC,GAEjC,IADA,IAA8BC,EAA1BhC,EAAI,EAAGiC,EAAIF,EAAOpC,OACfK,IAAMiC,IAAKjC,EAEd,GADAgC,EAAQD,EAAO/B,GAAG8B,iBAEd,OAAOE,EAGf,OAAO7D,uBARgB,CASzB0B,EAAQkC,QAAQG,UAClB,IAAIC,EAAYtC,EAAQkC,OACxBI,EAAUC,QAAQZ,GAClB,IAAIa,EAAexC,EAAQrB,UACtB6D,IACDxC,EAAQrB,UAAY6D,MAExBA,EAAaD,QAAQxD,KAAKJ,YACtBgD,EAAQE,MAAQF,EAAQI,eAAiBJ,EAAQ9C,gBACjD8C,EAAQc,YAAYzC,GAExB,IAAI0C,EAAUf,EAAQ/C,MACtB,IAAKuB,EAAI,EAAGqB,EAAOkB,EAAQvC,GAAIA,IACvBqB,EAAKmB,YACLD,EAAQvC,GAAKqB,EAAKzB,KAAKC,IAG/B,IAAI4C,EAAkB5C,EAAQ6C,aAAe7C,EAAQ6C,YAAY/C,QAAU,EAC3E,IAAKK,EAAI,EAAGqB,EAAOkB,EAAQvC,GAAIA,IACT,cAAdqB,EAAKjC,MACLX,EAAQ4C,EAAKzB,KAAKC,GAAS8C,OAAO,SAAUC,GACxC,QAAIA,aAAajF,aAAeiF,EAAEC,YACtBrB,EAAQqB,SAASD,EAAEE,QAInCP,EAAQQ,OAAOC,MAAMT,GACjBvC,EACA,GACFiD,OAAOxE,IACTuB,GAAKvB,EAAMkB,OAAS,EACpB6B,EAAQ0B,cACa,iBAAd7B,EAAKjC,OACZX,EAAQ4C,EAAKzB,KAAKC,GAASpB,MAAMkE,OAAO,SAAUC,GAC9C,QAAIA,aAAajF,aAAeiF,EAAEC,YAKtCN,EAAQQ,OAAOC,MAAMT,GACjBvC,EACA,GACFiD,OAAOxE,IACTuB,GAAKvB,EAAMkB,OAAS,EACpB6B,EAAQ0B,cAGhB,IAAKlD,EAAI,EAAGqB,EAAOkB,EAAQvC,GAAIA,IACtBqB,EAAKmB,YACND,EAAQvC,GAAKqB,EAAOA,EAAKzB,KAAOyB,EAAKzB,KAAKC,GAAWwB,GAG7D,IAAKrB,EAAI,EAAGqB,EAAOkB,EAAQvC,GAAIA,IAC3B,GAAIqB,aAAgB9C,SAAW8C,EAAK7C,WAAuC,IAA1B6C,EAAK7C,UAAUmB,QACxD0B,EAAK7C,UAAU,IAAM6C,EAAK7C,UAAU,GAAG2E,uBAAwB,CAC/DZ,EAAQQ,OAAO/C,IAAK,GACpB,IAASM,EAAI,EAAGgB,EAAUD,EAAK5C,MAAM6B,GAAIA,IACjCgB,aAAmB7D,OACnB6D,EAAQtC,mBAAmBqC,EAAK1C,kBAC1B2C,aAAmB3D,aAAiB2D,EAAQuB,UAC9CN,EAAQQ,SAAS/C,EAAG,EAAGsB,IAS/C,GAFAa,EAAUiB,QACVf,EAAae,QACTvD,EAAQ6C,YACR,IAAK1C,EAAIyC,EAAiBzC,EAAIH,EAAQ6C,YAAY/C,OAAQK,IACtDH,EAAQ6C,YAAY1C,GAAGqD,gBAAgB7E,GAG/C,OAAOgD,GAEXjD,QAAQY,UAAUmD,YAAc,SAAUzC,GACtC,IAAwBG,EAAGsD,EAAvB7E,EAAQG,KAAKH,MACjB,GAAKA,EAGL,IAAKuB,EAAI,EAAGA,EAAIvB,EAAMkB,OAAQK,IACJ,WAAlBvB,EAAMuB,GAAGZ,QACTkE,EAAc7E,EAAMuB,GAAGJ,KAAKC,MACRyD,EAAY3D,QAAiC,IAAvB2D,EAAY3D,SAClDlB,EAAMsE,OAAOC,MAAMvE,GACfuB,EACA,GACFiD,OAAOK,IACTtD,GAAKsD,EAAY3D,OAAS,GAE1BlB,EAAMsE,OAAO/C,EAAG,EAAGsD,GAEvB1E,KAAKsE,eAIjB3E,QAAQY,UAAUoE,cAAgB,WAQ9B,OAPa,IAAIhF,QAAQK,KAAKJ,UAAWI,KAAKH,MAAM+E,IAAI,SAAUZ,GAC9D,OAAIA,EAAEW,cACKX,EAAEW,gBAEFX,IAEXhE,KAAKF,cAAeE,KAAKD,mBAGjCJ,QAAQY,UAAUsE,UAAY,SAAUC,GACpC,OAAQA,GAAwB,IAAhBA,EAAK/D,QAEzBpB,QAAQY,UAAUwE,eAAiB,SAAUD,EAAM7D,GAC/C,IAAI+D,EAAehF,KAAKJ,UAAUI,KAAKJ,UAAUmB,OAAS,GAC1D,QAAKiE,EAAanD,kBAGdmD,EAAaC,YAAcD,EAAaC,UAAUjE,KAAK,IAAI1B,SAAS4F,KAAKjE,EAASA,EAAQkC,WAKlGxD,QAAQY,UAAU+D,WAAa,WAC3BtE,KAAKmF,UAAY,KACjBnF,KAAKE,WAAa,KAClBF,KAAKG,YAAc,KACnBH,KAAKC,aAETN,QAAQY,UAAU6E,UAAY,WAiB1B,OAhBKpF,KAAKE,aACNF,KAAKE,WAAcF,KAAKH,MAAaG,KAAKH,MAAMwF,OAAO,SAAUC,EAAMtB,GAInE,GAHIA,aAAajF,cAA8B,IAAfiF,EAAEC,WAC9BqB,EAAKtB,EAAEE,MAAQF,GAEJ,WAAXA,EAAExD,MAAqBwD,EAAElB,MAAQkB,EAAElB,KAAKsC,UAAW,CACnD,IAAIG,EAAOvB,EAAElB,KAAKsC,YAClB,IAAK,IAAIlB,KAAQqB,EACTA,EAAKC,eAAetB,KACpBoB,EAAKpB,GAAQF,EAAElB,KAAKmB,SAASC,IAIzC,OAAOoB,WAGRtF,KAAKE,YAEhBP,QAAQY,UAAUkF,WAAa,WAc3B,OAbKzF,KAAKG,cACNH,KAAKG,YAAeH,KAAKH,MAAaG,KAAKH,MAAMwF,OAAO,SAAUC,EAAMtB,GACpE,GAAIA,aAAajF,cAA8B,IAAfiF,EAAEC,SAAmB,CACjD,IAAIC,EAAyB,IAAlBF,EAAEE,KAAKnD,QAAgBiD,EAAEE,KAAK,aAAclF,QAAUgF,EAAEE,KAAK,GAAGwB,MAAQ1B,EAAEE,KAChFoB,EAAK,IAAMpB,GAGZoB,EAAK,IAAMpB,GAAMyB,KAAK3B,GAFtBsB,EAAK,IAAMpB,IAASF,GAK5B,OAAOsB,WAGRtF,KAAKG,aAEhBR,QAAQY,UAAU0D,SAAW,SAAUC,GACnC,IAAI0B,EAAO5F,KAAKoF,YAAYlB,GAC5B,GAAI0B,EACA,OAAO5F,KAAK6F,WAAWD,IAG/BjG,QAAQY,UAAUuF,SAAW,SAAU5B,GACnC,IAAI0B,EAAO5F,KAAKyF,aAAavB,GAC7B,GAAI0B,EACA,OAAO5F,KAAK6F,WAAWD,IAG/BjG,QAAQY,UAAUwF,gBAAkB,WAChC,IAAK,IAAI3E,EAAIpB,KAAKH,MAAMkB,OAAQK,EAAI,EAAGA,IAAK,CACxC,IAAIwE,EAAO5F,KAAKH,MAAMuB,EAAI,GAC1B,GAAIwE,aAAgB7G,YAChB,OAAOiB,KAAK6F,WAAWD,KAInCjG,QAAQY,UAAUsF,WAAa,SAAUG,GACrC,IAAIC,EAAOjG,KACX,SAASkG,EAAqBN,GAC1B,OAAIA,EAAKF,iBAAiBrG,YAAcuG,EAAKO,QACT,iBAArBP,EAAKF,MAAMA,MAClB1F,KAAKgC,MAAMC,UAAU2D,EAAKF,MAAMA,OAC5B,QACA,aACDE,EAAKF,MAAMvD,WAAYyD,EAAKxD,WAAY,SAAUC,EAAKC,GAClDD,IACAuD,EAAKO,QAAS,GAEd7D,IACAsD,EAAKF,MAAQpD,EAAO,GACpBsD,EAAKQ,UAAY9D,EAAO,IAAM,GAC9BsD,EAAKO,QAAS,KAItBP,EAAKO,QAAS,EAEXP,GAEAA,EAGf,GAAKrE,MAAM8E,QAAQL,GAEZ,CACH,IAAIM,KAIJ,OAHAN,EAAQO,QAAQ,SAAUlD,GACtBiD,EAAMX,KAAKO,EAAqBM,KAAKP,EAAM5C,MAExCiD,EANP,OAAOJ,EAAqBM,KAAKP,EAAMD,IAS/CrG,QAAQY,UAAUkG,SAAW,WACzB,IAAKzG,KAAKH,MACN,SAEJ,IAAwCuB,EAAGqB,EAAvCiE,KAAgB7G,EAAQG,KAAKH,MACjC,IAAKuB,EAAI,EAAGqB,EAAO5C,EAAMuB,GAAIA,IACrBqB,EAAKhC,WACLiG,EAAUf,KAAKlD,GAGvB,OAAOiE,GAEX/G,QAAQY,UAAUoG,YAAc,SAAUlE,GACtC,IAAI5C,EAAQG,KAAKH,MACbA,EACAA,EAAM2D,QAAQf,GAEdzC,KAAKH,OAAS4C,GAElBzC,KAAKM,UAAUmC,EAAMzC,OAEzBL,QAAQY,UAAUqG,KAAO,SAAUzF,EAAU8E,EAAMlC,GAC/CkC,EAAOA,GAAQjG,KACf,IAAgB6G,EAAOC,EAAnBjH,KAAgCkH,EAAM5F,EAASY,QACnD,OAAIgF,KAAO/G,KAAKC,SACLD,KAAKC,SAAS8G,IAEzB/G,KAAKyG,WAAWF,QAAQ,SAAU9D,GAC9B,GAAIA,IAASwD,EACT,IAAK,IAAIvE,EAAI,EAAGA,EAAIe,EAAK7C,UAAUmB,OAAQW,IAEvC,GADAmF,EAAQ1F,EAAS0F,MAAMpE,EAAK7C,UAAU8B,IAC3B,CACP,GAAIP,EAASQ,SAASZ,OAAS8F,GAC3B,IAAK9C,GAAUA,EAAOtB,GAAO,CACzBqE,EAAcrE,EAAKmE,KAAK,IAAIzH,SAASgC,EAASQ,SAASqF,MAAMH,IAASZ,EAAMlC,GAC5E,IAAK,IAAI3C,EAAI,EAAGA,EAAI0F,EAAY/F,SAAUK,EACtC0F,EAAY1F,GAAG6F,KAAKtB,KAAKlD,GAE7BlB,MAAMhB,UAAUoF,KAAKvB,MAAMvE,EAAOiH,SAGtCjH,EAAM8F,MACFlD,KAAMA,EACNwE,UAGR,SAKhBjH,KAAKC,SAAS8G,GAAOlH,EACdA,IAEXF,QAAQY,UAAU2G,OAAS,SAAUjG,EAASkG,GAC1C,IAAI/F,EAAGM,EAA0CuB,EAAWR,EAAMwE,EAAjCG,KACjCnG,EAAQoG,SAAWpG,EAAQoG,UAAY,EAClCrH,KAAK8C,MACN7B,EAAQoG,WAEZ,IAAyJC,EAArJC,EAAatG,EAAQuG,SAAW,GAAKjG,MAAMN,EAAQoG,SAAW,GAAGnF,KAAK,MAAOuF,EAAYxG,EAAQuG,SAAW,GAAKjG,MAAMN,EAAQoG,UAAUnF,KAAK,MAC9IwF,EAAmB,EACnBC,EAAkB,EACtB,IAAKvG,EAAI,EAAGqB,EAAOzC,KAAKH,MAAMuB,GAAIA,IAC1BqB,aAAgBxD,SACZ0I,IAAoBvG,GACpBuG,IAEJP,EAAUzB,KAAKlD,IACRA,EAAKmF,WAAanF,EAAKmF,aAC9BR,EAAUjD,OAAOuD,EAAkB,EAAGjF,GACtCiF,IACAC,KACqB,WAAdlF,EAAKjC,MACZ4G,EAAUjD,OAAOwD,EAAiB,EAAGlF,GACrCkF,KAEAP,EAAUzB,KAAKlD,GAIvB,GADA2E,KAA6B/C,OAAO+C,IAC/BpH,KAAK8C,KAAM,EACZG,EAAYxD,aAAawB,EAASjB,KAAMyH,MAEpCN,EAAOU,IAAI5E,GACXkE,EAAOU,IAAIJ,IAEf,IAAgDK,EAA5CjH,EAAQb,KAAKa,MAAOkH,EAAUlH,EAAME,OAExC,IADAuG,EAAMrG,EAAQuG,SAAW,IAAM,MAAQC,EAClCrG,EAAI,EAAGA,EAAI2G,EAAS3G,IAErB,GAAM0G,GADNb,EAAOpG,EAAMO,IACWL,OASxB,IANIK,EAAI,GACJ+F,EAAOU,IAAIP,GAEfrG,EAAQ+G,eAAgB,EACxBf,EAAK,GAAGC,OAAOjG,EAASkG,GACxBlG,EAAQ+G,eAAgB,EACnBtG,EAAI,EAAGA,EAAIoG,EAAYpG,IACxBuF,EAAKvF,GAAGwF,OAAOjG,EAASkG,GAGhCA,EAAOU,KAAK5G,EAAQuG,SAAW,IAAM,QAAUD,GAEnD,IAAKnG,EAAI,EAAGqB,EAAO2E,EAAUhG,GAAIA,IAAK,CAC9BA,EAAI,IAAMgG,EAAUrG,SACpBE,EAAQgH,UAAW,GAEvB,IAAIC,EAAkBjH,EAAQgH,SAC1BxF,EAAK/B,cAAc+B,KACnBxB,EAAQgH,UAAW,GAEnBxF,EAAKyE,OACLzE,EAAKyE,OAAOjG,EAASkG,GACd1E,EAAKiD,OACZyB,EAAOU,IAAIpF,EAAKiD,MAAMyC,YAE1BlH,EAAQgH,SAAWC,GACdjH,EAAQgH,UAAYxF,EAAK2F,YAC1BjB,EAAOU,IAAI5G,EAAQuG,SAAW,GAAK,KAAOD,GAE1CtG,EAAQgH,UAAW,EAGtBjI,KAAK8C,OACNqE,EAAOU,IAAI5G,EAAQuG,SAAW,IAAM,KAAOC,EAAY,KACvDxG,EAAQoG,YAEPF,EAAOkB,WAAcpH,EAAQuG,WAAYxH,KAAK+C,WAC/CoE,EAAOU,IAAI,OAGnBlI,QAAQY,UAAU+H,cAAgB,SAAUzH,EAAOI,EAASrB,GACxD,IAAK,IAAI2I,EAAI,EAAGA,EAAI3I,EAAUmB,OAAQwH,IAClCvI,KAAKwI,aAAa3H,EAAOI,EAASrB,EAAU2I,KAGpD5I,QAAQY,UAAUiI,aAAe,SAAU3H,EAAOI,EAASE,GACvD,SAASsH,EAAkBC,EAAeC,GACtC,IAAIC,EAAkBlH,EACtB,GAA6B,IAAzBgH,EAAc3H,OACd6H,EAAmB,IAAI1J,MAAMwJ,EAAc,QACxC,CACH,IAAIG,EAAe,IAAItH,MAAMmH,EAAc3H,QAC3C,IAAKW,EAAI,EAAGA,EAAIgH,EAAc3H,OAAQW,IAClCmH,EAAanH,GAAK,IAAItC,QAAQ,KAAMsJ,EAAchH,GAAIiH,EAAgB/G,WAAY+G,EAAgBG,OAAQH,EAAgBI,WAE9HH,EAAmB,IAAI1J,MAAM,IAAIC,SAAS0J,IAE9C,OAAOD,EAEX,SAASI,EAAeC,EAAkBN,GACtC,IAAIO,EAGJ,OAFAA,EAAU,IAAI9J,QAAQ,KAAM6J,EAAkBN,EAAgB/G,WAAY+G,EAAgBG,OAAQH,EAAgBI,WACvG,IAAI5J,UAAU+J,IAG7B,SAASC,EAAuBC,EAAeC,EAASC,EAAiBC,GACrE,IAAIC,EAAiBxE,EAAcyE,EASnC,GARAD,KACIJ,EAAcrI,OAAS,GAEvBiE,GADAwE,EAAkB9J,MAAMiD,UAAUyG,IACHM,MAC/BD,EAAoBF,EAAiBI,cAAcjK,MAAMiD,UAAUqC,EAAarD,YAEhF8H,EAAoBF,EAAiBI,kBAErCN,EAAQtI,OAAS,EAAG,CACpB,IAAI6I,EAAaN,EAAgBM,WAAYC,EAAWR,EAAQ,GAAG1H,SAAS,GACxEiI,EAAWE,oBAAsBD,EAASD,WAAWE,oBACrDF,EAAaC,EAASD,YAE1BH,EAAkB9H,SAASgE,KAAK,IAAIvG,QAAQwK,EAAYC,EAASnE,MAAO4D,EAAgB1H,WAAY0H,EAAgBR,OAAQQ,EAAgBP,YAC5IU,EAAkB9H,SAAW8H,EAAkB9H,SAAS0C,OAAOgF,EAAQ,GAAG1H,SAASqF,MAAM,IAK7F,GAH0C,IAAtCyC,EAAkB9H,SAASZ,QAC3ByI,EAAgB7D,KAAK8D,GAErBJ,EAAQtI,OAAS,EAAG,CACpB,IAAIgJ,EAAaV,EAAQrC,MAAM,GAC/B+C,EAAaA,EAAWnF,IAAI,SAAUzD,GAClC,OAAOA,EAASwI,cAAcxI,EAASQ,eAE3C6H,EAAkBA,EAAgBnF,OAAO0F,GAE7C,OAAOP,EAEX,SAASQ,EAA2BZ,EAAea,EAAUX,EAAiBC,EAAkBjH,GAC5F,IAAIZ,EACJ,IAAKA,EAAI,EAAGA,EAAI0H,EAAcrI,OAAQW,IAAK,CACvC,IAAI8H,EAAkBL,EAAuBC,EAAc1H,GAAIuI,EAAUX,EAAiBC,GAC1FjH,EAAOqD,KAAK6D,GAEhB,OAAOlH,EAEX,SAAS4H,EAA2BvI,EAAU/B,GAC1C,IAAIwB,EAAG+I,EACP,GAAwB,IAApBxI,EAASZ,OAGb,GAAyB,IAArBnB,EAAUmB,OAId,IAAKK,EAAI,EAAG+I,EAAMvK,EAAUwB,GAAIA,IACxB+I,EAAIpJ,OAAS,EACboJ,EAAIA,EAAIpJ,OAAS,GAAKoJ,EAAIA,EAAIpJ,OAAS,GAAG4I,cAAcQ,EAAIA,EAAIpJ,OAAS,GAAGY,SAAS0C,OAAO1C,IAE5FwI,EAAIxE,KAAK,IAAIxG,SAASwC,SAP1B/B,EAAU+F,MAAM,IAAIxG,SAASwC,KA4ErC,SAASyI,EAAerK,EAAgBsK,GACpC,IAAIC,EAAcD,EAAWV,cAAcU,EAAW1I,SAAU0I,EAAWE,WAAYF,EAAWxI,gBAElG,OADAyI,EAAYlK,mBAAmBL,GACxBuK,EAEX,IAAIlJ,EAAGoJ,EAGP,IAzEA,SAASC,EAAsB5J,EAAOI,EAASyJ,GAC3C,IAAItJ,EAAGM,EAAGiJ,EAAGC,EAAiBC,EAAcC,EAAqBX,EAAKY,EAA+BhK,EAAQiE,EACjFkE,EACpB8B,EAFkEC,GAAoB,EAc9F,IAFAL,KACAC,OACKzJ,EAAI,EAAG2J,EAAKL,EAAW/I,SAASP,GAAIA,IACrC,GAAiB,MAAb2J,EAAGrF,MAAe,CAClB,IAAIwF,GAdJF,OAAAA,GADoB9B,EAeoB6B,GAb9BrF,iBAAiBxG,QAG/B8L,EAAgB9B,EAAQxD,MAAMA,iBACCvG,SAGxB6L,EANI,MAaP,GAAsB,MAAlBE,EAAwB,CACxBhB,EAA2BU,EAAiBC,GAC5C,IAAsBM,EAAlBC,KAA4BC,KAGhC,IAFAF,EAAWV,EAAsBW,EAAanK,EAASiK,GACvDD,EAAoBA,GAAqBE,EACpCR,EAAI,EAAGA,EAAIS,EAAYrK,OAAQ4J,IAEhCX,EAA2Ba,GADD7B,EAAeP,EAAkB2C,EAAYT,GAAII,GAAKA,IAChBA,EAAIL,EAAYW,GAEpFR,EAAeQ,EACfT,UAEAA,EAAgBjF,KAAKoF,OAEtB,CAIH,IAHAE,GAAoB,EACpBH,KACAZ,EAA2BU,EAAiBC,GACvCnJ,EAAI,EAAGA,EAAImJ,EAAa9J,OAAQW,IAEjC,GADAyI,EAAMU,EAAanJ,GACI,IAAnBT,EAAQF,OACJoJ,EAAIpJ,OAAS,GACboJ,EAAI,GAAGxI,SAASgE,KAAK,IAAIvG,QAAQ2L,EAAGnB,WAAY,GAAImB,EAAGnJ,WAAYmJ,EAAGjC,OAAQiC,EAAGhC,YAErF+B,EAAoBnF,KAAKwE,QAEzB,IAAKQ,EAAI,EAAGA,EAAI1J,EAAQF,OAAQ4J,IAAK,CACjC,IAAInB,EAAkBL,EAAuBgB,EAAKlJ,EAAQ0J,GAAII,EAAIL,GAClEI,EAAoBnF,KAAK6D,GAIrCqB,EAAeC,EACfF,KAIR,IADAV,EAA2BU,EAAiBC,GACvCzJ,EAAI,EAAGA,EAAIyJ,EAAa9J,OAAQK,KACjCL,EAAS8J,EAAazJ,GAAGL,QACZ,IACTF,EAAM8E,KAAKkF,EAAazJ,IACxB4D,EAAe6F,EAAazJ,GAAGL,EAAS,GACxC8J,EAAazJ,GAAGL,EAAS,GAAKiE,EAAa2E,cAAc3E,EAAarD,SAAU+I,EAAWH,aAGnG,OAAOU,EASSR,CADpBD,KACoDvJ,EAASE,GAEzD,GAAIF,EAAQF,OAAS,EAEjB,IADAyJ,KACKpJ,EAAI,EAAGA,EAAIH,EAAQF,OAAQK,IAAK,CACjC,IAAIkK,EAAerK,EAAQG,GAAGwD,IAAIwF,EAAemB,KAAKvL,KAAMmB,EAASpB,mBACrEuL,EAAa3F,KAAKxE,GAClBqJ,EAAS7E,KAAK2F,QAGlBd,IAAarJ,IAGrB,IAAKC,EAAI,EAAGA,EAAIoJ,EAASzJ,OAAQK,IAC7BP,EAAM8E,KAAK6E,EAASpJ,KAG5BoK,OAAOC,QAAU9L","file":"../../../engine/tree/ruleset.js","sourcesContent":["var Node = require('./node'), Declaration = require('./declaration'), Keyword = require('./keyword'), Comment = require('./comment'), Paren = require('./paren'), Selector = require('./selector'), Element = require('./element'), Anonymous = require('./anonymous'), contexts = require('../contexts'), globalFunctionRegistry = require('../functions/function-registry'), defaultFunc = require('../functions/default'), getDebugInfo = require('./debug-info'), utils = require('../utils');\nvar Ruleset = function (selectors, rules, strictImports, visibilityInfo) {\n    this.selectors = selectors;\n    this.rules = rules;\n    this._lookups = {};\n    this._variables = null;\n    this._properties = null;\n    this.strictImports = strictImports;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n    this.setParent(this.selectors, this);\n    this.setParent(this.rules, this);\n};\nRuleset.prototype = new Node();\nRuleset.prototype.type = 'Ruleset';\nRuleset.prototype.isRuleset = true;\nRuleset.prototype.isRulesetLike = function () {\n    return true;\n};\nRuleset.prototype.accept = function (visitor) {\n    if (this.paths) {\n        this.paths = visitor.visitArray(this.paths, true);\n    } else if (this.selectors) {\n        this.selectors = visitor.visitArray(this.selectors);\n    }\n    if (this.rules && this.rules.length) {\n        this.rules = visitor.visitArray(this.rules);\n    }\n};\nRuleset.prototype.eval = function (context) {\n    var that = this, selectors, selCnt, selector, i, hasVariable, hasOnePassingSelector = false;\n    if (this.selectors && (selCnt = this.selectors.length)) {\n        selectors = new Array(selCnt);\n        defaultFunc.error({\n            type: 'Syntax',\n            message: 'it is currently only allowed in parametric mixin guards,'\n        });\n        for (i = 0; i < selCnt; i++) {\n            selector = this.selectors[i].eval(context);\n            for (var j = 0; j < selector.elements.length; j++) {\n                if (selector.elements[j].isVariable) {\n                    hasVariable = true;\n                    break;\n                }\n            }\n            selectors[i] = selector;\n            if (selector.evaldCondition) {\n                hasOnePassingSelector = true;\n            }\n        }\n        if (hasVariable) {\n            var toParseSelectors = new Array(selCnt);\n            for (i = 0; i < selCnt; i++) {\n                selector = selectors[i];\n                toParseSelectors[i] = selector.toCSS(context);\n            }\n            this.parse.parseNode(toParseSelectors.join(','), ['selectors'], selectors[0].getIndex(), selectors[0].fileInfo(), function (err, result) {\n                if (result) {\n                    selectors = utils.flattenArray(result);\n                }\n            });\n        }\n        defaultFunc.reset();\n    } else {\n        hasOnePassingSelector = true;\n    }\n    var rules = this.rules ? utils.copyArray(this.rules) : null, ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()), rule, subRule;\n    ruleset.originalRuleset = this;\n    ruleset.root = this.root;\n    ruleset.firstRoot = this.firstRoot;\n    ruleset.allowImports = this.allowImports;\n    if (this.debugInfo) {\n        ruleset.debugInfo = this.debugInfo;\n    }\n    if (!hasOnePassingSelector) {\n        rules.length = 0;\n    }\n    ruleset.functionRegistry = function (frames) {\n        var i = 0, n = frames.length, found;\n        for (; i !== n; ++i) {\n            found = frames[i].functionRegistry;\n            if (found) {\n                return found;\n            }\n        }\n        return globalFunctionRegistry;\n    }(context.frames).inherit();\n    var ctxFrames = context.frames;\n    ctxFrames.unshift(ruleset);\n    var ctxSelectors = context.selectors;\n    if (!ctxSelectors) {\n        context.selectors = ctxSelectors = [];\n    }\n    ctxSelectors.unshift(this.selectors);\n    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n        ruleset.evalImports(context);\n    }\n    var rsRules = ruleset.rules;\n    for (i = 0; rule = rsRules[i]; i++) {\n        if (rule.evalFirst) {\n            rsRules[i] = rule.eval(context);\n        }\n    }\n    var mediaBlockCount = context.mediaBlocks && context.mediaBlocks.length || 0;\n    for (i = 0; rule = rsRules[i]; i++) {\n        if (rule.type === 'MixinCall') {\n            rules = rule.eval(context).filter(function (r) {\n                if (r instanceof Declaration && r.variable) {\n                    return !ruleset.variable(r.name);\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [\n                i,\n                1\n            ].concat(rules));\n            i += rules.length - 1;\n            ruleset.resetCache();\n        } else if (rule.type === 'VariableCall') {\n            rules = rule.eval(context).rules.filter(function (r) {\n                if (r instanceof Declaration && r.variable) {\n                    return false;\n                }\n                return true;\n            });\n            rsRules.splice.apply(rsRules, [\n                i,\n                1\n            ].concat(rules));\n            i += rules.length - 1;\n            ruleset.resetCache();\n        }\n    }\n    for (i = 0; rule = rsRules[i]; i++) {\n        if (!rule.evalFirst) {\n            rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n        }\n    }\n    for (i = 0; rule = rsRules[i]; i++) {\n        if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n            if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                rsRules.splice(i--, 1);\n                for (var j = 0; subRule = rule.rules[j]; j++) {\n                    if (subRule instanceof Node) {\n                        subRule.copyVisibilityInfo(rule.visibilityInfo());\n                        if (!(subRule instanceof Declaration) || !subRule.variable) {\n                            rsRules.splice(++i, 0, subRule);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ctxFrames.shift();\n    ctxSelectors.shift();\n    if (context.mediaBlocks) {\n        for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n            context.mediaBlocks[i].bubbleSelectors(selectors);\n        }\n    }\n    return ruleset;\n};\nRuleset.prototype.evalImports = function (context) {\n    var rules = this.rules, i, importRules;\n    if (!rules) {\n        return;\n    }\n    for (i = 0; i < rules.length; i++) {\n        if (rules[i].type === 'Import') {\n            importRules = rules[i].eval(context);\n            if (importRules && (importRules.length || importRules.length === 0)) {\n                rules.splice.apply(rules, [\n                    i,\n                    1\n                ].concat(importRules));\n                i += importRules.length - 1;\n            } else {\n                rules.splice(i, 1, importRules);\n            }\n            this.resetCache();\n        }\n    }\n};\nRuleset.prototype.makeImportant = function () {\n    var result = new Ruleset(this.selectors, this.rules.map(function (r) {\n        if (r.makeImportant) {\n            return r.makeImportant();\n        } else {\n            return r;\n        }\n    }), this.strictImports, this.visibilityInfo());\n    return result;\n};\nRuleset.prototype.matchArgs = function (args) {\n    return !args || args.length === 0;\n};\nRuleset.prototype.matchCondition = function (args, context) {\n    var lastSelector = this.selectors[this.selectors.length - 1];\n    if (!lastSelector.evaldCondition) {\n        return false;\n    }\n    if (lastSelector.condition && !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {\n        return false;\n    }\n    return true;\n};\nRuleset.prototype.resetCache = function () {\n    this._rulesets = null;\n    this._variables = null;\n    this._properties = null;\n    this._lookups = {};\n};\nRuleset.prototype.variables = function () {\n    if (!this._variables) {\n        this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Declaration && r.variable === true) {\n                hash[r.name] = r;\n            }\n            if (r.type === 'Import' && r.root && r.root.variables) {\n                var vars = r.root.variables();\n                for (var name in vars) {\n                    if (vars.hasOwnProperty(name)) {\n                        hash[name] = r.root.variable(name);\n                    }\n                }\n            }\n            return hash;\n        }, {});\n    }\n    return this._variables;\n};\nRuleset.prototype.properties = function () {\n    if (!this._properties) {\n        this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Declaration && r.variable !== true) {\n                var name = r.name.length === 1 && r.name[0] instanceof Keyword ? r.name[0].value : r.name;\n                if (!hash['$' + name]) {\n                    hash['$' + name] = [r];\n                } else {\n                    hash['$' + name].push(r);\n                }\n            }\n            return hash;\n        }, {});\n    }\n    return this._properties;\n};\nRuleset.prototype.variable = function (name) {\n    var decl = this.variables()[name];\n    if (decl) {\n        return this.parseValue(decl);\n    }\n};\nRuleset.prototype.property = function (name) {\n    var decl = this.properties()[name];\n    if (decl) {\n        return this.parseValue(decl);\n    }\n};\nRuleset.prototype.lastDeclaration = function () {\n    for (var i = this.rules.length; i > 0; i--) {\n        var decl = this.rules[i - 1];\n        if (decl instanceof Declaration) {\n            return this.parseValue(decl);\n        }\n    }\n};\nRuleset.prototype.parseValue = function (toParse) {\n    var self = this;\n    function transformDeclaration(decl) {\n        if (decl.value instanceof Anonymous && !decl.parsed) {\n            if (typeof decl.value.value === 'string') {\n                this.parse.parseNode(decl.value.value, [\n                    'value',\n                    'important'\n                ], decl.value.getIndex(), decl.fileInfo(), function (err, result) {\n                    if (err) {\n                        decl.parsed = true;\n                    }\n                    if (result) {\n                        decl.value = result[0];\n                        decl.important = result[1] || '';\n                        decl.parsed = true;\n                    }\n                });\n            } else {\n                decl.parsed = true;\n            }\n            return decl;\n        } else {\n            return decl;\n        }\n    }\n    if (!Array.isArray(toParse)) {\n        return transformDeclaration.call(self, toParse);\n    } else {\n        var nodes = [];\n        toParse.forEach(function (n) {\n            nodes.push(transformDeclaration.call(self, n));\n        });\n        return nodes;\n    }\n};\nRuleset.prototype.rulesets = function () {\n    if (!this.rules) {\n        return [];\n    }\n    var filtRules = [], rules = this.rules, i, rule;\n    for (i = 0; rule = rules[i]; i++) {\n        if (rule.isRuleset) {\n            filtRules.push(rule);\n        }\n    }\n    return filtRules;\n};\nRuleset.prototype.prependRule = function (rule) {\n    var rules = this.rules;\n    if (rules) {\n        rules.unshift(rule);\n    } else {\n        this.rules = [rule];\n    }\n    this.setParent(rule, this);\n};\nRuleset.prototype.find = function (selector, self, filter) {\n    self = self || this;\n    var rules = [], match, foundMixins, key = selector.toCSS();\n    if (key in this._lookups) {\n        return this._lookups[key];\n    }\n    this.rulesets().forEach(function (rule) {\n        if (rule !== self) {\n            for (var j = 0; j < rule.selectors.length; j++) {\n                match = selector.match(rule.selectors[j]);\n                if (match) {\n                    if (selector.elements.length > match) {\n                        if (!filter || filter(rule)) {\n                            foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                            for (var i = 0; i < foundMixins.length; ++i) {\n                                foundMixins[i].path.push(rule);\n                            }\n                            Array.prototype.push.apply(rules, foundMixins);\n                        }\n                    } else {\n                        rules.push({\n                            rule: rule,\n                            path: []\n                        });\n                    }\n                    break;\n                }\n            }\n        }\n    });\n    this._lookups[key] = rules;\n    return rules;\n};\nRuleset.prototype.genCSS = function (context, output) {\n    var i, j, charsetRuleNodes = [], ruleNodes = [], debugInfo, rule, path;\n    context.tabLevel = context.tabLevel || 0;\n    if (!this.root) {\n        context.tabLevel++;\n    }\n    var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  '), tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  '), sep;\n    var charsetNodeIndex = 0;\n    var importNodeIndex = 0;\n    for (i = 0; rule = this.rules[i]; i++) {\n        if (rule instanceof Comment) {\n            if (importNodeIndex === i) {\n                importNodeIndex++;\n            }\n            ruleNodes.push(rule);\n        } else if (rule.isCharset && rule.isCharset()) {\n            ruleNodes.splice(charsetNodeIndex, 0, rule);\n            charsetNodeIndex++;\n            importNodeIndex++;\n        } else if (rule.type === 'Import') {\n            ruleNodes.splice(importNodeIndex, 0, rule);\n            importNodeIndex++;\n        } else {\n            ruleNodes.push(rule);\n        }\n    }\n    ruleNodes = charsetRuleNodes.concat(ruleNodes);\n    if (!this.root) {\n        debugInfo = getDebugInfo(context, this, tabSetStr);\n        if (debugInfo) {\n            output.add(debugInfo);\n            output.add(tabSetStr);\n        }\n        var paths = this.paths, pathCnt = paths.length, pathSubCnt;\n        sep = context.compress ? ',' : ',\\n' + tabSetStr;\n        for (i = 0; i < pathCnt; i++) {\n            path = paths[i];\n            if (!(pathSubCnt = path.length)) {\n                continue;\n            }\n            if (i > 0) {\n                output.add(sep);\n            }\n            context.firstSelector = true;\n            path[0].genCSS(context, output);\n            context.firstSelector = false;\n            for (j = 1; j < pathSubCnt; j++) {\n                path[j].genCSS(context, output);\n            }\n        }\n        output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n    }\n    for (i = 0; rule = ruleNodes[i]; i++) {\n        if (i + 1 === ruleNodes.length) {\n            context.lastRule = true;\n        }\n        var currentLastRule = context.lastRule;\n        if (rule.isRulesetLike(rule)) {\n            context.lastRule = false;\n        }\n        if (rule.genCSS) {\n            rule.genCSS(context, output);\n        } else if (rule.value) {\n            output.add(rule.value.toString());\n        }\n        context.lastRule = currentLastRule;\n        if (!context.lastRule && rule.isVisible()) {\n            output.add(context.compress ? '' : '\\n' + tabRuleStr);\n        } else {\n            context.lastRule = false;\n        }\n    }\n    if (!this.root) {\n        output.add(context.compress ? '}' : '\\n' + tabSetStr + '}');\n        context.tabLevel--;\n    }\n    if (!output.isEmpty() && !context.compress && this.firstRoot) {\n        output.add('\\n');\n    }\n};\nRuleset.prototype.joinSelectors = function (paths, context, selectors) {\n    for (var s = 0; s < selectors.length; s++) {\n        this.joinSelector(paths, context, selectors[s]);\n    }\n};\nRuleset.prototype.joinSelector = function (paths, context, selector) {\n    function createParenthesis(elementsToPak, originalElement) {\n        var replacementParen, j;\n        if (elementsToPak.length === 0) {\n            replacementParen = new Paren(elementsToPak[0]);\n        } else {\n            var insideParent = new Array(elementsToPak.length);\n            for (j = 0; j < elementsToPak.length; j++) {\n                insideParent[j] = new Element(null, elementsToPak[j], originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n            }\n            replacementParen = new Paren(new Selector(insideParent));\n        }\n        return replacementParen;\n    }\n    function createSelector(containedElement, originalElement) {\n        var element, selector;\n        element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n        selector = new Selector([element]);\n        return selector;\n    }\n    function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n        var newSelectorPath, lastSelector, newJoinedSelector;\n        newSelectorPath = [];\n        if (beginningPath.length > 0) {\n            newSelectorPath = utils.copyArray(beginningPath);\n            lastSelector = newSelectorPath.pop();\n            newJoinedSelector = originalSelector.createDerived(utils.copyArray(lastSelector.elements));\n        } else {\n            newJoinedSelector = originalSelector.createDerived([]);\n        }\n        if (addPath.length > 0) {\n            var combinator = replacedElement.combinator, parentEl = addPath[0].elements[0];\n            if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                combinator = parentEl.combinator;\n            }\n            newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.isVariable, replacedElement._index, replacedElement._fileInfo));\n            newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n        }\n        if (newJoinedSelector.elements.length !== 0) {\n            newSelectorPath.push(newJoinedSelector);\n        }\n        if (addPath.length > 1) {\n            var restOfPath = addPath.slice(1);\n            restOfPath = restOfPath.map(function (selector) {\n                return selector.createDerived(selector.elements, []);\n            });\n            newSelectorPath = newSelectorPath.concat(restOfPath);\n        }\n        return newSelectorPath;\n    }\n    function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {\n        var j;\n        for (j = 0; j < beginningPath.length; j++) {\n            var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n            result.push(newSelectorPath);\n        }\n        return result;\n    }\n    function mergeElementsOnToSelectors(elements, selectors) {\n        var i, sel;\n        if (elements.length === 0) {\n            return;\n        }\n        if (selectors.length === 0) {\n            selectors.push([new Selector(elements)]);\n            return;\n        }\n        for (i = 0; sel = selectors[i]; i++) {\n            if (sel.length > 0) {\n                sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n            } else {\n                sel.push(new Selector(elements));\n            }\n        }\n    }\n    function replaceParentSelector(paths, context, inSelector) {\n        var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\n        function findNestedSelector(element) {\n            var maybeSelector;\n            if (!(element.value instanceof Paren)) {\n                return null;\n            }\n            maybeSelector = element.value.value;\n            if (!(maybeSelector instanceof Selector)) {\n                return null;\n            }\n            return maybeSelector;\n        }\n        currentElements = [];\n        newSelectors = [[]];\n        for (i = 0; el = inSelector.elements[i]; i++) {\n            if (el.value !== '&') {\n                var nestedSelector = findNestedSelector(el);\n                if (nestedSelector != null) {\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n                    var nestedPaths = [], replaced, replacedNewSelectors = [];\n                    replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                    hadParentSelector = hadParentSelector || replaced;\n                    for (k = 0; k < nestedPaths.length; k++) {\n                        var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                        addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                    }\n                    newSelectors = replacedNewSelectors;\n                    currentElements = [];\n                } else {\n                    currentElements.push(el);\n                }\n            } else {\n                hadParentSelector = true;\n                selectorsMultiplied = [];\n                mergeElementsOnToSelectors(currentElements, newSelectors);\n                for (j = 0; j < newSelectors.length; j++) {\n                    sel = newSelectors[j];\n                    if (context.length === 0) {\n                        if (sel.length > 0) {\n                            sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                        }\n                        selectorsMultiplied.push(sel);\n                    } else {\n                        for (k = 0; k < context.length; k++) {\n                            var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                            selectorsMultiplied.push(newSelectorPath);\n                        }\n                    }\n                }\n                newSelectors = selectorsMultiplied;\n                currentElements = [];\n            }\n        }\n        mergeElementsOnToSelectors(currentElements, newSelectors);\n        for (i = 0; i < newSelectors.length; i++) {\n            length = newSelectors[i].length;\n            if (length > 0) {\n                paths.push(newSelectors[i]);\n                lastSelector = newSelectors[i][length - 1];\n                newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n            }\n        }\n        return hadParentSelector;\n    }\n    function deriveSelector(visibilityInfo, deriveFrom) {\n        var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n        newSelector.copyVisibilityInfo(visibilityInfo);\n        return newSelector;\n    }\n    var i, newPaths, hadParentSelector;\n    newPaths = [];\n    hadParentSelector = replaceParentSelector(newPaths, context, selector);\n    if (!hadParentSelector) {\n        if (context.length > 0) {\n            newPaths = [];\n            for (i = 0; i < context.length; i++) {\n                var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n                concatenated.push(selector);\n                newPaths.push(concatenated);\n            }\n        } else {\n            newPaths = [[selector]];\n        }\n    }\n    for (i = 0; i < newPaths.length; i++) {\n        paths.push(newPaths[i]);\n    }\n};\nmodule.exports = Ruleset;"]}