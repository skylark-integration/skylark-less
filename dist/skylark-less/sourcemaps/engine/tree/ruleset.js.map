{"version":3,"sources":["engine/tree/ruleset.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","__module__4","__module__5","__module__6","__module__7","__module__8","__module__9","__module__10","__module__11","__module__12","exports","module","Node","Declaration","Keyword","Comment","Paren","Selector","Element","Anonymous","contexts","globalFunctionRegistry","defaultFunc","getDebugInfo","utils","Ruleset","selectors","rules","strictImports","visibilityInfo","this","_lookups","_variables","_properties","copyVisibilityInfo","allowRoot","setParent","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","isRuleset","isRulesetLike","accept","visitor","paths","visitArray","length","eval","context","selCnt","selector","i","hasVariable","hasOnePassingSelector","error","message","j","elements","isVariable","evaldCondition","toParseSelectors","toCSS","parse","parseNode","join","getIndex","fileInfo","err","result","flattenArray","reset","rule","subRule","copyArray","ruleset","originalRuleset","root","firstRoot","allowImports","debugInfo","functionRegistry","frames","found","n","inherit","ctxFrames","unshift","ctxSelectors","evalImports","rsRules","evalFirst","mediaBlockCount","mediaBlocks","filter","r","variable","name","splice","apply","concat","resetCache","isJustParentSelector","shift","bubbleSelectors","importRules","makeImportant","map","matchArgs","args","matchCondition","lastSelector","condition","Eval","_rulesets","variables","reduce","hash","vars","hasOwnProperty","properties","value","push","decl","parseValue","property","lastDeclaration","toParse","self","transformDeclaration","parsed","important","nodes","forEach","call","rulesets","filtRules","prependRule","find","match","foundMixins","key","slice","path","genCSS","output","ruleNodes","tabLevel","sep","tabRuleStr","compress","tabSetStr","charsetNodeIndex","importNodeIndex","isCharset","add","pathSubCnt","pathCnt","firstSelector","lastRule","currentLastRule","toString","isVisible","isEmpty","joinSelectors","s","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","_index","_fileInfo","createSelector","containedElement","element","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","pop","createDerived","combinator","parentEl","emptyOrWhitespace","restOfPath","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","deriveSelector","deriveFrom","newSelector","extendList","newPaths","replaceParentSelector","inSelector","k","currentElements","newSelectors","selectorsMultiplied","el","maybeSelector","hadParentSelector","nestedSelector","replaced","nestedPaths","replacedNewSelectors","concatenated","bind"],"mappings":"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","file":"../../../engine/tree/ruleset.js","sourcesContent":["define([\n    './node',\n    './declaration',\n    './keyword',\n    './comment',\n    './paren',\n    './selector',\n    './element',\n    './anonymous',\n    '../contexts',\n    '../functions/function-registry',\n    '../functions/default',\n    './debug-info',\n    '../utils'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4, __module__5, __module__6, __module__7, __module__8, __module__9, __module__10, __module__11, __module__12) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Declaration = __module__1, Keyword = __module__2, Comment = __module__3, Paren = __module__4, Selector = __module__5, Element = __module__6, Anonymous = __module__7, contexts = __module__8, globalFunctionRegistry = __module__9, defaultFunc = __module__10, getDebugInfo = __module__11, utils = __module__12;\n    var Ruleset = function (selectors, rules, strictImports, visibilityInfo) {\n        this.selectors = selectors;\n        this.rules = rules;\n        this._lookups = {};\n        this._variables = null;\n        this._properties = null;\n        this.strictImports = strictImports;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n        this.setParent(this.selectors, this);\n        this.setParent(this.rules, this);\n    };\n    Ruleset.prototype = new Node();\n    Ruleset.prototype.type = 'Ruleset';\n    Ruleset.prototype.isRuleset = true;\n    Ruleset.prototype.isRulesetLike = function () {\n        return true;\n    };\n    Ruleset.prototype.accept = function (visitor) {\n        if (this.paths) {\n            this.paths = visitor.visitArray(this.paths, true);\n        } else if (this.selectors) {\n            this.selectors = visitor.visitArray(this.selectors);\n        }\n        if (this.rules && this.rules.length) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    };\n    Ruleset.prototype.eval = function (context) {\n        var that = this, selectors, selCnt, selector, i, hasVariable, hasOnePassingSelector = false;\n        if (this.selectors && (selCnt = this.selectors.length)) {\n            selectors = new Array(selCnt);\n            defaultFunc.error({\n                type: 'Syntax',\n                message: 'it is currently only allowed in parametric mixin guards,'\n            });\n            for (i = 0; i < selCnt; i++) {\n                selector = this.selectors[i].eval(context);\n                for (var j = 0; j < selector.elements.length; j++) {\n                    if (selector.elements[j].isVariable) {\n                        hasVariable = true;\n                        break;\n                    }\n                }\n                selectors[i] = selector;\n                if (selector.evaldCondition) {\n                    hasOnePassingSelector = true;\n                }\n            }\n            if (hasVariable) {\n                var toParseSelectors = new Array(selCnt);\n                for (i = 0; i < selCnt; i++) {\n                    selector = selectors[i];\n                    toParseSelectors[i] = selector.toCSS(context);\n                }\n                this.parse.parseNode(toParseSelectors.join(','), ['selectors'], selectors[0].getIndex(), selectors[0].fileInfo(), function (err, result) {\n                    if (result) {\n                        selectors = utils.flattenArray(result);\n                    }\n                });\n            }\n            defaultFunc.reset();\n        } else {\n            hasOnePassingSelector = true;\n        }\n        var rules = this.rules ? utils.copyArray(this.rules) : null, ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()), rule, subRule;\n        ruleset.originalRuleset = this;\n        ruleset.root = this.root;\n        ruleset.firstRoot = this.firstRoot;\n        ruleset.allowImports = this.allowImports;\n        if (this.debugInfo) {\n            ruleset.debugInfo = this.debugInfo;\n        }\n        if (!hasOnePassingSelector) {\n            rules.length = 0;\n        }\n        ruleset.functionRegistry = function (frames) {\n            var i = 0, n = frames.length, found;\n            for (; i !== n; ++i) {\n                found = frames[i].functionRegistry;\n                if (found) {\n                    return found;\n                }\n            }\n            return globalFunctionRegistry;\n        }(context.frames).inherit();\n        var ctxFrames = context.frames;\n        ctxFrames.unshift(ruleset);\n        var ctxSelectors = context.selectors;\n        if (!ctxSelectors) {\n            context.selectors = ctxSelectors = [];\n        }\n        ctxSelectors.unshift(this.selectors);\n        if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n            ruleset.evalImports(context);\n        }\n        var rsRules = ruleset.rules;\n        for (i = 0; rule = rsRules[i]; i++) {\n            if (rule.evalFirst) {\n                rsRules[i] = rule.eval(context);\n            }\n        }\n        var mediaBlockCount = context.mediaBlocks && context.mediaBlocks.length || 0;\n        for (i = 0; rule = rsRules[i]; i++) {\n            if (rule.type === 'MixinCall') {\n                rules = rule.eval(context).filter(function (r) {\n                    if (r instanceof Declaration && r.variable) {\n                        return !ruleset.variable(r.name);\n                    }\n                    return true;\n                });\n                rsRules.splice.apply(rsRules, [\n                    i,\n                    1\n                ].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            } else if (rule.type === 'VariableCall') {\n                rules = rule.eval(context).rules.filter(function (r) {\n                    if (r instanceof Declaration && r.variable) {\n                        return false;\n                    }\n                    return true;\n                });\n                rsRules.splice.apply(rsRules, [\n                    i,\n                    1\n                ].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            }\n        }\n        for (i = 0; rule = rsRules[i]; i++) {\n            if (!rule.evalFirst) {\n                rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n            }\n        }\n        for (i = 0; rule = rsRules[i]; i++) {\n            if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n                if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                    rsRules.splice(i--, 1);\n                    for (var j = 0; subRule = rule.rules[j]; j++) {\n                        if (subRule instanceof Node) {\n                            subRule.copyVisibilityInfo(rule.visibilityInfo());\n                            if (!(subRule instanceof Declaration) || !subRule.variable) {\n                                rsRules.splice(++i, 0, subRule);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ctxFrames.shift();\n        ctxSelectors.shift();\n        if (context.mediaBlocks) {\n            for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n                context.mediaBlocks[i].bubbleSelectors(selectors);\n            }\n        }\n        return ruleset;\n    };\n    Ruleset.prototype.evalImports = function (context) {\n        var rules = this.rules, i, importRules;\n        if (!rules) {\n            return;\n        }\n        for (i = 0; i < rules.length; i++) {\n            if (rules[i].type === 'Import') {\n                importRules = rules[i].eval(context);\n                if (importRules && (importRules.length || importRules.length === 0)) {\n                    rules.splice.apply(rules, [\n                        i,\n                        1\n                    ].concat(importRules));\n                    i += importRules.length - 1;\n                } else {\n                    rules.splice(i, 1, importRules);\n                }\n                this.resetCache();\n            }\n        }\n    };\n    Ruleset.prototype.makeImportant = function () {\n        var result = new Ruleset(this.selectors, this.rules.map(function (r) {\n            if (r.makeImportant) {\n                return r.makeImportant();\n            } else {\n                return r;\n            }\n        }), this.strictImports, this.visibilityInfo());\n        return result;\n    };\n    Ruleset.prototype.matchArgs = function (args) {\n        return !args || args.length === 0;\n    };\n    Ruleset.prototype.matchCondition = function (args, context) {\n        var lastSelector = this.selectors[this.selectors.length - 1];\n        if (!lastSelector.evaldCondition) {\n            return false;\n        }\n        if (lastSelector.condition && !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {\n            return false;\n        }\n        return true;\n    };\n    Ruleset.prototype.resetCache = function () {\n        this._rulesets = null;\n        this._variables = null;\n        this._properties = null;\n        this._lookups = {};\n    };\n    Ruleset.prototype.variables = function () {\n        if (!this._variables) {\n            this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n                if (r instanceof Declaration && r.variable === true) {\n                    hash[r.name] = r;\n                }\n                if (r.type === 'Import' && r.root && r.root.variables) {\n                    var vars = r.root.variables();\n                    for (var name in vars) {\n                        if (vars.hasOwnProperty(name)) {\n                            hash[name] = r.root.variable(name);\n                        }\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._variables;\n    };\n    Ruleset.prototype.properties = function () {\n        if (!this._properties) {\n            this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n                if (r instanceof Declaration && r.variable !== true) {\n                    var name = r.name.length === 1 && r.name[0] instanceof Keyword ? r.name[0].value : r.name;\n                    if (!hash['$' + name]) {\n                        hash['$' + name] = [r];\n                    } else {\n                        hash['$' + name].push(r);\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._properties;\n    };\n    Ruleset.prototype.variable = function (name) {\n        var decl = this.variables()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    };\n    Ruleset.prototype.property = function (name) {\n        var decl = this.properties()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    };\n    Ruleset.prototype.lastDeclaration = function () {\n        for (var i = this.rules.length; i > 0; i--) {\n            var decl = this.rules[i - 1];\n            if (decl instanceof Declaration) {\n                return this.parseValue(decl);\n            }\n        }\n    };\n    Ruleset.prototype.parseValue = function (toParse) {\n        var self = this;\n        function transformDeclaration(decl) {\n            if (decl.value instanceof Anonymous && !decl.parsed) {\n                if (typeof decl.value.value === 'string') {\n                    this.parse.parseNode(decl.value.value, [\n                        'value',\n                        'important'\n                    ], decl.value.getIndex(), decl.fileInfo(), function (err, result) {\n                        if (err) {\n                            decl.parsed = true;\n                        }\n                        if (result) {\n                            decl.value = result[0];\n                            decl.important = result[1] || '';\n                            decl.parsed = true;\n                        }\n                    });\n                } else {\n                    decl.parsed = true;\n                }\n                return decl;\n            } else {\n                return decl;\n            }\n        }\n        if (!Array.isArray(toParse)) {\n            return transformDeclaration.call(self, toParse);\n        } else {\n            var nodes = [];\n            toParse.forEach(function (n) {\n                nodes.push(transformDeclaration.call(self, n));\n            });\n            return nodes;\n        }\n    };\n    Ruleset.prototype.rulesets = function () {\n        if (!this.rules) {\n            return [];\n        }\n        var filtRules = [], rules = this.rules, i, rule;\n        for (i = 0; rule = rules[i]; i++) {\n            if (rule.isRuleset) {\n                filtRules.push(rule);\n            }\n        }\n        return filtRules;\n    };\n    Ruleset.prototype.prependRule = function (rule) {\n        var rules = this.rules;\n        if (rules) {\n            rules.unshift(rule);\n        } else {\n            this.rules = [rule];\n        }\n        this.setParent(rule, this);\n    };\n    Ruleset.prototype.find = function (selector, self, filter) {\n        self = self || this;\n        var rules = [], match, foundMixins, key = selector.toCSS();\n        if (key in this._lookups) {\n            return this._lookups[key];\n        }\n        this.rulesets().forEach(function (rule) {\n            if (rule !== self) {\n                for (var j = 0; j < rule.selectors.length; j++) {\n                    match = selector.match(rule.selectors[j]);\n                    if (match) {\n                        if (selector.elements.length > match) {\n                            if (!filter || filter(rule)) {\n                                foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                                for (var i = 0; i < foundMixins.length; ++i) {\n                                    foundMixins[i].path.push(rule);\n                                }\n                                Array.prototype.push.apply(rules, foundMixins);\n                            }\n                        } else {\n                            rules.push({\n                                rule: rule,\n                                path: []\n                            });\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n        this._lookups[key] = rules;\n        return rules;\n    };\n    Ruleset.prototype.genCSS = function (context, output) {\n        var i, j, charsetRuleNodes = [], ruleNodes = [], debugInfo, rule, path;\n        context.tabLevel = context.tabLevel || 0;\n        if (!this.root) {\n            context.tabLevel++;\n        }\n        var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  '), tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  '), sep;\n        var charsetNodeIndex = 0;\n        var importNodeIndex = 0;\n        for (i = 0; rule = this.rules[i]; i++) {\n            if (rule instanceof Comment) {\n                if (importNodeIndex === i) {\n                    importNodeIndex++;\n                }\n                ruleNodes.push(rule);\n            } else if (rule.isCharset && rule.isCharset()) {\n                ruleNodes.splice(charsetNodeIndex, 0, rule);\n                charsetNodeIndex++;\n                importNodeIndex++;\n            } else if (rule.type === 'Import') {\n                ruleNodes.splice(importNodeIndex, 0, rule);\n                importNodeIndex++;\n            } else {\n                ruleNodes.push(rule);\n            }\n        }\n        ruleNodes = charsetRuleNodes.concat(ruleNodes);\n        if (!this.root) {\n            debugInfo = getDebugInfo(context, this, tabSetStr);\n            if (debugInfo) {\n                output.add(debugInfo);\n                output.add(tabSetStr);\n            }\n            var paths = this.paths, pathCnt = paths.length, pathSubCnt;\n            sep = context.compress ? ',' : ',\\n' + tabSetStr;\n            for (i = 0; i < pathCnt; i++) {\n                path = paths[i];\n                if (!(pathSubCnt = path.length)) {\n                    continue;\n                }\n                if (i > 0) {\n                    output.add(sep);\n                }\n                context.firstSelector = true;\n                path[0].genCSS(context, output);\n                context.firstSelector = false;\n                for (j = 1; j < pathSubCnt; j++) {\n                    path[j].genCSS(context, output);\n                }\n            }\n            output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n        }\n        for (i = 0; rule = ruleNodes[i]; i++) {\n            if (i + 1 === ruleNodes.length) {\n                context.lastRule = true;\n            }\n            var currentLastRule = context.lastRule;\n            if (rule.isRulesetLike(rule)) {\n                context.lastRule = false;\n            }\n            if (rule.genCSS) {\n                rule.genCSS(context, output);\n            } else if (rule.value) {\n                output.add(rule.value.toString());\n            }\n            context.lastRule = currentLastRule;\n            if (!context.lastRule && rule.isVisible()) {\n                output.add(context.compress ? '' : '\\n' + tabRuleStr);\n            } else {\n                context.lastRule = false;\n            }\n        }\n        if (!this.root) {\n            output.add(context.compress ? '}' : '\\n' + tabSetStr + '}');\n            context.tabLevel--;\n        }\n        if (!output.isEmpty() && !context.compress && this.firstRoot) {\n            output.add('\\n');\n        }\n    };\n    Ruleset.prototype.joinSelectors = function (paths, context, selectors) {\n        for (var s = 0; s < selectors.length; s++) {\n            this.joinSelector(paths, context, selectors[s]);\n        }\n    };\n    Ruleset.prototype.joinSelector = function (paths, context, selector) {\n        function createParenthesis(elementsToPak, originalElement) {\n            var replacementParen, j;\n            if (elementsToPak.length === 0) {\n                replacementParen = new Paren(elementsToPak[0]);\n            } else {\n                var insideParent = new Array(elementsToPak.length);\n                for (j = 0; j < elementsToPak.length; j++) {\n                    insideParent[j] = new Element(null, elementsToPak[j], originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n                }\n                replacementParen = new Paren(new Selector(insideParent));\n            }\n            return replacementParen;\n        }\n        function createSelector(containedElement, originalElement) {\n            var element, selector;\n            element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n            selector = new Selector([element]);\n            return selector;\n        }\n        function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n            var newSelectorPath, lastSelector, newJoinedSelector;\n            newSelectorPath = [];\n            if (beginningPath.length > 0) {\n                newSelectorPath = utils.copyArray(beginningPath);\n                lastSelector = newSelectorPath.pop();\n                newJoinedSelector = originalSelector.createDerived(utils.copyArray(lastSelector.elements));\n            } else {\n                newJoinedSelector = originalSelector.createDerived([]);\n            }\n            if (addPath.length > 0) {\n                var combinator = replacedElement.combinator, parentEl = addPath[0].elements[0];\n                if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                    combinator = parentEl.combinator;\n                }\n                newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.isVariable, replacedElement._index, replacedElement._fileInfo));\n                newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n            }\n            if (newJoinedSelector.elements.length !== 0) {\n                newSelectorPath.push(newJoinedSelector);\n            }\n            if (addPath.length > 1) {\n                var restOfPath = addPath.slice(1);\n                restOfPath = restOfPath.map(function (selector) {\n                    return selector.createDerived(selector.elements, []);\n                });\n                newSelectorPath = newSelectorPath.concat(restOfPath);\n            }\n            return newSelectorPath;\n        }\n        function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {\n            var j;\n            for (j = 0; j < beginningPath.length; j++) {\n                var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n                result.push(newSelectorPath);\n            }\n            return result;\n        }\n        function mergeElementsOnToSelectors(elements, selectors) {\n            var i, sel;\n            if (elements.length === 0) {\n                return;\n            }\n            if (selectors.length === 0) {\n                selectors.push([new Selector(elements)]);\n                return;\n            }\n            for (i = 0; sel = selectors[i]; i++) {\n                if (sel.length > 0) {\n                    sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n                } else {\n                    sel.push(new Selector(elements));\n                }\n            }\n        }\n        function replaceParentSelector(paths, context, inSelector) {\n            var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\n            function findNestedSelector(element) {\n                var maybeSelector;\n                if (!(element.value instanceof Paren)) {\n                    return null;\n                }\n                maybeSelector = element.value.value;\n                if (!(maybeSelector instanceof Selector)) {\n                    return null;\n                }\n                return maybeSelector;\n            }\n            currentElements = [];\n            newSelectors = [[]];\n            for (i = 0; el = inSelector.elements[i]; i++) {\n                if (el.value !== '&') {\n                    var nestedSelector = findNestedSelector(el);\n                    if (nestedSelector != null) {\n                        mergeElementsOnToSelectors(currentElements, newSelectors);\n                        var nestedPaths = [], replaced, replacedNewSelectors = [];\n                        replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                        hadParentSelector = hadParentSelector || replaced;\n                        for (k = 0; k < nestedPaths.length; k++) {\n                            var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                            addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                        }\n                        newSelectors = replacedNewSelectors;\n                        currentElements = [];\n                    } else {\n                        currentElements.push(el);\n                    }\n                } else {\n                    hadParentSelector = true;\n                    selectorsMultiplied = [];\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n                    for (j = 0; j < newSelectors.length; j++) {\n                        sel = newSelectors[j];\n                        if (context.length === 0) {\n                            if (sel.length > 0) {\n                                sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                            }\n                            selectorsMultiplied.push(sel);\n                        } else {\n                            for (k = 0; k < context.length; k++) {\n                                var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                                selectorsMultiplied.push(newSelectorPath);\n                            }\n                        }\n                    }\n                    newSelectors = selectorsMultiplied;\n                    currentElements = [];\n                }\n            }\n            mergeElementsOnToSelectors(currentElements, newSelectors);\n            for (i = 0; i < newSelectors.length; i++) {\n                length = newSelectors[i].length;\n                if (length > 0) {\n                    paths.push(newSelectors[i]);\n                    lastSelector = newSelectors[i][length - 1];\n                    newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                }\n            }\n            return hadParentSelector;\n        }\n        function deriveSelector(visibilityInfo, deriveFrom) {\n            var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n            newSelector.copyVisibilityInfo(visibilityInfo);\n            return newSelector;\n        }\n        var i, newPaths, hadParentSelector;\n        newPaths = [];\n        hadParentSelector = replaceParentSelector(newPaths, context, selector);\n        if (!hadParentSelector) {\n            if (context.length > 0) {\n                newPaths = [];\n                for (i = 0; i < context.length; i++) {\n                    var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n                    concatenated.push(selector);\n                    newPaths.push(concatenated);\n                }\n            } else {\n                newPaths = [[selector]];\n            }\n        }\n        for (i = 0; i < newPaths.length; i++) {\n            paths.push(newPaths[i]);\n        }\n    };\n    module.exports = Ruleset;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}