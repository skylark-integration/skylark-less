{"version":3,"sources":["engine/tree/variable-call.js"],"names":["Node","require","Variable","Ruleset","DetachedRuleset","LessError","VariableCall","variable","index","currentFileInfo","this","_index","_fileInfo","allowRoot","prototype","type","eval","context","rules","detachedRuleset","getIndex","fileInfo","error","message","ruleset","Array","isArray","value","callEval","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,SAAWD,QAAQ,cAAeE,QAAUF,QAAQ,aAAcG,gBAAkBH,QAAQ,sBAAuBI,UAAYJ,QAAQ,iBACjKK,aAAe,SAAUC,EAAUC,EAAOC,GAC1CC,KAAKH,SAAWA,EAChBG,KAAKC,OAASH,EACdE,KAAKE,UAAYH,EACjBC,KAAKG,WAAY,GAErBP,aAAaQ,UAAY,IAAId,KAC7BM,aAAaQ,UAAUC,KAAO,eAC9BT,aAAaQ,UAAUE,KAAO,SAAUC,GACpC,IAAIC,EAAOC,EAAkB,IAAIjB,SAASQ,KAAKH,SAAUG,KAAKU,WAAYV,KAAKW,YAAYL,KAAKC,GAAUK,EAAQ,IAAIjB,WAAYkB,QAAS,oCAAsCb,KAAKH,WACtL,IAAKY,EAAgBK,QAAS,CAC1B,GAAIL,EAAgBD,MAChBA,EAAQC,OACL,GAAIM,MAAMC,QAAQP,GACrBD,EAAQ,IAAIf,QAAQ,GAAIgB,OACrB,CAAA,IAAIM,MAAMC,QAAQP,EAAgBQ,OAGrC,MAAML,EAFNJ,EAAQ,IAAIf,QAAQ,GAAIgB,EAAgBQ,OAI5CR,EAAkB,IAAIf,gBAAgBc,GAE1C,GAAIC,EAAgBK,QAChB,OAAOL,EAAgBS,SAASX,GAEpC,MAAMK,GAEVO,OAAOC,QAAUxB","file":"../../../engine/tree/variable-call.js","sourcesContent":["var Node = require('./node'), Variable = require('./variable'), Ruleset = require('./ruleset'), DetachedRuleset = require('./detached-ruleset'), LessError = require('../less-error');\nvar VariableCall = function (variable, index, currentFileInfo) {\n    this.variable = variable;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.allowRoot = true;\n};\nVariableCall.prototype = new Node();\nVariableCall.prototype.type = 'VariableCall';\nVariableCall.prototype.eval = function (context) {\n    var rules, detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context), error = new LessError({ message: 'Could not evaluate variable call ' + this.variable });\n    if (!detachedRuleset.ruleset) {\n        if (detachedRuleset.rules) {\n            rules = detachedRuleset;\n        } else if (Array.isArray(detachedRuleset)) {\n            rules = new Ruleset('', detachedRuleset);\n        } else if (Array.isArray(detachedRuleset.value)) {\n            rules = new Ruleset('', detachedRuleset.value);\n        } else {\n            throw error;\n        }\n        detachedRuleset = new DetachedRuleset(rules);\n    }\n    if (detachedRuleset.ruleset) {\n        return detachedRuleset.callEval(context);\n    }\n    throw error;\n};\nmodule.exports = VariableCall;"]}