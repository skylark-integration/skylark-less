{"version":3,"sources":["engine/tree/dimension.js"],"names":["Node","require","unitConversions","Unit","Color","Dimension","value","unit","this","parseFloat","isNaN","Error","undefined","setParent","prototype","type","accept","visitor","visit","eval","context","toColor","genCSS","output","strictUnits","isSingular","toString","fround","strValue","String","toFixed","replace","compress","isLength","add","substr","operate","op","other","_operate","clone","numerator","length","denominator","backupUnit","convertTo","usedUnits","concat","sort","cancel","compare","a","b","isEmpty","unify","numericCompare","duration","angle","conversions","i","groupName","group","targetUnit","applyUnit","derivedConversions","hasOwnProperty","atomicUnit","map","module","exports"],"mappings":"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","file":"../../../engine/tree/dimension.js","sourcesContent":["var Node = require('./node'), unitConversions = require('../data/unit-conversions'), Unit = require('./unit'), Color = require('./color');\nvar Dimension = function (value, unit) {\n    this.value = parseFloat(value);\n    if (isNaN(this.value)) {\n        throw new Error('Dimension is not a number.');\n    }\n    this.unit = unit && unit instanceof Unit ? unit : new Unit(unit ? [unit] : undefined);\n    this.setParent(this.unit, this);\n};\nDimension.prototype = new Node();\nDimension.prototype.type = 'Dimension';\nDimension.prototype.accept = function (visitor) {\n    this.unit = visitor.visit(this.unit);\n};\nDimension.prototype.eval = function (context) {\n    return this;\n};\nDimension.prototype.toColor = function () {\n    return new Color([\n        this.value,\n        this.value,\n        this.value\n    ]);\n};\nDimension.prototype.genCSS = function (context, output) {\n    if (context && context.strictUnits && !this.unit.isSingular()) {\n        throw new Error('Multiple units in dimension. Correct the units or use the unit function. Bad unit: ' + this.unit.toString());\n    }\n    var value = this.fround(context, this.value), strValue = String(value);\n    if (value !== 0 && value < 0.000001 && value > -0.000001) {\n        strValue = value.toFixed(20).replace(/0+$/, '');\n    }\n    if (context && context.compress) {\n        if (value === 0 && this.unit.isLength()) {\n            output.add(strValue);\n            return;\n        }\n        if (value > 0 && value < 1) {\n            strValue = strValue.substr(1);\n        }\n    }\n    output.add(strValue);\n    this.unit.genCSS(context, output);\n};\nDimension.prototype.operate = function (context, op, other) {\n    var value = this._operate(context, op, this.value, other.value), unit = this.unit.clone();\n    if (op === '+' || op === '-') {\n        if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n            unit = other.unit.clone();\n            if (this.unit.backupUnit) {\n                unit.backupUnit = this.unit.backupUnit;\n            }\n        } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n        } else {\n            other = other.convertTo(this.unit.usedUnits());\n            if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                throw new Error(\"Incompatible units. Change the units or use the unit function. Bad units: '\" + unit.toString() + \"' and '\" + other.unit.toString() + \"'.\");\n            }\n            value = this._operate(context, op, this.value, other.value);\n        }\n    } else if (op === '*') {\n        unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n        unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n        unit.cancel();\n    } else if (op === '/') {\n        unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n        unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n        unit.cancel();\n    }\n    return new Dimension(value, unit);\n};\nDimension.prototype.compare = function (other) {\n    var a, b;\n    if (!(other instanceof Dimension)) {\n        return undefined;\n    }\n    if (this.unit.isEmpty() || other.unit.isEmpty()) {\n        a = this;\n        b = other;\n    } else {\n        a = this.unify();\n        b = other.unify();\n        if (a.unit.compare(b.unit) !== 0) {\n            return undefined;\n        }\n    }\n    return Node.numericCompare(a.value, b.value);\n};\nDimension.prototype.unify = function () {\n    return this.convertTo({\n        length: 'px',\n        duration: 's',\n        angle: 'rad'\n    });\n};\nDimension.prototype.convertTo = function (conversions) {\n    var value = this.value, unit = this.unit.clone(), i, groupName, group, targetUnit, derivedConversions = {}, applyUnit;\n    if (typeof conversions === 'string') {\n        for (i in unitConversions) {\n            if (unitConversions[i].hasOwnProperty(conversions)) {\n                derivedConversions = {};\n                derivedConversions[i] = conversions;\n            }\n        }\n        conversions = derivedConversions;\n    }\n    applyUnit = function (atomicUnit, denominator) {\n        if (group.hasOwnProperty(atomicUnit)) {\n            if (denominator) {\n                value = value / (group[atomicUnit] / group[targetUnit]);\n            } else {\n                value = value * (group[atomicUnit] / group[targetUnit]);\n            }\n            return targetUnit;\n        }\n        return atomicUnit;\n    };\n    for (groupName in conversions) {\n        if (conversions.hasOwnProperty(groupName)) {\n            targetUnit = conversions[groupName];\n            group = unitConversions[groupName];\n            unit.map(applyUnit);\n        }\n    }\n    unit.cancel();\n    return new Dimension(value, unit);\n};\nmodule.exports = Dimension;"]}