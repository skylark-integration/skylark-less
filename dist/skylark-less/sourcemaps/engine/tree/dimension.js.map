{"version":3,"sources":["engine/tree/dimension.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","exports","module","Node","unitConversions","Unit","Color","Dimension","value","unit","this","parseFloat","isNaN","Error","undefined","setParent","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","accept","visitor","visit","eval","context","toColor","genCSS","output","strictUnits","isSingular","toString","fround","strValue","String","toFixed","replace","compress","isLength","add","substr","operate","op","other","_operate","clone","numerator","length","denominator","backupUnit","convertTo","usedUnits","concat","sort","cancel","compare","a","b","isEmpty","unify","numericCompare","duration","angle","conversions","i","groupName","group","targetUnit","applyUnit","derivedConversions","hasOwnProperty","atomicUnit","map"],"mappings":"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","file":"../../../engine/tree/dimension.js","sourcesContent":["define([\n    './node',\n    '../data/unit-conversions',\n    './unit',\n    './color'\n], function (__module__0, __module__1, __module__2, __module__3) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, unitConversions = __module__1, Unit = __module__2, Color = __module__3;\n    var Dimension = function (value, unit) {\n        this.value = parseFloat(value);\n        if (isNaN(this.value)) {\n            throw new Error('Dimension is not a number.');\n        }\n        this.unit = unit && unit instanceof Unit ? unit : new Unit(unit ? [unit] : undefined);\n        this.setParent(this.unit, this);\n    };\n    Dimension.prototype = new Node();\n    Dimension.prototype.type = 'Dimension';\n    Dimension.prototype.accept = function (visitor) {\n        this.unit = visitor.visit(this.unit);\n    };\n    Dimension.prototype.eval = function (context) {\n        return this;\n    };\n    Dimension.prototype.toColor = function () {\n        return new Color([\n            this.value,\n            this.value,\n            this.value\n        ]);\n    };\n    Dimension.prototype.genCSS = function (context, output) {\n        if (context && context.strictUnits && !this.unit.isSingular()) {\n            throw new Error('Multiple units in dimension. Correct the units or use the unit function. Bad unit: ' + this.unit.toString());\n        }\n        var value = this.fround(context, this.value), strValue = String(value);\n        if (value !== 0 && value < 0.000001 && value > -0.000001) {\n            strValue = value.toFixed(20).replace(/0+$/, '');\n        }\n        if (context && context.compress) {\n            if (value === 0 && this.unit.isLength()) {\n                output.add(strValue);\n                return;\n            }\n            if (value > 0 && value < 1) {\n                strValue = strValue.substr(1);\n            }\n        }\n        output.add(strValue);\n        this.unit.genCSS(context, output);\n    };\n    Dimension.prototype.operate = function (context, op, other) {\n        var value = this._operate(context, op, this.value, other.value), unit = this.unit.clone();\n        if (op === '+' || op === '-') {\n            if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n                unit = other.unit.clone();\n                if (this.unit.backupUnit) {\n                    unit.backupUnit = this.unit.backupUnit;\n                }\n            } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n            } else {\n                other = other.convertTo(this.unit.usedUnits());\n                if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                    throw new Error(\"Incompatible units. Change the units or use the unit function. Bad units: '\" + unit.toString() + \"' and '\" + other.unit.toString() + \"'.\");\n                }\n                value = this._operate(context, op, this.value, other.value);\n            }\n        } else if (op === '*') {\n            unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n            unit.cancel();\n        } else if (op === '/') {\n            unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n            unit.cancel();\n        }\n        return new Dimension(value, unit);\n    };\n    Dimension.prototype.compare = function (other) {\n        var a, b;\n        if (!(other instanceof Dimension)) {\n            return undefined;\n        }\n        if (this.unit.isEmpty() || other.unit.isEmpty()) {\n            a = this;\n            b = other;\n        } else {\n            a = this.unify();\n            b = other.unify();\n            if (a.unit.compare(b.unit) !== 0) {\n                return undefined;\n            }\n        }\n        return Node.numericCompare(a.value, b.value);\n    };\n    Dimension.prototype.unify = function () {\n        return this.convertTo({\n            length: 'px',\n            duration: 's',\n            angle: 'rad'\n        });\n    };\n    Dimension.prototype.convertTo = function (conversions) {\n        var value = this.value, unit = this.unit.clone(), i, groupName, group, targetUnit, derivedConversions = {}, applyUnit;\n        if (typeof conversions === 'string') {\n            for (i in unitConversions) {\n                if (unitConversions[i].hasOwnProperty(conversions)) {\n                    derivedConversions = {};\n                    derivedConversions[i] = conversions;\n                }\n            }\n            conversions = derivedConversions;\n        }\n        applyUnit = function (atomicUnit, denominator) {\n            if (group.hasOwnProperty(atomicUnit)) {\n                if (denominator) {\n                    value = value / (group[atomicUnit] / group[targetUnit]);\n                } else {\n                    value = value * (group[atomicUnit] / group[targetUnit]);\n                }\n                return targetUnit;\n            }\n            return atomicUnit;\n        };\n        for (groupName in conversions) {\n            if (conversions.hasOwnProperty(groupName)) {\n                targetUnit = conversions[groupName];\n                group = unitConversions[groupName];\n                unit.map(applyUnit);\n            }\n        }\n        unit.cancel();\n        return new Dimension(value, unit);\n    };\n    module.exports = Dimension;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}