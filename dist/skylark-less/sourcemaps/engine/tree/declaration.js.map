{"version":3,"sources":["engine/tree/declaration.js"],"names":["Node","require","Value","Keyword","Anonymous","MATH","Math","Declaration","name","value","important","merge","index","currentFileInfo","inline","variable","this","trim","_index","_fileInfo","undefined","charAt","allowRoot","setParent","evalName","context","i","n","length","output","add","s","eval","genCSS","prototype","type","compress","fileInfo","getIndex","e","filename","lastRule","prevMath","evaldValue","mathBypass","math","ALWAYS","PARENS_DIVISION","importantScope","push","message","importantResult","pop","makeImportant","module","exports"],"mappings":"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","file":"../../../engine/tree/declaration.js","sourcesContent":["var Node = require('./node'), Value = require('./value'), Keyword = require('./keyword'), Anonymous = require('./anonymous'), MATH = require('../constants').Math;\nvar Declaration = function (name, value, important, merge, index, currentFileInfo, inline, variable) {\n    this.name = name;\n    this.value = value instanceof Node ? value : new Value([value ? new Anonymous(value) : null]);\n    this.important = important ? ' ' + important.trim() : '';\n    this.merge = merge;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.inline = inline || false;\n    this.variable = variable !== undefined ? variable : name.charAt && name.charAt(0) === '@';\n    this.allowRoot = true;\n    this.setParent(this.value, this);\n};\nfunction evalName(context, name) {\n    var value = '', i, n = name.length, output = {\n            add: function (s) {\n                value += s;\n            }\n        };\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\nDeclaration.prototype = new Node();\nDeclaration.prototype.type = 'Declaration';\nDeclaration.prototype.genCSS = function (context, output) {\n    output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n    try {\n        this.value.genCSS(context, output);\n    } catch (e) {\n        e.index = this._index;\n        e.filename = this._fileInfo.filename;\n        throw e;\n    }\n    output.add(this.important + (this.inline || context.lastRule && context.compress ? '' : ';'), this._fileInfo, this._index);\n};\nDeclaration.prototype.eval = function (context) {\n    var mathBypass = false, prevMath, name = this.name, evaldValue, variable = this.variable;\n    if (typeof name !== 'string') {\n        name = name.length === 1 && name[0] instanceof Keyword ? name[0].value : evalName(context, name);\n        variable = false;\n    }\n    if (name === 'font' && context.math === MATH.ALWAYS) {\n        mathBypass = true;\n        prevMath = context.math;\n        context.math = MATH.PARENS_DIVISION;\n    }\n    try {\n        context.importantScope.push({});\n        evaldValue = this.value.eval(context);\n        if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n            throw {\n                message: 'Rulesets cannot be evaluated on a property.',\n                index: this.getIndex(),\n                filename: this.fileInfo().filename\n            };\n        }\n        var important = this.important, importantResult = context.importantScope.pop();\n        if (!important && importantResult.important) {\n            important = importantResult.important;\n        }\n        return new Declaration(name, evaldValue, important, this.merge, this.getIndex(), this.fileInfo(), this.inline, variable);\n    } catch (e) {\n        if (typeof e.index !== 'number') {\n            e.index = this.getIndex();\n            e.filename = this.fileInfo().filename;\n        }\n        throw e;\n    } finally {\n        if (mathBypass) {\n            context.math = prevMath;\n        }\n    }\n};\nDeclaration.prototype.makeImportant = function () {\n    return new Declaration(this.name, this.value, '!important', this.merge, this.getIndex(), this.fileInfo(), this.inline);\n};\nmodule.exports = Declaration;"]}