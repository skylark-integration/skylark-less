{"version":3,"sources":["engine/tree/property.js"],"names":["Node","require","Declaration","Property","name","index","currentFileInfo","this","_index","_fileInfo","prototype","type","eval","context","property","mergeRules","pluginManager","less","visitors","ToCSSVisitor","_mergeRules","evaluating","message","filename","fileInfo","getIndex","find","frames","frame","v","vArr","i","length","value","important","merge","inline","variable","importantScope","obj","fun","r","call","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,YAAcD,QAAQ,iBAChDE,SAAW,SAAUC,EAAMC,EAAOC,GAClCC,KAAKH,KAAOA,EACZG,KAAKC,OAASH,EACdE,KAAKE,UAAYH,GAErBH,SAASO,UAAY,IAAIV,KACzBG,SAASO,UAAUC,KAAO,WAC1BR,SAASO,UAAUE,KAAO,SAAUC,GAChC,IAAIC,EAAUV,EAAOG,KAAKH,KACtBW,EAAaF,EAAQG,cAAcC,KAAKC,SAASC,aAAaT,UAAUU,YAC5E,GAAIb,KAAKc,WACL,MACIV,KAAM,OACNW,QAAS,oCAAsClB,EAC/CmB,SAAUhB,KAAKiB,WAAWD,SAC1BlB,MAAOE,KAAKkB,YAqBpB,GAlBAlB,KAAKc,YAAa,EAClBP,EAAWP,KAAKmB,KAAKb,EAAQc,OAAQ,SAAUC,GAC3C,IAAIC,EAAGC,EAAOF,EAAMd,SAASV,GAC7B,GAAI0B,EAAM,CACN,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC7BF,EAAIC,EAAKC,GACTD,EAAKC,GAAK,IAAI7B,YAAY2B,EAAEzB,KAAMyB,EAAEI,MAAOJ,EAAEK,UAAWL,EAAEM,MAAON,EAAExB,MAAOwB,EAAEvB,gBAAiBuB,EAAEO,OAAQP,EAAEQ,UAI7G,GAFAtB,EAAWe,IACXD,EAAIC,EAAKA,EAAKE,OAAS,IACjBE,UACmBrB,EAAQyB,eAAezB,EAAQyB,eAAeN,OAAS,GAC7DE,UAAYL,EAAEK,UAGjC,OADAL,EAAIA,EAAEI,MAAMrB,KAAKC,MAMrB,OADAN,KAAKc,YAAa,EACXP,EAEP,MACIH,KAAM,OACNW,QAAS,aAAelB,EAAO,iBAC/BmB,SAAUhB,KAAKD,gBAAgBiB,SAC/BlB,MAAOE,KAAKF,QAIxBF,SAASO,UAAUgB,KAAO,SAAUa,EAAKC,GACrC,IAAK,IAAWC,EAAPV,EAAI,EAAMA,EAAIQ,EAAIP,OAAQD,IAE/B,GADAU,EAAID,EAAIE,KAAKH,EAAKA,EAAIR,IAElB,OAAOU,EAGf,OAAO,MAEXE,OAAOC,QAAUzC","file":"../../../engine/tree/property.js","sourcesContent":["var Node = require('./node'), Declaration = require('./declaration');\nvar Property = function (name, index, currentFileInfo) {\n    this.name = name;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\nProperty.prototype = new Node();\nProperty.prototype.type = 'Property';\nProperty.prototype.eval = function (context) {\n    var property, name = this.name;\n    var mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n    if (this.evaluating) {\n        throw {\n            type: 'Name',\n            message: 'Recursive property reference for ' + name,\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n        };\n    }\n    this.evaluating = true;\n    property = this.find(context.frames, function (frame) {\n        var v, vArr = frame.property(name);\n        if (vArr) {\n            for (var i = 0; i < vArr.length; i++) {\n                v = vArr[i];\n                vArr[i] = new Declaration(v.name, v.value, v.important, v.merge, v.index, v.currentFileInfo, v.inline, v.variable);\n            }\n            mergeRules(vArr);\n            v = vArr[vArr.length - 1];\n            if (v.important) {\n                var importantScope = context.importantScope[context.importantScope.length - 1];\n                importantScope.important = v.important;\n            }\n            v = v.value.eval(context);\n            return v;\n        }\n    });\n    if (property) {\n        this.evaluating = false;\n        return property;\n    } else {\n        throw {\n            type: 'Name',\n            message: \"Property '\" + name + \"' is undefined\",\n            filename: this.currentFileInfo.filename,\n            index: this.index\n        };\n    }\n};\nProperty.prototype.find = function (obj, fun) {\n    for (var i = 0, r; i < obj.length; i++) {\n        r = fun.call(obj, obj[i]);\n        if (r) {\n            return r;\n        }\n    }\n    return null;\n};\nmodule.exports = Property;"]}