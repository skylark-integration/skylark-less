{"version":3,"sources":["engine/tree/property.js"],"names":["define","__module__0","__module__1","exports","module","Declaration","Property","name","index","currentFileInfo","this","_index","_fileInfo","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","eval","context","property","mergeRules","pluginManager","less","visitors","ToCSSVisitor","_mergeRules","evaluating","message","filename","fileInfo","getIndex","find","frames","frame","v","vArr","i","length","value","important","merge","inline","variable","importantScope","fun","r","call"],"mappings":";;;;;;;AAAAA,QACI,SACA,iBACD,SAAUC,EAAaC,GACtB,aACA,IAAIC,KACAC,GAAWD,YACSE,EAAcH,EAClCI,EAAW,SAAUC,EAAMC,EAAOC,GAClCC,KAAKH,KAAOA,EACZG,KAAKC,OAASH,EACdE,KAAKE,UAAYH,GA6DrB,SAASI,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OA9DAR,EAASa,UAAY,IANVlB,GAOQmB,KAAO,WAC1Bd,EAASa,UAAUE,KAAO,SAAUC,GAChC,IAAIC,EAAUhB,EAAOG,KAAKH,KACtBiB,EAAaF,EAAQG,cAAcC,KAAKC,SAASC,aAAaT,UAAUU,YAC5E,GAAInB,KAAKoB,WACL,MACIV,KAAM,OACNW,QAAS,oCAAsCxB,EAC/CyB,SAAUtB,KAAKuB,WAAWD,SAC1BxB,MAAOE,KAAKwB,YAqBpB,GAlBAxB,KAAKoB,YAAa,EAClBP,EAAWb,KAAKyB,KAAKb,EAAQc,OAAQ,SAAUC,GAC3C,IAAIC,EAAGC,EAAOF,EAAMd,SAAShB,GAC7B,GAAIgC,EAAM,CACN,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC7BF,EAAIC,EAAKC,GACTD,EAAKC,GAAK,IAAInC,EAAYiC,EAAE/B,KAAM+B,EAAEI,MAAOJ,EAAEK,UAAWL,EAAEM,MAAON,EAAE9B,MAAO8B,EAAE7B,gBAAiB6B,EAAEO,OAAQP,EAAEQ,UAI7G,GAFAtB,EAAWe,IACXD,EAAIC,EAAKA,EAAKE,OAAS,IACjBE,UACmBrB,EAAQyB,eAAezB,EAAQyB,eAAeN,OAAS,GAC7DE,UAAYL,EAAEK,UAGjC,OADAL,EAAIA,EAAEI,MAAMrB,KAAKC,MAMrB,OADAZ,KAAKoB,YAAa,EACXP,EAEP,MACIH,KAAM,OACNW,QAAS,aAAexB,EAAO,iBAC/ByB,SAAUtB,KAAKD,gBAAgBuB,SAC/BxB,MAAOE,KAAKF,QAIxBF,EAASa,UAAUgB,KAAO,SAAUrB,EAAKkC,GACrC,IAAK,IAAWC,EAAPT,EAAI,EAAMA,EAAI1B,EAAI2B,OAAQD,IAE/B,GADAS,EAAID,EAAIE,KAAKpC,EAAKA,EAAI0B,IAElB,OAAOS,EAGf,OAAO,MAEX7C,EAAOD,QAAUG,EAUbO,EAAkBT,EAAOD,SAClBC,EAAOD,QACTU,EAAkBV,GAChBA,OADN","file":"../../../engine/tree/property.js","sourcesContent":["define([\n    './node',\n    './declaration'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Declaration = __module__1;\n    var Property = function (name, index, currentFileInfo) {\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    };\n    Property.prototype = new Node();\n    Property.prototype.type = 'Property';\n    Property.prototype.eval = function (context) {\n        var property, name = this.name;\n        var mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n        if (this.evaluating) {\n            throw {\n                type: 'Name',\n                message: 'Recursive property reference for ' + name,\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n            };\n        }\n        this.evaluating = true;\n        property = this.find(context.frames, function (frame) {\n            var v, vArr = frame.property(name);\n            if (vArr) {\n                for (var i = 0; i < vArr.length; i++) {\n                    v = vArr[i];\n                    vArr[i] = new Declaration(v.name, v.value, v.important, v.merge, v.index, v.currentFileInfo, v.inline, v.variable);\n                }\n                mergeRules(vArr);\n                v = vArr[vArr.length - 1];\n                if (v.important) {\n                    var importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                v = v.value.eval(context);\n                return v;\n            }\n        });\n        if (property) {\n            this.evaluating = false;\n            return property;\n        } else {\n            throw {\n                type: 'Name',\n                message: \"Property '\" + name + \"' is undefined\",\n                filename: this.currentFileInfo.filename,\n                index: this.index\n            };\n        }\n    };\n    Property.prototype.find = function (obj, fun) {\n        for (var i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    };\n    module.exports = Property;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}