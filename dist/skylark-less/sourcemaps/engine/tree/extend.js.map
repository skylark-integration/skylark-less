{"version":3,"sources":["engine/tree/extend.js"],"names":["Node","require","Selector","Extend","selector","option","index","currentFileInfo","visibilityInfo","this","object_id","next_id","parent_ids","_index","_fileInfo","copyVisibilityInfo","allowRoot","allowBefore","allowAfter","setParent","prototype","type","accept","visitor","visit","eval","context","getIndex","fileInfo","clone","findSelfSelectors","selectors","i","selectorElements","selfElements","length","elements","combinator","value","concat","selfSelectors","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,SAAWD,QAAQ,cAC7CE,OAAS,SAASA,EAAOC,EAAUC,EAAQC,EAAOC,EAAiBC,GASnE,OARAC,KAAKL,SAAWA,EAChBK,KAAKJ,OAASA,EACdI,KAAKC,UAAYP,EAAOQ,UACxBF,KAAKG,YAAcH,KAAKC,WACxBD,KAAKI,OAASP,EACdG,KAAKK,UAAYP,EACjBE,KAAKM,mBAAmBP,GACxBC,KAAKO,WAAY,EACTX,GACR,IAAK,MACDI,KAAKQ,aAAc,EACnBR,KAAKS,YAAa,EAClB,MACJ,QACIT,KAAKQ,aAAc,EACnBR,KAAKS,YAAa,EAGtBT,KAAKU,UAAUV,KAAKL,SAAUK,OAElCN,OAAOQ,QAAU,EACjBR,OAAOiB,UAAY,IAAIpB,KACvBG,OAAOiB,UAAUC,KAAO,SACxBlB,OAAOiB,UAAUE,OAAS,SAAUC,GAChCd,KAAKL,SAAWmB,EAAQC,MAAMf,KAAKL,WAEvCD,OAAOiB,UAAUK,KAAO,SAAUC,GAC9B,OAAO,IAAIvB,OAAOM,KAAKL,SAASqB,KAAKC,GAAUjB,KAAKJ,OAAQI,KAAKkB,WAAYlB,KAAKmB,WAAYnB,KAAKD,mBAEvGL,OAAOiB,UAAUS,MAAQ,SAAUH,GAC/B,OAAO,IAAIvB,OAAOM,KAAKL,SAAUK,KAAKJ,OAAQI,KAAKkB,WAAYlB,KAAKmB,WAAYnB,KAAKD,mBAEzFL,OAAOiB,UAAUU,kBAAoB,SAAUC,GAC3C,IAAuBC,EAAGC,EAAtBC,KACJ,IAAKF,EAAI,EAAGA,EAAID,EAAUI,OAAQH,IAC9BC,EAAmBF,EAAUC,GAAGI,SAC5BJ,EAAI,GAAKC,EAAiBE,QAAmD,KAAzCF,EAAiB,GAAGI,WAAWC,QACnEL,EAAiB,GAAGI,WAAWC,MAAQ,KAE3CJ,EAAeA,EAAaK,OAAOR,EAAUC,GAAGI,UAEpD3B,KAAK+B,eAAiB,IAAItC,SAASgC,IACnCzB,KAAK+B,cAAc,GAAGzB,mBAAmBN,KAAKD,mBAElDiC,OAAOC,QAAUvC","file":"../../../engine/tree/extend.js","sourcesContent":["var Node = require('./node'), Selector = require('./selector');\nvar Extend = function Extend(selector, option, index, currentFileInfo, visibilityInfo) {\n    this.selector = selector;\n    this.option = option;\n    this.object_id = Extend.next_id++;\n    this.parent_ids = [this.object_id];\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.copyVisibilityInfo(visibilityInfo);\n    this.allowRoot = true;\n    switch (option) {\n    case 'all':\n        this.allowBefore = true;\n        this.allowAfter = true;\n        break;\n    default:\n        this.allowBefore = false;\n        this.allowAfter = false;\n        break;\n    }\n    this.setParent(this.selector, this);\n};\nExtend.next_id = 0;\nExtend.prototype = new Node();\nExtend.prototype.type = 'Extend';\nExtend.prototype.accept = function (visitor) {\n    this.selector = visitor.visit(this.selector);\n};\nExtend.prototype.eval = function (context) {\n    return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n};\nExtend.prototype.clone = function (context) {\n    return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n};\nExtend.prototype.findSelfSelectors = function (selectors) {\n    var selfElements = [], i, selectorElements;\n    for (i = 0; i < selectors.length; i++) {\n        selectorElements = selectors[i].elements;\n        if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n            selectorElements[0].combinator.value = ' ';\n        }\n        selfElements = selfElements.concat(selectors[i].elements);\n    }\n    this.selfSelectors = [new Selector(selfElements)];\n    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n};\nmodule.exports = Extend;"]}