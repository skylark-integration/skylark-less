{"version":3,"sources":["engine/tree/js-eval-node.js"],"names":["Node","require","Variable","JsEvalNode","prototype","evaluateJavaScript","expression","context","result","that","this","evalContext","javascriptEnabled","message","filename","fileInfo","index","getIndex","replace","_","name","jsify","eval","Function","e","variables","frames","k","hasOwnProperty","slice","value","toJS","toCSS","call","obj","Array","isArray","length","map","v","join","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,SAAWD,QAAQ,cAC7CE,WAAa,aAEjBA,WAAWC,UAAY,IAAIJ,KAC3BG,WAAWC,UAAUC,mBAAqB,SAAUC,EAAYC,GAC5D,IAAIC,EAAQC,EAAOC,KAAMC,KACzB,IAAKJ,EAAQK,kBACT,MACIC,QAAS,+DACTC,SAAUJ,KAAKK,WAAWD,SAC1BE,MAAON,KAAKO,YAGpBX,EAAaA,EAAWY,QAAQ,iBAAkB,SAAUC,EAAGC,GAC3D,OAAOX,EAAKY,MAAM,IAAInB,SAAS,IAAMkB,EAAMX,EAAKQ,WAAYR,EAAKM,YAAYO,KAAKf,MAEtF,IACID,EAAa,IAAIiB,SAAS,WAAajB,EAAa,KACtD,MAAOkB,GACL,MACIX,QAAS,gCAAkCW,EAAEX,QAAU,UAAYP,EAAa,IAChFQ,SAAUJ,KAAKK,WAAWD,SAC1BE,MAAON,KAAKO,YAGpB,IAAIQ,EAAYlB,EAAQmB,OAAO,GAAGD,YAClC,IAAK,IAAIE,KAAKF,EACNA,EAAUG,eAAeD,KACzBhB,EAAYgB,EAAEE,MAAM,KAChBC,MAAOL,EAAUE,GAAGG,MACpBC,KAAM,WACF,OAAOrB,KAAKoB,MAAMR,KAAKf,GAASyB,WAKhD,IACIxB,EAASF,EAAW2B,KAAKtB,GAC3B,MAAOa,GACL,MACIX,QAAS,iCAAmCW,EAAEJ,KAAO,KAAOI,EAAEX,QAAQK,QAAQ,OAAQ,KAAO,IAC7FJ,SAAUJ,KAAKK,WAAWD,SAC1BE,MAAON,KAAKO,YAGpB,OAAOT,GAEXL,WAAWC,UAAUiB,MAAQ,SAAUa,GACnC,OAAIC,MAAMC,QAAQF,EAAIJ,QAAUI,EAAIJ,MAAMO,OAAS,EACxC,IAAMH,EAAIJ,MAAMQ,IAAI,SAAUC,GACjC,OAAOA,EAAEP,UACVQ,KAAK,MAAQ,IAETN,EAAIF,SAGnBS,OAAOC,QAAUvC","file":"../../../engine/tree/js-eval-node.js","sourcesContent":["var Node = require('./node'), Variable = require('./variable');\nvar JsEvalNode = function () {\n};\nJsEvalNode.prototype = new Node();\nJsEvalNode.prototype.evaluateJavaScript = function (expression, context) {\n    var result, that = this, evalContext = {};\n    if (!context.javascriptEnabled) {\n        throw {\n            message: 'Inline JavaScript is not enabled. Is it set in your options?',\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n        };\n    }\n    expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n        return that.jsify(new Variable('@' + name, that.getIndex(), that.fileInfo()).eval(context));\n    });\n    try {\n        expression = new Function('return (' + expression + ')');\n    } catch (e) {\n        throw {\n            message: 'JavaScript evaluation error: ' + e.message + ' from `' + expression + '`',\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n        };\n    }\n    var variables = context.frames[0].variables();\n    for (var k in variables) {\n        if (variables.hasOwnProperty(k)) {\n            evalContext[k.slice(1)] = {\n                value: variables[k].value,\n                toJS: function () {\n                    return this.value.eval(context).toCSS();\n                }\n            };\n        }\n    }\n    try {\n        result = expression.call(evalContext);\n    } catch (e) {\n        throw {\n            message: \"JavaScript evaluation error: '\" + e.name + ': ' + e.message.replace(/[\"]/g, \"'\") + \"'\",\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n        };\n    }\n    return result;\n};\nJsEvalNode.prototype.jsify = function (obj) {\n    if (Array.isArray(obj.value) && obj.value.length > 1) {\n        return '[' + obj.value.map(function (v) {\n            return v.toCSS();\n        }).join(', ') + ']';\n    } else {\n        return obj.toCSS();\n    }\n};\nmodule.exports = JsEvalNode;"]}