{"version":3,"sources":["engine/tree/js-eval-node.js"],"names":["define","__module__0","__module__1","exports","module","Variable","JsEvalNode","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","evaluateJavaScript","expression","context","result","that","this","evalContext","javascriptEnabled","message","filename","fileInfo","index","getIndex","replace","_","name","jsify","eval","Function","e","variables","frames","k","hasOwnProperty","slice","value","toJS","toCSS","call","length","map","v","join"],"mappings":";;;;;;;AAAAA,QACI,SACA,cACD,SAAUC,EAAaC,GACtB,aACA,IAAIC,KACAC,GAAWD,YACSE,EAAWH,EAC/BI,EAAa,aA8DjB,SAASC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OA/DAF,EAAWO,UAAY,IAHZZ,GAIUa,mBAAqB,SAAUC,EAAYC,GAC5D,IAAIC,EAAQC,EAAOC,KAAMC,KACzB,IAAKJ,EAAQK,kBACT,MACIC,QAAS,+DACTC,SAAUJ,KAAKK,WAAWD,SAC1BE,MAAON,KAAKO,YAGpBX,EAAaA,EAAWY,QAAQ,iBAAkB,SAAUC,EAAGC,GAC3D,OAAOX,EAAKY,MAAM,IAAIzB,EAAS,IAAMwB,EAAMX,EAAKQ,WAAYR,EAAKM,YAAYO,KAAKf,MAEtF,IACID,EAAa,IAAIiB,SAAS,WAAajB,EAAa,KACtD,MAAOkB,GACL,MACIX,QAAS,gCAAkCW,EAAEX,QAAU,UAAYP,EAAa,IAChFQ,SAAUJ,KAAKK,WAAWD,SAC1BE,MAAON,KAAKO,YAGpB,IAAIQ,EAAYlB,EAAQmB,OAAO,GAAGD,YAClC,IAAK,IAAIE,KAAKF,EACNA,EAAUG,eAAeD,KACzBhB,EAAYgB,EAAEE,MAAM,KAChBC,MAAOL,EAAUE,GAAGG,MACpBC,KAAM,WACF,OAAOrB,KAAKoB,MAAMR,KAAKf,GAASyB,WAKhD,IACIxB,EAASF,EAAW2B,KAAKtB,GAC3B,MAAOa,GACL,MACIX,QAAS,iCAAmCW,EAAEJ,KAAO,KAAOI,EAAEX,QAAQK,QAAQ,OAAQ,KAAO,IAC7FJ,SAAUJ,KAAKK,WAAWD,SAC1BE,MAAON,KAAKO,YAGpB,OAAOT,GAEXX,EAAWO,UAAUiB,MAAQ,SAAUtB,GACnC,OAAIC,MAAMC,QAAQF,EAAI+B,QAAU/B,EAAI+B,MAAMI,OAAS,EACxC,IAAMnC,EAAI+B,MAAMK,IAAI,SAAUC,GACjC,OAAOA,EAAEJ,UACVK,KAAK,MAAQ,IAETtC,EAAIiC,SAGnBrC,EAAOD,QAAUG,EAUbC,EAAkBH,EAAOD,SAClBC,EAAOD,QACTI,EAAkBJ,GAChBA,OADN","file":"../../../engine/tree/js-eval-node.js","sourcesContent":["define([\n    './node',\n    './variable'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Variable = __module__1;\n    var JsEvalNode = function () {\n    };\n    JsEvalNode.prototype = new Node();\n    JsEvalNode.prototype.evaluateJavaScript = function (expression, context) {\n        var result, that = this, evalContext = {};\n        if (!context.javascriptEnabled) {\n            throw {\n                message: 'Inline JavaScript is not enabled. Is it set in your options?',\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n            };\n        }\n        expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n            return that.jsify(new Variable('@' + name, that.getIndex(), that.fileInfo()).eval(context));\n        });\n        try {\n            expression = new Function('return (' + expression + ')');\n        } catch (e) {\n            throw {\n                message: 'JavaScript evaluation error: ' + e.message + ' from `' + expression + '`',\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n            };\n        }\n        var variables = context.frames[0].variables();\n        for (var k in variables) {\n            if (variables.hasOwnProperty(k)) {\n                evalContext[k.slice(1)] = {\n                    value: variables[k].value,\n                    toJS: function () {\n                        return this.value.eval(context).toCSS();\n                    }\n                };\n            }\n        }\n        try {\n            result = expression.call(evalContext);\n        } catch (e) {\n            throw {\n                message: \"JavaScript evaluation error: '\" + e.name + ': ' + e.message.replace(/[\"]/g, \"'\") + \"'\",\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n            };\n        }\n        return result;\n    };\n    JsEvalNode.prototype.jsify = function (obj) {\n        if (Array.isArray(obj.value) && obj.value.length > 1) {\n            return '[' + obj.value.map(function (v) {\n                return v.toCSS();\n            }).join(', ') + ']';\n        } else {\n            return obj.toCSS();\n        }\n    };\n    module.exports = JsEvalNode;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}