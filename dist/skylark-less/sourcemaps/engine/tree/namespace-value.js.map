{"version":3,"sources":["engine/tree/namespace-value.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","exports","module","Variable","Ruleset","Selector","NamespaceValue","ruleCall","lookups","important","index","fileInfo","this","value","_index","_fileInfo","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","eval","context","i","name","rules","length","lastDeclaration","charAt","substr","variables","variable","message","filename","getIndex","substring","properties","property","ruleset"],"mappings":";;;;;;;AAAAA,QACI,SACA,aACA,YACA,cACD,SAAUC,EAAaC,EAAaC,EAAaC,GAChD,aACA,IAAIC,KACAC,GAAWD,YACSE,EAAWL,EAAaM,EAAUL,EAAaM,EAAWL,EAC9EM,EAAiB,SAAUC,EAAUC,EAASC,EAAWC,EAAOC,GAChEC,KAAKC,MAAQN,EACbK,KAAKJ,QAAUA,EACfI,KAAKH,UAAYA,EACjBG,KAAKE,OAASJ,EACdE,KAAKG,UAAYJ,GA+DrB,SAASK,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAhEAX,EAAegB,UAAY,IARhBzB,GASc0B,KAAO,iBAChCjB,EAAegB,UAAUE,KAAO,SAAUC,GACtC,IAAIC,EAAMC,EAAMC,EAAQhB,KAAKC,MAAMW,KAAKC,GACxC,IAAKC,EAAI,EAAGA,EAAId,KAAKJ,QAAQqB,OAAQH,IAAK,CAKtC,GAJAC,EAAOf,KAAKJ,QAAQkB,GAChBR,MAAMC,QAAQS,KACdA,EAAQ,IAAIxB,GAAS,IAAIC,GAAauB,IAE7B,KAATD,EACAC,EAAQA,EAAME,uBACX,GAAuB,MAAnBH,EAAKI,OAAO,IAOnB,GANuB,MAAnBJ,EAAKI,OAAO,KACZJ,EAAO,IAAM,IAAIxB,EAASwB,EAAKK,OAAO,IAAIR,KAAKC,GAASZ,OAExDe,EAAMK,YACNL,EAAQA,EAAMM,SAASP,KAEtBC,EACD,MACIL,KAAM,OACNY,QAAS,YAAcR,EAAO,aAC9BS,SAAUxB,KAAKD,WAAWyB,SAC1B1B,MAAOE,KAAKyB,gBAGjB,CASH,GAPIV,EADyB,OAAzBA,EAAKW,UAAU,EAAG,GACX,IAAM,IAAInC,EAASwB,EAAKK,OAAO,IAAIR,KAAKC,GAASZ,MAE9B,MAAnBc,EAAKI,OAAO,GAAaJ,EAAO,IAAMA,EAE7CC,EAAMW,aACNX,EAAQA,EAAMY,SAASb,KAEtBC,EACD,MACIL,KAAM,OACNY,QAAS,aAAeR,EAAKK,OAAO,GAAK,cACzCI,SAAUxB,KAAKD,WAAWyB,SAC1B1B,MAAOE,KAAKyB,YAGpBT,EAAQA,EAAMA,EAAMC,OAAS,GAE7BD,EAAMf,QACNe,EAAQA,EAAMJ,KAAKC,GAASZ,OAE5Be,EAAMa,UACNb,EAAQA,EAAMa,QAAQjB,KAAKC,IAGnC,OAAOG,GAEX1B,EAAOD,QAAUK,EAUbU,EAAkBd,EAAOD,SAClBC,EAAOD,QACTe,EAAkBf,GAChBA,OADN","file":"../../../engine/tree/namespace-value.js","sourcesContent":["define([\n    './node',\n    './variable',\n    './ruleset',\n    './selector'\n], function (__module__0, __module__1, __module__2, __module__3) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Variable = __module__1, Ruleset = __module__2, Selector = __module__3;\n    var NamespaceValue = function (ruleCall, lookups, important, index, fileInfo) {\n        this.value = ruleCall;\n        this.lookups = lookups;\n        this.important = important;\n        this._index = index;\n        this._fileInfo = fileInfo;\n    };\n    NamespaceValue.prototype = new Node();\n    NamespaceValue.prototype.type = 'NamespaceValue';\n    NamespaceValue.prototype.eval = function (context) {\n        var i, j, name, rules = this.value.eval(context);\n        for (i = 0; i < this.lookups.length; i++) {\n            name = this.lookups[i];\n            if (Array.isArray(rules)) {\n                rules = new Ruleset([new Selector()], rules);\n            }\n            if (name === '') {\n                rules = rules.lastDeclaration();\n            } else if (name.charAt(0) === '@') {\n                if (name.charAt(1) === '@') {\n                    name = '@' + new Variable(name.substr(1)).eval(context).value;\n                }\n                if (rules.variables) {\n                    rules = rules.variable(name);\n                }\n                if (!rules) {\n                    throw {\n                        type: 'Name',\n                        message: 'variable ' + name + ' not found',\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex()\n                    };\n                }\n            } else {\n                if (name.substring(0, 2) === '$@') {\n                    name = '$' + new Variable(name.substr(1)).eval(context).value;\n                } else {\n                    name = name.charAt(0) === '$' ? name : '$' + name;\n                }\n                if (rules.properties) {\n                    rules = rules.property(name);\n                }\n                if (!rules) {\n                    throw {\n                        type: 'Name',\n                        message: 'property \"' + name.substr(1) + '\" not found',\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex()\n                    };\n                }\n                rules = rules[rules.length - 1];\n            }\n            if (rules.value) {\n                rules = rules.eval(context).value;\n            }\n            if (rules.ruleset) {\n                rules = rules.ruleset.eval(context);\n            }\n        }\n        return rules;\n    };\n    module.exports = NamespaceValue;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}