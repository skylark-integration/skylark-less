{"version":3,"sources":["engine/tree/namespace-value.js"],"names":["Node","require","Variable","Ruleset","Selector","NamespaceValue","ruleCall","lookups","important","index","fileInfo","this","value","_index","_fileInfo","prototype","type","eval","context","i","name","rules","length","Array","isArray","lastDeclaration","charAt","substr","variables","variable","message","filename","getIndex","substring","properties","property","ruleset","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,SAAWD,QAAQ,cAAeE,QAAUF,QAAQ,aAAcG,SAAWH,QAAQ,cAC/GI,eAAiB,SAAUC,EAAUC,EAASC,EAAWC,EAAOC,GAChEC,KAAKC,MAAQN,EACbK,KAAKJ,QAAUA,EACfI,KAAKH,UAAYA,EACjBG,KAAKE,OAASJ,EACdE,KAAKG,UAAYJ,GAErBL,eAAeU,UAAY,IAAIf,KAC/BK,eAAeU,UAAUC,KAAO,iBAChCX,eAAeU,UAAUE,KAAO,SAAUC,GACtC,IAAIC,EAAMC,EAAMC,EAAQV,KAAKC,MAAMK,KAAKC,GACxC,IAAKC,EAAI,EAAGA,EAAIR,KAAKJ,QAAQe,OAAQH,IAAK,CAKtC,GAJAC,EAAOT,KAAKJ,QAAQY,GAChBI,MAAMC,QAAQH,KACdA,EAAQ,IAAIlB,SAAS,IAAIC,UAAaiB,IAE7B,KAATD,EACAC,EAAQA,EAAMI,uBACX,GAAuB,MAAnBL,EAAKM,OAAO,IAOnB,GANuB,MAAnBN,EAAKM,OAAO,KACZN,EAAO,IAAM,IAAIlB,SAASkB,EAAKO,OAAO,IAAIV,KAAKC,GAASN,OAExDS,EAAMO,YACNP,EAAQA,EAAMQ,SAAST,KAEtBC,EACD,MACIL,KAAM,OACNc,QAAS,YAAcV,EAAO,aAC9BW,SAAUpB,KAAKD,WAAWqB,SAC1BtB,MAAOE,KAAKqB,gBAGjB,CASH,GAPIZ,EADyB,OAAzBA,EAAKa,UAAU,EAAG,GACX,IAAM,IAAI/B,SAASkB,EAAKO,OAAO,IAAIV,KAAKC,GAASN,MAE9B,MAAnBQ,EAAKM,OAAO,GAAaN,EAAO,IAAMA,EAE7CC,EAAMa,aACNb,EAAQA,EAAMc,SAASf,KAEtBC,EACD,MACIL,KAAM,OACNc,QAAS,aAAeV,EAAKO,OAAO,GAAK,cACzCI,SAAUpB,KAAKD,WAAWqB,SAC1BtB,MAAOE,KAAKqB,YAGpBX,EAAQA,EAAMA,EAAMC,OAAS,GAE7BD,EAAMT,QACNS,EAAQA,EAAMJ,KAAKC,GAASN,OAE5BS,EAAMe,UACNf,EAAQA,EAAMe,QAAQnB,KAAKC,IAGnC,OAAOG,GAEXgB,OAAOC,QAAUjC","file":"../../../engine/tree/namespace-value.js","sourcesContent":["var Node = require('./node'), Variable = require('./variable'), Ruleset = require('./ruleset'), Selector = require('./selector');\nvar NamespaceValue = function (ruleCall, lookups, important, index, fileInfo) {\n    this.value = ruleCall;\n    this.lookups = lookups;\n    this.important = important;\n    this._index = index;\n    this._fileInfo = fileInfo;\n};\nNamespaceValue.prototype = new Node();\nNamespaceValue.prototype.type = 'NamespaceValue';\nNamespaceValue.prototype.eval = function (context) {\n    var i, j, name, rules = this.value.eval(context);\n    for (i = 0; i < this.lookups.length; i++) {\n        name = this.lookups[i];\n        if (Array.isArray(rules)) {\n            rules = new Ruleset([new Selector()], rules);\n        }\n        if (name === '') {\n            rules = rules.lastDeclaration();\n        } else if (name.charAt(0) === '@') {\n            if (name.charAt(1) === '@') {\n                name = '@' + new Variable(name.substr(1)).eval(context).value;\n            }\n            if (rules.variables) {\n                rules = rules.variable(name);\n            }\n            if (!rules) {\n                throw {\n                    type: 'Name',\n                    message: 'variable ' + name + ' not found',\n                    filename: this.fileInfo().filename,\n                    index: this.getIndex()\n                };\n            }\n        } else {\n            if (name.substring(0, 2) === '$@') {\n                name = '$' + new Variable(name.substr(1)).eval(context).value;\n            } else {\n                name = name.charAt(0) === '$' ? name : '$' + name;\n            }\n            if (rules.properties) {\n                rules = rules.property(name);\n            }\n            if (!rules) {\n                throw {\n                    type: 'Name',\n                    message: 'property \"' + name.substr(1) + '\" not found',\n                    filename: this.fileInfo().filename,\n                    index: this.getIndex()\n                };\n            }\n            rules = rules[rules.length - 1];\n        }\n        if (rules.value) {\n            rules = rules.eval(context).value;\n        }\n        if (rules.ruleset) {\n            rules = rules.ruleset.eval(context);\n        }\n    }\n    return rules;\n};\nmodule.exports = NamespaceValue;"]}