{"version":3,"sources":["engine/tree/unit.js"],"names":["Node","require","unitConversions","utils","Unit","numerator","denominator","backupUnit","this","copyArray","sort","length","prototype","type","clone","genCSS","context","output","strictUnits","add","toString","i","returnStr","join","compare","other","is","undefined","unitString","toUpperCase","isLength","RegExp","test","toCSS","isEmpty","isSingular","map","callback","usedUnits","group","mapUnit","groupName","result","atomicUnit","hasOwnProperty","cancel","counter","count","push","module","exports"],"mappings":"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","file":"../../../engine/tree/unit.js","sourcesContent":["var Node = require('./node'), unitConversions = require('../data/unit-conversions'), utils = require('../utils');\nvar Unit = function (numerator, denominator, backupUnit) {\n    this.numerator = numerator ? utils.copyArray(numerator).sort() : [];\n    this.denominator = denominator ? utils.copyArray(denominator).sort() : [];\n    if (backupUnit) {\n        this.backupUnit = backupUnit;\n    } else if (numerator && numerator.length) {\n        this.backupUnit = numerator[0];\n    }\n};\nUnit.prototype = new Node();\nUnit.prototype.type = 'Unit';\nUnit.prototype.clone = function () {\n    return new Unit(utils.copyArray(this.numerator), utils.copyArray(this.denominator), this.backupUnit);\n};\nUnit.prototype.genCSS = function (context, output) {\n    var strictUnits = context && context.strictUnits;\n    if (this.numerator.length === 1) {\n        output.add(this.numerator[0]);\n    } else if (!strictUnits && this.backupUnit) {\n        output.add(this.backupUnit);\n    } else if (!strictUnits && this.denominator.length) {\n        output.add(this.denominator[0]);\n    }\n};\nUnit.prototype.toString = function () {\n    var i, returnStr = this.numerator.join('*');\n    for (i = 0; i < this.denominator.length; i++) {\n        returnStr += '/' + this.denominator[i];\n    }\n    return returnStr;\n};\nUnit.prototype.compare = function (other) {\n    return this.is(other.toString()) ? 0 : undefined;\n};\nUnit.prototype.is = function (unitString) {\n    return this.toString().toUpperCase() === unitString.toUpperCase();\n};\nUnit.prototype.isLength = function () {\n    return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n};\nUnit.prototype.isEmpty = function () {\n    return this.numerator.length === 0 && this.denominator.length === 0;\n};\nUnit.prototype.isSingular = function () {\n    return this.numerator.length <= 1 && this.denominator.length === 0;\n};\nUnit.prototype.map = function (callback) {\n    var i;\n    for (i = 0; i < this.numerator.length; i++) {\n        this.numerator[i] = callback(this.numerator[i], false);\n    }\n    for (i = 0; i < this.denominator.length; i++) {\n        this.denominator[i] = callback(this.denominator[i], true);\n    }\n};\nUnit.prototype.usedUnits = function () {\n    var group, result = {}, mapUnit, groupName;\n    mapUnit = function (atomicUnit) {\n        if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n            result[groupName] = atomicUnit;\n        }\n        return atomicUnit;\n    };\n    for (groupName in unitConversions) {\n        if (unitConversions.hasOwnProperty(groupName)) {\n            group = unitConversions[groupName];\n            this.map(mapUnit);\n        }\n    }\n    return result;\n};\nUnit.prototype.cancel = function () {\n    var counter = {}, atomicUnit, i;\n    for (i = 0; i < this.numerator.length; i++) {\n        atomicUnit = this.numerator[i];\n        counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n    }\n    for (i = 0; i < this.denominator.length; i++) {\n        atomicUnit = this.denominator[i];\n        counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n    }\n    this.numerator = [];\n    this.denominator = [];\n    for (atomicUnit in counter) {\n        if (counter.hasOwnProperty(atomicUnit)) {\n            var count = counter[atomicUnit];\n            if (count > 0) {\n                for (i = 0; i < count; i++) {\n                    this.numerator.push(atomicUnit);\n                }\n            } else if (count < 0) {\n                for (i = 0; i < -count; i++) {\n                    this.denominator.push(atomicUnit);\n                }\n            }\n        }\n    }\n    this.numerator.sort();\n    this.denominator.sort();\n};\nmodule.exports = Unit;"]}