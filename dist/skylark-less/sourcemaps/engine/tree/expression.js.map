{"version":3,"sources":["engine/tree/expression.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","__module__4","exports","module","Node","Paren","Comment","Dimension","MATH","Math","Expression","value","noSpacing","this","Error","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","accept","visitor","visitArray","eval","context","returnValue","mathOn","isMathOn","inParenthesis","parens","math","STRICT_LEGACY","parensInOp","doubleParen","length","map","e","inCalc","outOfParenthesis","genCSS","output","i","add","throwAwayComments","filter","v"],"mappings":";;;;;;;AAAAA,QACI,SACA,UACA,YACA,cACA,gBACD,SAAUC,EAAaC,EAAaC,EAAaC,EAAaC,GAC7D,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAOP,EAAaQ,EAAQP,EAAaQ,EAAUP,EAAaQ,EAAYP,EAAaQ,EAAOP,EAAYQ,KAC5GC,EAAa,SAAUC,EAAOC,GAG9B,GAFAC,KAAKF,MAAQA,EACbE,KAAKD,UAAYA,GACZD,EACD,MAAM,IAAIG,MAAM,2CAwDxB,SAASC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAxDAN,EAAWW,UAAY,IAAIjB,GACNkB,KAAO,aAC5BZ,EAAWW,UAAUE,OAAS,SAAUC,GACpCX,KAAKF,MAAQa,EAAQC,WAAWZ,KAAKF,QAEzCD,EAAWW,UAAUK,KAAO,SAAUC,GAClC,IAAIC,EAAaC,EAASF,EAAQG,WAAYC,EAAgBlB,KAAKmB,SAAWL,EAAQM,OAASzB,EAAK0B,gBAAkBrB,KAAKsB,YAAaC,GAAc,EAyBtJ,OAxBIL,GACAJ,EAAQI,gBAERlB,KAAKF,MAAM0B,OAAS,EACpBT,EAAc,IAAIlB,EAAWG,KAAKF,MAAM2B,IAAI,SAAUC,GAClD,OAAKA,EAAEb,KAGAa,EAAEb,KAAKC,GAFHY,IAGX1B,KAAKD,WACoB,IAAtBC,KAAKF,MAAM0B,SACdxB,KAAKF,MAAM,GAAGqB,QAAWnB,KAAKF,MAAM,GAAGwB,YAAeR,EAAQa,SAC9DJ,GAAc,GAElBR,EAAcf,KAAKF,MAAM,GAAGe,KAAKC,IAEjCC,EAAcf,KAEdkB,GACAJ,EAAQc,oBAER5B,KAAKmB,SAAUnB,KAAKsB,YAAeN,GAAWO,GAAiBR,aAAuBrB,IACtFqB,EAAc,IAAIvB,EAAMuB,IAErBA,GAEXlB,EAAWW,UAAUqB,OAAS,SAAUf,EAASgB,GAC7C,IAAK,IAAIC,EAAI,EAAGA,EAAI/B,KAAKF,MAAM0B,OAAQO,IACnC/B,KAAKF,MAAMiC,GAAGF,OAAOf,EAASgB,IACzB9B,KAAKD,WAAagC,EAAI,EAAI/B,KAAKF,MAAM0B,QACtCM,EAAOE,IAAI,MAIvBnC,EAAWW,UAAUyB,kBAAoB,WACrCjC,KAAKF,MAAQE,KAAKF,MAAMoC,OAAO,SAAUC,GACrC,QAASA,aAAa1C,MAG9BH,EAAOD,QAAUQ,EAUbK,EAAkBZ,EAAOD,SAClBC,EAAOD,QACTa,EAAkBb,GAChBA,OADN","file":"../../../engine/tree/expression.js","sourcesContent":["define([\n    './node',\n    './paren',\n    './comment',\n    './dimension',\n    '../constants'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Paren = __module__1, Comment = __module__2, Dimension = __module__3, MATH = __module__4.Math;\n    var Expression = function (value, noSpacing) {\n        this.value = value;\n        this.noSpacing = noSpacing;\n        if (!value) {\n            throw new Error('Expression requires an array parameter');\n        }\n    };\n    Expression.prototype = new Node();\n    Expression.prototype.type = 'Expression';\n    Expression.prototype.accept = function (visitor) {\n        this.value = visitor.visitArray(this.value);\n    };\n    Expression.prototype.eval = function (context) {\n        var returnValue, mathOn = context.isMathOn(), inParenthesis = this.parens && (context.math !== MATH.STRICT_LEGACY || !this.parensInOp), doubleParen = false;\n        if (inParenthesis) {\n            context.inParenthesis();\n        }\n        if (this.value.length > 1) {\n            returnValue = new Expression(this.value.map(function (e) {\n                if (!e.eval) {\n                    return e;\n                }\n                return e.eval(context);\n            }), this.noSpacing);\n        } else if (this.value.length === 1) {\n            if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n                doubleParen = true;\n            }\n            returnValue = this.value[0].eval(context);\n        } else {\n            returnValue = this;\n        }\n        if (inParenthesis) {\n            context.outOfParenthesis();\n        }\n        if (this.parens && this.parensInOp && !mathOn && !doubleParen && !(returnValue instanceof Dimension)) {\n            returnValue = new Paren(returnValue);\n        }\n        return returnValue;\n    };\n    Expression.prototype.genCSS = function (context, output) {\n        for (var i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (!this.noSpacing && i + 1 < this.value.length) {\n                output.add(' ');\n            }\n        }\n    };\n    Expression.prototype.throwAwayComments = function () {\n        this.value = this.value.filter(function (v) {\n            return !(v instanceof Comment);\n        });\n    };\n    module.exports = Expression;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}