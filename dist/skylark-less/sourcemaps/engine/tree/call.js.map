{"version":3,"sources":["engine/tree/call.js"],"names":["Node","require","Anonymous","FunctionCaller","Call","name","args","index","currentFileInfo","this","calc","_index","_fileInfo","prototype","type","accept","visitor","visitArray","eval","context","currentMathContext","mathOn","inCalc","enterCalc","map","a","exitCalc","result","funcCaller","getIndex","fileInfo","isValid","call","e","message","filename","line","lineNumber","column","columnNumber","undefined","toString","genCSS","output","add","i","length","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,UAAYD,QAAQ,eAAgBE,eAAiBF,QAAQ,gCACvFG,KAAO,SAAUC,EAAMC,EAAMC,EAAOC,GACpCC,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EACZG,KAAKC,KAAgB,SAATL,EACZI,KAAKE,OAASJ,EACdE,KAAKG,UAAYJ,GAErBJ,KAAKS,UAAY,IAAIb,KACrBI,KAAKS,UAAUC,KAAO,OACtBV,KAAKS,UAAUE,OAAS,SAAUC,GAC1BP,KAAKH,OACLG,KAAKH,KAAOU,EAAQC,WAAWR,KAAKH,QAG5CF,KAAKS,UAAUK,KAAO,SAAUC,GAC5B,IAAIC,EAAqBD,EAAQE,OACjCF,EAAQE,QAAUZ,KAAKC,MACnBD,KAAKC,MAAQS,EAAQG,SACrBH,EAAQI,YAEZ,IAAIjB,EAAOG,KAAKH,KAAKkB,IAAI,SAAUC,GAC/B,OAAOA,EAAEP,KAAKC,MAEdV,KAAKC,MAAQS,EAAQG,SACrBH,EAAQO,WAEZP,EAAQE,OAASD,EACjB,IAAIO,EAAQC,EAAa,IAAIzB,eAAeM,KAAKJ,KAAMc,EAASV,KAAKoB,WAAYpB,KAAKqB,YACtF,GAAIF,EAAWG,UAAW,CACtB,IACIJ,EAASC,EAAWI,KAAK1B,GAC3B,MAAO2B,GACL,MACInB,KAAMmB,EAAEnB,MAAQ,UAChBoB,QAAS,8BAAgCzB,KAAKJ,KAAO,KAAO4B,EAAEC,QAAU,KAAOD,EAAEC,QAAU,IAC3F3B,MAAOE,KAAKoB,WACZM,SAAU1B,KAAKqB,WAAWK,SAC1BC,KAAMH,EAAEI,WACRC,OAAQL,EAAEM,cAGlB,GAAe,OAAXZ,QAA8Ba,IAAXb,EAUnB,OATMA,aAAkB3B,OAIhB2B,EAAS,IAAIzB,UAHZyB,IAAqB,IAAXA,EAGYA,EAAOc,WAFP,OAK/Bd,EAAOhB,OAASF,KAAKE,OACrBgB,EAAOf,UAAYH,KAAKG,UACjBe,EAGf,OAAO,IAAIvB,KAAKK,KAAKJ,KAAMC,EAAMG,KAAKoB,WAAYpB,KAAKqB,aAE3D1B,KAAKS,UAAU6B,OAAS,SAAUvB,EAASwB,GACvCA,EAAOC,IAAInC,KAAKJ,KAAO,IAAKI,KAAKqB,WAAYrB,KAAKoB,YAClD,IAAK,IAAIgB,EAAI,EAAGA,EAAIpC,KAAKH,KAAKwC,OAAQD,IAClCpC,KAAKH,KAAKuC,GAAGH,OAAOvB,EAASwB,GACzBE,EAAI,EAAIpC,KAAKH,KAAKwC,QAClBH,EAAOC,IAAI,MAGnBD,EAAOC,IAAI,MAEfG,OAAOC,QAAU5C","file":"../../../engine/tree/call.js","sourcesContent":["var Node = require('./node'), Anonymous = require('./anonymous'), FunctionCaller = require('../functions/function-caller');\nvar Call = function (name, args, index, currentFileInfo) {\n    this.name = name;\n    this.args = args;\n    this.calc = name === 'calc';\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\nCall.prototype = new Node();\nCall.prototype.type = 'Call';\nCall.prototype.accept = function (visitor) {\n    if (this.args) {\n        this.args = visitor.visitArray(this.args);\n    }\n};\nCall.prototype.eval = function (context) {\n    var currentMathContext = context.mathOn;\n    context.mathOn = !this.calc;\n    if (this.calc || context.inCalc) {\n        context.enterCalc();\n    }\n    var args = this.args.map(function (a) {\n        return a.eval(context);\n    });\n    if (this.calc || context.inCalc) {\n        context.exitCalc();\n    }\n    context.mathOn = currentMathContext;\n    var result, funcCaller = new FunctionCaller(this.name, context, this.getIndex(), this.fileInfo());\n    if (funcCaller.isValid()) {\n        try {\n            result = funcCaller.call(args);\n        } catch (e) {\n            throw {\n                type: e.type || 'Runtime',\n                message: 'error evaluating function `' + this.name + '`' + (e.message ? ': ' + e.message : ''),\n                index: this.getIndex(),\n                filename: this.fileInfo().filename,\n                line: e.lineNumber,\n                column: e.columnNumber\n            };\n        }\n        if (result !== null && result !== undefined) {\n            if (!(result instanceof Node)) {\n                if (!result || result === true) {\n                    result = new Anonymous(null);\n                } else {\n                    result = new Anonymous(result.toString());\n                }\n            }\n            result._index = this._index;\n            result._fileInfo = this._fileInfo;\n            return result;\n        }\n    }\n    return new Call(this.name, args, this.getIndex(), this.fileInfo());\n};\nCall.prototype.genCSS = function (context, output) {\n    output.add(this.name + '(', this.fileInfo(), this.getIndex());\n    for (var i = 0; i < this.args.length; i++) {\n        this.args[i].genCSS(context, output);\n        if (i + 1 < this.args.length) {\n            output.add(', ');\n        }\n    }\n    output.add(')');\n};\nmodule.exports = Call;"]}