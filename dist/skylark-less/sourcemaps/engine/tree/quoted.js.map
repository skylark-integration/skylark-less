{"version":3,"sources":["engine/tree/quoted.js"],"names":["Node","require","Variable","Property","Quoted","str","content","escaped","index","currentFileInfo","this","value","quote","charAt","_index","_fileInfo","variableRegex","propRegex","prototype","type","genCSS","context","output","add","fileInfo","getIndex","containsVariables","match","eval","that","iterativeReplace","regexp","replacementFnc","evaluatedValue","replace","_","name","v","toCSS","compare","other","undefined","numericCompare","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,SAAWD,QAAQ,cAAeE,SAAWF,QAAQ,cAC/EG,OAAS,SAAUC,EAAKC,EAASC,EAASC,EAAOC,GACjDC,KAAKH,QAAqB,MAAXA,GAAyBA,EACxCG,KAAKC,MAAQL,GAAW,GACxBI,KAAKE,MAAQP,EAAIQ,OAAO,GACxBH,KAAKI,OAASN,EACdE,KAAKK,UAAYN,EACjBC,KAAKM,cAAgB,iBACrBN,KAAKO,UAAY,mBAErBb,OAAOc,UAAY,IAAIlB,KACvBI,OAAOc,UAAUC,KAAO,SACxBf,OAAOc,UAAUE,OAAS,SAAUC,EAASC,GACpCZ,KAAKH,SACNe,EAAOC,IAAIb,KAAKE,MAAOF,KAAKc,WAAYd,KAAKe,YAEjDH,EAAOC,IAAIb,KAAKC,OACXD,KAAKH,SACNe,EAAOC,IAAIb,KAAKE,QAGxBR,OAAOc,UAAUQ,kBAAoB,WACjC,OAAOhB,KAAKC,MAAMgB,MAAMjB,KAAKM,gBAEjCZ,OAAOc,UAAUU,KAAO,SAAUP,GAC9B,IAAIQ,EAAOnB,KAAMC,EAAQD,KAAKC,MAS9B,SAASmB,EAAiBnB,EAAOoB,EAAQC,GACrC,IAAIC,EAAiBtB,EACrB,GAEIsB,GADAtB,EAAQsB,GACeC,QAAQH,EAAQC,SAClCrB,IAAUsB,GACnB,OAAOA,EAIX,OADAtB,EAAQmB,EADRnB,EAAQmB,EAAiBnB,EAAOD,KAAKM,cAhBX,SAAUmB,EAAGC,GACnC,IAAIC,EAAI,IAAInC,SAAS,IAAMkC,EAAMP,EAAKJ,WAAYI,EAAKL,YAAYI,KAAKP,GAAS,GACjF,OAAOgB,aAAajC,OAASiC,EAAE1B,MAAQ0B,EAAEC,UAeb5B,KAAKO,UAbX,SAAUkB,EAAGC,GACnC,IAAIC,EAAI,IAAIlC,SAAS,IAAMiC,EAAMP,EAAKJ,WAAYI,EAAKL,YAAYI,KAAKP,GAAS,GACjF,OAAOgB,aAAajC,OAASiC,EAAE1B,MAAQ0B,EAAEC,UAYtC,IAAIlC,OAAOM,KAAKE,MAAQD,EAAQD,KAAKE,MAAOD,EAAOD,KAAKH,QAASG,KAAKe,WAAYf,KAAKc,aAElGpB,OAAOc,UAAUqB,QAAU,SAAUC,GACjC,MAAmB,WAAfA,EAAMrB,MAAsBT,KAAKH,SAAYiC,EAAMjC,QAG5CiC,EAAMF,OAAS5B,KAAK4B,UAAYE,EAAMF,QAAU,OAAIG,EAFpDzC,KAAK0C,eAAehC,KAAKC,MAAO6B,EAAM7B,QAKrDgC,OAAOC,QAAUxC","file":"../../../engine/tree/quoted.js","sourcesContent":["var Node = require('./node'), Variable = require('./variable'), Property = require('./property');\nvar Quoted = function (str, content, escaped, index, currentFileInfo) {\n    this.escaped = escaped == null ? true : escaped;\n    this.value = content || '';\n    this.quote = str.charAt(0);\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n    this.variableRegex = /@\\{([\\w-]+)\\}/g;\n    this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n};\nQuoted.prototype = new Node();\nQuoted.prototype.type = 'Quoted';\nQuoted.prototype.genCSS = function (context, output) {\n    if (!this.escaped) {\n        output.add(this.quote, this.fileInfo(), this.getIndex());\n    }\n    output.add(this.value);\n    if (!this.escaped) {\n        output.add(this.quote);\n    }\n};\nQuoted.prototype.containsVariables = function () {\n    return this.value.match(this.variableRegex);\n};\nQuoted.prototype.eval = function (context) {\n    var that = this, value = this.value;\n    var variableReplacement = function (_, name) {\n        var v = new Variable('@' + name, that.getIndex(), that.fileInfo()).eval(context, true);\n        return v instanceof Quoted ? v.value : v.toCSS();\n    };\n    var propertyReplacement = function (_, name) {\n        var v = new Property('$' + name, that.getIndex(), that.fileInfo()).eval(context, true);\n        return v instanceof Quoted ? v.value : v.toCSS();\n    };\n    function iterativeReplace(value, regexp, replacementFnc) {\n        var evaluatedValue = value;\n        do {\n            value = evaluatedValue;\n            evaluatedValue = value.replace(regexp, replacementFnc);\n        } while (value !== evaluatedValue);\n        return evaluatedValue;\n    }\n    value = iterativeReplace(value, this.variableRegex, variableReplacement);\n    value = iterativeReplace(value, this.propRegex, propertyReplacement);\n    return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n};\nQuoted.prototype.compare = function (other) {\n    if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n        return Node.numericCompare(this.value, other.value);\n    } else {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    }\n};\nmodule.exports = Quoted;"]}