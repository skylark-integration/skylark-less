{"version":3,"sources":["engine/tree/quoted.js"],"names":["define","__module__0","__module__1","__module__2","exports","module","Node","Variable","Property","Quoted","str","content","escaped","index","currentFileInfo","this","value","quote","charAt","_index","_fileInfo","variableRegex","propRegex","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","genCSS","context","output","add","fileInfo","getIndex","containsVariables","match","eval","that","iterativeReplace","regexp","replacementFnc","evaluatedValue","replace","_","name","v","toCSS","compare","other","undefined","numericCompare"],"mappings":";;;;;;;AAAAA,QACI,SACA,aACA,cACD,SAAUC,EAAaC,EAAaC,GACnC,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAOL,EAAaM,EAAWL,EAAaM,EAAWL,EACvDM,EAAS,SAAUC,EAAKC,EAASC,EAASC,EAAOC,GACjDC,KAAKH,QAAqB,MAAXA,GAAyBA,EACxCG,KAAKC,MAAQL,GAAW,GACxBI,KAAKE,MAAQP,EAAIQ,OAAO,GACxBH,KAAKI,OAASN,EACdE,KAAKK,UAAYN,EACjBC,KAAKM,cAAgB,iBACrBN,KAAKO,UAAY,mBAoDrB,SAASC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OArDAf,EAAOoB,UAAY,IAAIvB,GACNwB,KAAO,SACxBrB,EAAOoB,UAAUE,OAAS,SAAUC,EAASC,GACpClB,KAAKH,SACNqB,EAAOC,IAAInB,KAAKE,MAAOF,KAAKoB,WAAYpB,KAAKqB,YAEjDH,EAAOC,IAAInB,KAAKC,OACXD,KAAKH,SACNqB,EAAOC,IAAInB,KAAKE,QAGxBR,EAAOoB,UAAUQ,kBAAoB,WACjC,OAAOtB,KAAKC,MAAMsB,MAAMvB,KAAKM,gBAEjCZ,EAAOoB,UAAUU,KAAO,SAAUP,GAC9B,IAAIQ,EAAOzB,KAAMC,EAAQD,KAAKC,MAS9B,SAASyB,EAAiBzB,EAAO0B,EAAQC,GACrC,IAAIC,EAAiB5B,EACrB,GAEI4B,GADA5B,EAAQ4B,GACeC,QAAQH,EAAQC,SAClC3B,IAAU4B,GACnB,OAAOA,EAIX,OADA5B,EAAQyB,EADRzB,EAAQyB,EAAiBzB,EAAOD,KAAKM,cAhBX,SAAUyB,EAAGC,GACnC,IAAIC,EAAI,IAAIzC,EAAS,IAAMwC,EAAMP,EAAKJ,WAAYI,EAAKL,YAAYI,KAAKP,GAAS,GACjF,OAAOgB,aAAavC,EAASuC,EAAEhC,MAAQgC,EAAEC,UAeblC,KAAKO,UAbX,SAAUwB,EAAGC,GACnC,IAAIC,EAAI,IAAIxC,EAAS,IAAMuC,EAAMP,EAAKJ,WAAYI,EAAKL,YAAYI,KAAKP,GAAS,GACjF,OAAOgB,aAAavC,EAASuC,EAAEhC,MAAQgC,EAAEC,UAYtC,IAAIxC,EAAOM,KAAKE,MAAQD,EAAQD,KAAKE,MAAOD,EAAOD,KAAKH,QAASG,KAAKqB,WAAYrB,KAAKoB,aAElG1B,EAAOoB,UAAUqB,QAAU,SAAUC,GACjC,MAAmB,WAAfA,EAAMrB,MAAsBf,KAAKH,SAAYuC,EAAMvC,QAG5CuC,EAAMF,OAASlC,KAAKkC,UAAYE,EAAMF,QAAU,OAAIG,EAFpD9C,EAAK+C,eAAetC,KAAKC,MAAOmC,EAAMnC,QAKrDX,EAAOD,QAAUK,EAUbc,EAAkBlB,EAAOD,SAClBC,EAAOD,QACTmB,EAAkBnB,GAChBA,OADN","file":"../../../engine/tree/quoted.js","sourcesContent":["define([\n    './node',\n    './variable',\n    './property'\n], function (__module__0, __module__1, __module__2) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Variable = __module__1, Property = __module__2;\n    var Quoted = function (str, content, escaped, index, currentFileInfo) {\n        this.escaped = escaped == null ? true : escaped;\n        this.value = content || '';\n        this.quote = str.charAt(0);\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.variableRegex = /@\\{([\\w-]+)\\}/g;\n        this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n    };\n    Quoted.prototype = new Node();\n    Quoted.prototype.type = 'Quoted';\n    Quoted.prototype.genCSS = function (context, output) {\n        if (!this.escaped) {\n            output.add(this.quote, this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n        if (!this.escaped) {\n            output.add(this.quote);\n        }\n    };\n    Quoted.prototype.containsVariables = function () {\n        return this.value.match(this.variableRegex);\n    };\n    Quoted.prototype.eval = function (context) {\n        var that = this, value = this.value;\n        var variableReplacement = function (_, name) {\n            var v = new Variable('@' + name, that.getIndex(), that.fileInfo()).eval(context, true);\n            return v instanceof Quoted ? v.value : v.toCSS();\n        };\n        var propertyReplacement = function (_, name) {\n            var v = new Property('$' + name, that.getIndex(), that.fileInfo()).eval(context, true);\n            return v instanceof Quoted ? v.value : v.toCSS();\n        };\n        function iterativeReplace(value, regexp, replacementFnc) {\n            var evaluatedValue = value;\n            do {\n                value = evaluatedValue;\n                evaluatedValue = value.replace(regexp, replacementFnc);\n            } while (value !== evaluatedValue);\n            return evaluatedValue;\n        }\n        value = iterativeReplace(value, this.variableRegex, variableReplacement);\n        value = iterativeReplace(value, this.propRegex, propertyReplacement);\n        return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n    };\n    Quoted.prototype.compare = function (other) {\n        if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n            return Node.numericCompare(this.value, other.value);\n        } else {\n            return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n        }\n    };\n    module.exports = Quoted;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}