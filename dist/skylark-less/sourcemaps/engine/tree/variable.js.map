{"version":3,"sources":["engine/tree/variable.js"],"names":["define","__module__0","__module__1","exports","module","Call","Variable","name","index","currentFileInfo","this","_index","_fileInfo","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","type","eval","context","variable","indexOf","slice","getIndex","fileInfo","value","evaluating","message","filename","find","frames","frame","v","important","importantScope","length","inCalc","fun","r","i","call"],"mappings":";;;;;;;AAAAA,QACI,SACA,UACD,SAAUC,EAAaC,GACtB,aACA,IAAIC,KACAC,GAAWD,YACSE,EAAOH,EAC3BI,EAAW,SAAUC,EAAMC,EAAOC,GAClCC,KAAKH,KAAOA,EACZG,KAAKC,OAASH,EACdE,KAAKE,UAAYH,GA4DrB,SAASI,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OA7DAR,EAASa,UAAY,IANVlB,GAOQmB,KAAO,WAC1Bd,EAASa,UAAUE,KAAO,SAAUC,GAChC,IAAIC,EAAUhB,EAAOG,KAAKH,KAI1B,GAH2B,IAAvBA,EAAKiB,QAAQ,QACbjB,EAAO,IAAM,IAAID,EAASC,EAAKkB,MAAM,GAAIf,KAAKgB,WAAYhB,KAAKiB,YAAYN,KAAKC,GAASM,OAEzFlB,KAAKmB,WACL,MACIT,KAAM,OACNU,QAAS,qCAAuCvB,EAChDwB,SAAUrB,KAAKiB,WAAWI,SAC1BvB,MAAOE,KAAKgB,YAkBpB,GAfAhB,KAAKmB,YAAa,EAClBN,EAAWb,KAAKsB,KAAKV,EAAQW,OAAQ,SAAUC,GAC3C,IAAIC,EAAID,EAAMX,SAAShB,GACvB,GAAI4B,EAAG,CACH,GAAIA,EAAEC,UACmBd,EAAQe,eAAef,EAAQe,eAAeC,OAAS,GAC7DF,UAAYD,EAAEC,UAEjC,OAAId,EAAQiB,OACD,IAAIlC,EAAK,SAAU8B,EAAEP,QAAQP,KAAKC,GAElCa,EAAEP,MAAMP,KAAKC,MAM5B,OADAZ,KAAKmB,YAAa,EACXN,EAEP,MACIH,KAAM,OACNU,QAAS,YAAcvB,EAAO,gBAC9BwB,SAAUrB,KAAKiB,WAAWI,SAC1BvB,MAAOE,KAAKgB,aAIxBpB,EAASa,UAAUa,KAAO,SAAUlB,EAAK0B,GACrC,IAAK,IAAWC,EAAPC,EAAI,EAAMA,EAAI5B,EAAIwB,OAAQI,IAE/B,GADAD,EAAID,EAAIG,KAAK7B,EAAKA,EAAI4B,IAElB,OAAOD,EAGf,OAAO,MAEXrC,EAAOD,QAAUG,EAUbO,EAAkBT,EAAOD,SAClBC,EAAOD,QACTU,EAAkBV,GAChBA,OADN","file":"../../../engine/tree/variable.js","sourcesContent":["define([\n    './node',\n    './call'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var Node = __module__0, Call = __module__1;\n    var Variable = function (name, index, currentFileInfo) {\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    };\n    Variable.prototype = new Node();\n    Variable.prototype.type = 'Variable';\n    Variable.prototype.eval = function (context) {\n        var variable, name = this.name;\n        if (name.indexOf('@@') === 0) {\n            name = '@' + new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value;\n        }\n        if (this.evaluating) {\n            throw {\n                type: 'Name',\n                message: 'Recursive variable definition for ' + name,\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n            };\n        }\n        this.evaluating = true;\n        variable = this.find(context.frames, function (frame) {\n            var v = frame.variable(name);\n            if (v) {\n                if (v.important) {\n                    var importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                if (context.inCalc) {\n                    return new Call('_SELF', [v.value]).eval(context);\n                } else {\n                    return v.value.eval(context);\n                }\n            }\n        });\n        if (variable) {\n            this.evaluating = false;\n            return variable;\n        } else {\n            throw {\n                type: 'Name',\n                message: 'variable ' + name + ' is undefined',\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n            };\n        }\n    };\n    Variable.prototype.find = function (obj, fun) {\n        for (var i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    };\n    module.exports = Variable;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}