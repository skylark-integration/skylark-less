{"version":3,"sources":["engine/tree/variable.js"],"names":["Node","require","Call","Variable","name","index","currentFileInfo","this","_index","_fileInfo","prototype","type","eval","context","variable","indexOf","slice","getIndex","fileInfo","value","evaluating","message","filename","find","frames","frame","v","important","importantScope","length","inCalc","obj","fun","r","i","call","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,KAAOC,QAAQ,UAAWC,KAAOD,QAAQ,UACzCE,SAAW,SAAUC,EAAMC,EAAOC,GAClCC,KAAKH,KAAOA,EACZG,KAAKC,OAASH,EACdE,KAAKE,UAAYH,GAErBH,SAASO,UAAY,IAAIV,KACzBG,SAASO,UAAUC,KAAO,WAC1BR,SAASO,UAAUE,KAAO,SAAUC,GAChC,IAAIC,EAAUV,EAAOG,KAAKH,KAI1B,GAH2B,IAAvBA,EAAKW,QAAQ,QACbX,EAAO,IAAM,IAAID,SAASC,EAAKY,MAAM,GAAIT,KAAKU,WAAYV,KAAKW,YAAYN,KAAKC,GAASM,OAEzFZ,KAAKa,WACL,MACIT,KAAM,OACNU,QAAS,qCAAuCjB,EAChDkB,SAAUf,KAAKW,WAAWI,SAC1BjB,MAAOE,KAAKU,YAkBpB,GAfAV,KAAKa,YAAa,EAClBN,EAAWP,KAAKgB,KAAKV,EAAQW,OAAQ,SAAUC,GAC3C,IAAIC,EAAID,EAAMX,SAASV,GACvB,GAAIsB,EAAG,CACH,GAAIA,EAAEC,UACmBd,EAAQe,eAAef,EAAQe,eAAeC,OAAS,GAC7DF,UAAYD,EAAEC,UAEjC,OAAId,EAAQiB,OACD,IAAI5B,KAAK,SAAUwB,EAAEP,QAAQP,KAAKC,GAElCa,EAAEP,MAAMP,KAAKC,MAM5B,OADAN,KAAKa,YAAa,EACXN,EAEP,MACIH,KAAM,OACNU,QAAS,YAAcjB,EAAO,gBAC9BkB,SAAUf,KAAKW,WAAWI,SAC1BjB,MAAOE,KAAKU,aAIxBd,SAASO,UAAUa,KAAO,SAAUQ,EAAKC,GACrC,IAAK,IAAWC,EAAPC,EAAI,EAAMA,EAAIH,EAAIF,OAAQK,IAE/B,GADAD,EAAID,EAAIG,KAAKJ,EAAKA,EAAIG,IAElB,OAAOD,EAGf,OAAO,MAEXG,OAAOC,QAAUlC","file":"../../../engine/tree/variable.js","sourcesContent":["var Node = require('./node'), Call = require('./call');\nvar Variable = function (name, index, currentFileInfo) {\n    this.name = name;\n    this._index = index;\n    this._fileInfo = currentFileInfo;\n};\nVariable.prototype = new Node();\nVariable.prototype.type = 'Variable';\nVariable.prototype.eval = function (context) {\n    var variable, name = this.name;\n    if (name.indexOf('@@') === 0) {\n        name = '@' + new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value;\n    }\n    if (this.evaluating) {\n        throw {\n            type: 'Name',\n            message: 'Recursive variable definition for ' + name,\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n        };\n    }\n    this.evaluating = true;\n    variable = this.find(context.frames, function (frame) {\n        var v = frame.variable(name);\n        if (v) {\n            if (v.important) {\n                var importantScope = context.importantScope[context.importantScope.length - 1];\n                importantScope.important = v.important;\n            }\n            if (context.inCalc) {\n                return new Call('_SELF', [v.value]).eval(context);\n            } else {\n                return v.value.eval(context);\n            }\n        }\n    });\n    if (variable) {\n        this.evaluating = false;\n        return variable;\n    } else {\n        throw {\n            type: 'Name',\n            message: 'variable ' + name + ' is undefined',\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n        };\n    }\n};\nVariable.prototype.find = function (obj, fun) {\n    for (var i = 0, r; i < obj.length; i++) {\n        r = fun.call(obj, obj[i]);\n        if (r) {\n            return r;\n        }\n    }\n    return null;\n};\nmodule.exports = Variable;"]}