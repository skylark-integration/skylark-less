{"version":3,"sources":["engine/environment/abstract-plugin-loader.js"],"names":["define","__module__0","__module__1","exports","module","functionRegistry","LessError","AbstractPluginLoader","this","require","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","prototype","evalPlugin","contents","context","imports","pluginOptions","fileInfo","registry","pluginObj","localModule","pluginManager","filename","result","shortname","less","FileManager","extractUrlParts","get","trySetOptions","use","call","e","message","create","Function","loader","tree","validatePlugin","minVersion","compareVersion","addPlugin","functions","getLocalFunctions","plugin","name","options","setOptions","version","versionToString","aVersion","bVersion","match","shift","i","length","parseInt","versionString","printUsage","plugins"],"mappings":"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","file":"../../../engine/environment/abstract-plugin-loader.js","sourcesContent":["define([\n    '../functions/function-registry',\n    '../less-error'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var functionRegistry = __module__0, LessError = __module__1;\n    var AbstractPluginLoader = function () {\n        this.require = function () {\n            return null;\n        };\n    };\n    AbstractPluginLoader.prototype.evalPlugin = function (contents, context, imports, pluginOptions, fileInfo) {\n        var loader, registry, pluginObj, localModule, pluginManager, filename, result;\n        pluginManager = context.pluginManager;\n        if (fileInfo) {\n            if (typeof fileInfo === 'string') {\n                filename = fileInfo;\n            } else {\n                filename = fileInfo.filename;\n            }\n        }\n        var shortname = new this.less.FileManager().extractUrlParts(filename).filename;\n        if (filename) {\n            pluginObj = pluginManager.get(filename);\n            if (pluginObj) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                if (result) {\n                    return result;\n                }\n                try {\n                    if (pluginObj.use) {\n                        pluginObj.use.call(this.context, pluginObj);\n                    }\n                } catch (e) {\n                    e.message = e.message || 'Error during @plugin call';\n                    return new LessError(e, imports, filename);\n                }\n                return pluginObj;\n            }\n        }\n        localModule = {\n            exports: {},\n            pluginManager: pluginManager,\n            fileInfo: fileInfo\n        };\n        registry = functionRegistry.create();\n        var registerPlugin = function (obj) {\n            pluginObj = obj;\n        };\n        try {\n            loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n            loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n        } catch (e) {\n            return new LessError(e, imports, filename);\n        }\n        if (!pluginObj) {\n            pluginObj = localModule.exports;\n        }\n        pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n        if (pluginObj instanceof LessError) {\n            return pluginObj;\n        }\n        if (pluginObj) {\n            pluginObj.imports = imports;\n            pluginObj.filename = filename;\n            if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                if (result) {\n                    return result;\n                }\n            }\n            pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n            pluginObj.functions = registry.getLocalFunctions();\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n            if (result) {\n                return result;\n            }\n            try {\n                if (pluginObj.use) {\n                    pluginObj.use.call(this.context, pluginObj);\n                }\n            } catch (e) {\n                e.message = e.message || 'Error during @plugin call';\n                return new LessError(e, imports, filename);\n            }\n        } else {\n            return new LessError({ message: 'Not a valid plugin' }, imports, filename);\n        }\n        return pluginObj;\n    };\n    AbstractPluginLoader.prototype.trySetOptions = function (plugin, filename, name, options) {\n        if (options && !plugin.setOptions) {\n            return new LessError({ message: 'Options have been provided but the plugin ' + name + ' does not support any options.' });\n        }\n        try {\n            plugin.setOptions && plugin.setOptions(options);\n        } catch (e) {\n            return new LessError(e);\n        }\n    };\n    AbstractPluginLoader.prototype.validatePlugin = function (plugin, filename, name) {\n        if (plugin) {\n            if (typeof plugin === 'function') {\n                plugin = new plugin();\n            }\n            if (plugin.minVersion) {\n                if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n                    return new LessError({ message: 'Plugin ' + name + ' requires version ' + this.versionToString(plugin.minVersion) });\n                }\n            }\n            return plugin;\n        }\n        return null;\n    };\n    AbstractPluginLoader.prototype.compareVersion = function (aVersion, bVersion) {\n        if (typeof aVersion === 'string') {\n            aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n            aVersion.shift();\n        }\n        for (var i = 0; i < aVersion.length; i++) {\n            if (aVersion[i] !== bVersion[i]) {\n                return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\n            }\n        }\n        return 0;\n    };\n    AbstractPluginLoader.prototype.versionToString = function (version) {\n        var versionString = '';\n        for (var i = 0; i < version.length; i++) {\n            versionString += (versionString ? '.' : '') + version[i];\n        }\n        return versionString;\n    };\n    AbstractPluginLoader.prototype.printUsage = function (plugins) {\n        for (var i = 0; i < plugins.length; i++) {\n            var plugin = plugins[i];\n            if (plugin.printUsage) {\n                plugin.printUsage();\n            }\n        }\n    };\n    module.exports = AbstractPluginLoader;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}