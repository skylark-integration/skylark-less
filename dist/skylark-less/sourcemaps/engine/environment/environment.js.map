{"version":3,"sources":["engine/environment/environment.js"],"names":["logger","require","environment","externalEnvironment","fileManagers","this","requiredFunctions","functions","concat","i","length","propName","environmentFunc","bind","warn","prototype","getFileManager","filename","currentDirectory","options","isSync","pluginManager","getFileManagers","fileManager","addFileManager","push","clearFileManagers","module","exports"],"mappings":";;;;;;;AAAA,IAAIA,OAASC,QAAQ,aACjBC,YAAc,SAAUC,EAAqBC,GAC7CC,KAAKD,aAAeA,MACpBD,EAAsBA,MAOtB,IANA,IAKOG,KAAwBC,EAAYD,EAAkBE,QAJrD,eACA,aACA,gBACA,0BAECC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAAK,CACvC,IAAIE,EAAWJ,EAAUE,GAAIG,EAAkBT,EAAoBQ,GAC/DC,EACAP,KAAKM,GAAYC,EAAgBC,KAAKV,GAC/BM,EAAIH,EAAkBI,QAC7BL,KAAKS,KAAK,8CAAgDH,KAItET,YAAYa,UAAUC,eAAiB,SAAUC,EAAUC,EAAkBC,EAASjB,EAAakB,GAC1FH,GACDjB,OAAOc,KAAK,kFAEQ,MAApBI,GACAlB,OAAOc,KAAK,qFAEhB,IAAIV,EAAeC,KAAKD,aACpBe,EAAQE,gBACRjB,KAAkBI,OAAOJ,GAAcI,OAAOW,EAAQE,cAAcC,oBAExE,IAAK,IAAIb,EAAIL,EAAaM,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC/C,IAAIc,EAAcnB,EAAaK,GAC/B,GAAIc,EAAYH,EAAS,eAAiB,YAAYH,EAAUC,EAAkBC,EAASjB,GACvF,OAAOqB,EAGf,OAAO,MAEXrB,YAAYa,UAAUS,eAAiB,SAAUD,GAC7ClB,KAAKD,aAAaqB,KAAKF,IAE3BrB,YAAYa,UAAUW,kBAAoB,WACtCrB,KAAKD,iBAETuB,OAAOC,QAAU1B","file":"../../../engine/environment/environment.js","sourcesContent":["var logger = require('../logger');\nvar environment = function (externalEnvironment, fileManagers) {\n    this.fileManagers = fileManagers || [];\n    externalEnvironment = externalEnvironment || {};\n    var optionalFunctions = [\n            'encodeBase64',\n            'mimeLookup',\n            'charsetLookup',\n            'getSourceMapGenerator'\n        ], requiredFunctions = [], functions = requiredFunctions.concat(optionalFunctions);\n    for (var i = 0; i < functions.length; i++) {\n        var propName = functions[i], environmentFunc = externalEnvironment[propName];\n        if (environmentFunc) {\n            this[propName] = environmentFunc.bind(externalEnvironment);\n        } else if (i < requiredFunctions.length) {\n            this.warn('missing required function in environment - ' + propName);\n        }\n    }\n};\nenvironment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {\n    if (!filename) {\n        logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n    }\n    if (currentDirectory == null) {\n        logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n    }\n    var fileManagers = this.fileManagers;\n    if (options.pluginManager) {\n        fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n    }\n    for (var i = fileManagers.length - 1; i >= 0; i--) {\n        var fileManager = fileManagers[i];\n        if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n            return fileManager;\n        }\n    }\n    return null;\n};\nenvironment.prototype.addFileManager = function (fileManager) {\n    this.fileManagers.push(fileManager);\n};\nenvironment.prototype.clearFileManagers = function () {\n    this.fileManagers = [];\n};\nmodule.exports = environment;"]}