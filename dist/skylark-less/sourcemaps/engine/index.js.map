{"version":3,"sources":["engine/index.js"],"names":["module","exports","environment","fileManagers","SourceMapOutput","SourceMapBuilder","ParseTree","ImportManager","Environment","t","initial","version","data","require","tree","AbstractFileManager","AbstractPluginLoader","visitors","Parser","functions","contexts","render","parse","LessError","transformTree","utils","PluginManager","logger","ctor","obj","Object","create","prototype","apply","Array","slice","call","arguments","api","n","toLowerCase","o"],"mappings":";;;;;;;AAAAA,OAAOC,QAAU,SAAUC,EAAaC,GACpC,IAAIC,EAAiBC,EAAkBC,EAAWC,EAAeC,EAoC7DC,EAnCAC,GACAC,SACI,EACA,EACA,GAEJC,KAAMC,QAAQ,UACdC,KAAMD,QAAQ,UACdL,YAAaA,EAAcK,QAAQ,6BACnCE,oBAAqBF,QAAQ,uCAC7BG,qBAAsBH,QAAQ,wCAC9BX,YAAaA,EAAc,IAAIM,EAAYN,EAAaC,GACxDc,SAAUJ,QAAQ,cAClBK,OAAQL,QAAQ,mBAChBM,UAAWN,QAAQ,cAARA,CAAuBX,GAClCkB,SAAUP,QAAQ,cAClBT,gBAAiBA,EAAkBS,QAAQ,sBAARA,CAA+BX,GAClEG,iBAAkBA,EAAmBQ,QAAQ,uBAARA,CAAgCT,EAAiBF,GACtFI,UAAWA,EAAYO,QAAQ,eAARA,CAAwBR,GAC/CE,cAAeA,EAAgBM,QAAQ,mBAARA,CAA4BX,GAC3DmB,OAAQR,QAAQ,WAARA,CAAoBX,EAAaI,EAAWC,GACpDe,MAAOT,QAAQ,UAARA,CAAmBX,EAAaI,EAAWC,GAClDgB,UAAWV,QAAQ,gBACnBW,cAAeX,QAAQ,oBACvBY,MAAOZ,QAAQ,WACfa,cAAeb,QAAQ,oBACvBc,OAAQd,QAAQ,aAEhBe,EAAO,SAAUnB,GACjB,OAAO,WACH,IAAIoB,EAAMC,OAAOC,OAAOtB,EAAEuB,WAE1B,OADAvB,EAAEwB,MAAMJ,EAAKK,MAAMF,UAAUG,MAAMC,KAAKC,UAAW,IAC5CR,IAGRS,EAAMR,OAAOC,OAAOrB,GAC3B,IAAK,IAAI6B,KAAK7B,EAAQI,KAElB,GAAiB,mBADjBL,EAAIC,EAAQI,KAAKyB,IAEbD,EAAIC,EAAEC,eAAiBZ,EAAKnB,QAG5B,IAAK,IAAIgC,KADTH,EAAIC,GAAKT,OAAOC,OAAO,MACTtB,EACV6B,EAAIC,GAAGE,EAAED,eAAiBZ,EAAKnB,EAAEgC,IAI7C,OAAOH","file":"../../engine/index.js","sourcesContent":["module.exports = function (environment, fileManagers) {\n    var SourceMapOutput, SourceMapBuilder, ParseTree, ImportManager, Environment;\n    var initial = {\n        version: [\n            3,\n            9,\n            0\n        ],\n        data: require('./data'),\n        tree: require('./tree'),\n        Environment: Environment = require('./environment/environment'),\n        AbstractFileManager: require('./environment/abstract-file-manager'),\n        AbstractPluginLoader: require('./environment/abstract-plugin-loader'),\n        environment: environment = new Environment(environment, fileManagers),\n        visitors: require('./visitors'),\n        Parser: require('./parser/parser'),\n        functions: require('./functions')(environment),\n        contexts: require('./contexts'),\n        SourceMapOutput: SourceMapOutput = require('./source-map-output')(environment),\n        SourceMapBuilder: SourceMapBuilder = require('./source-map-builder')(SourceMapOutput, environment),\n        ParseTree: ParseTree = require('./parse-tree')(SourceMapBuilder),\n        ImportManager: ImportManager = require('./import-manager')(environment),\n        render: require('./render')(environment, ParseTree, ImportManager),\n        parse: require('./parse')(environment, ParseTree, ImportManager),\n        LessError: require('./less-error'),\n        transformTree: require('./transform-tree'),\n        utils: require('./utils'),\n        PluginManager: require('./plugin-manager'),\n        logger: require('./logger')\n    };\n    var ctor = function (t) {\n        return function () {\n            var obj = Object.create(t.prototype);\n            t.apply(obj, Array.prototype.slice.call(arguments, 0));\n            return obj;\n        };\n    };\n    var t, api = Object.create(initial);\n    for (var n in initial.tree) {\n        t = initial.tree[n];\n        if (typeof t === 'function') {\n            api[n.toLowerCase()] = ctor(t);\n        } else {\n            api[n] = Object.create(null);\n            for (var o in t) {\n                api[n][o.toLowerCase()] = ctor(t[o]);\n            }\n        }\n    }\n    return api;\n};"]}