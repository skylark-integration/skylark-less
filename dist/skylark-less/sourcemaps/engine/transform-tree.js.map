{"version":3,"sources":["engine/transform-tree.js"],"names":["contexts","require","visitor","tree","module","exports","root","options","evaldRoot","variables","evalEnv","Eval","Array","isArray","Object","keys","map","k","value","Value","Expression","Declaration","frames","Ruleset","v","visitorIterator","visitors","JoinSelectorVisitor","MarkVisibleSelectorsVisitor","ExtendVisitor","ToCSSVisitor","compress","Boolean","preEvalVisitors","pluginManager","i","first","get","isPreEvalVisitor","indexOf","push","run","isPreVisitor","unshift","eval","length"],"mappings":";;;;;;;AAAA,IAAIA,SAAWC,QAAQ,cAAeC,QAAUD,QAAQ,cAAeE,KAAOF,QAAQ,UACtFG,OAAOC,QAAU,SAAUC,EAAMC,GAE7B,IAAIC,EAAWC,GADfF,EAAUA,OACyBE,UAAWC,EAAU,IAAIV,SAASW,KAAKJ,GACjD,iBAAdE,GAA2BG,MAAMC,QAAQJ,KAChDA,EAAYK,OAAOC,KAAKN,GAAWO,IAAI,SAAUC,GAC7C,IAAIC,EAAQT,EAAUQ,GAOtB,OANMC,aAAiBf,KAAKgB,QAClBD,aAAiBf,KAAKiB,aACxBF,EAAQ,IAAIf,KAAKiB,YAAYF,KAEjCA,EAAQ,IAAIf,KAAKgB,OAAOD,KAErB,IAAIf,KAAKkB,YAAY,IAAMJ,EAAGC,GAAO,EAAO,KAAM,KAE7DR,EAAQY,QAAU,IAAInB,KAAKoB,QAAQ,KAAMd,KAE7C,IAK6Be,EAAGC,EAL5BC,GACI,IAAIxB,QAAQyB,oBACZ,IAAIzB,QAAQ0B,6BAA4B,GACxC,IAAI1B,QAAQ2B,cACZ,IAAI3B,QAAQ4B,cAAeC,SAAUC,QAAQzB,EAAQwB,aACtDE,KACP,GAAI1B,EAAQ2B,cAAe,CACvBT,EAAkBlB,EAAQ2B,cAAchC,UACxC,IAAK,IAAIiC,EAAI,EAAGA,EAAI,EAAGA,IAEnB,IADAV,EAAgBW,QACTZ,EAAIC,EAAgBY,OACnBb,EAAEc,iBACQ,IAANH,IAA2C,IAAhCF,EAAgBM,QAAQf,KACnCS,EAAgBO,KAAKhB,GACrBA,EAAEiB,IAAInC,IAGA,IAAN6B,IAAoC,IAAzBT,EAASa,QAAQf,KACxBA,EAAEkB,aACFhB,EAASiB,QAAQnB,GAEjBE,EAASc,KAAKhB,IAOtChB,EAAYF,EAAKsC,KAAKlC,GACtB,IAASyB,EAAI,EAAGA,EAAIT,EAASmB,OAAQV,IACjCT,EAASS,GAAGM,IAAIjC,GAEpB,GAAID,EAAQ2B,cAER,IADAT,EAAgBW,QACTZ,EAAIC,EAAgBY,QACM,IAAzBX,EAASa,QAAQf,KAA6C,IAAhCS,EAAgBM,QAAQf,IACtDA,EAAEiB,IAAIjC,GAIlB,OAAOA","file":"../../engine/transform-tree.js","sourcesContent":["var contexts = require('./contexts'), visitor = require('./visitors'), tree = require('./tree');\nmodule.exports = function (root, options) {\n    options = options || {};\n    var evaldRoot, variables = options.variables, evalEnv = new contexts.Eval(options);\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(function (k) {\n            var value = variables[k];\n            if (!(value instanceof tree.Value)) {\n                if (!(value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Declaration('@' + k, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n    var visitors = [\n            new visitor.JoinSelectorVisitor(),\n            new visitor.MarkVisibleSelectorsVisitor(true),\n            new visitor.ExtendVisitor(),\n            new visitor.ToCSSVisitor({ compress: Boolean(options.compress) })\n        ], preEvalVisitors = [], v, visitorIterator;\n    if (options.pluginManager) {\n        visitorIterator = options.pluginManager.visitor();\n        for (var i = 0; i < 2; i++) {\n            visitorIterator.first();\n            while (v = visitorIterator.get()) {\n                if (v.isPreEvalVisitor) {\n                    if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                        preEvalVisitors.push(v);\n                        v.run(root);\n                    }\n                } else {\n                    if (i === 0 || visitors.indexOf(v) === -1) {\n                        if (v.isPreVisitor) {\n                            visitors.unshift(v);\n                        } else {\n                            visitors.push(v);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    evaldRoot = root.eval(evalEnv);\n    for (var i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n    if (options.pluginManager) {\n        visitorIterator.first();\n        while (v = visitorIterator.get()) {\n            if (visitors.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                v.run(evaldRoot);\n            }\n        }\n    }\n    return evaldRoot;\n};"]}