{"version":3,"sources":["engine/transform-tree.js"],"names":["define","__module__0","__module__1","__module__2","exports","module","contexts","visitor","tree","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","root","options","evaldRoot","variables","evalEnv","Eval","Object","keys","map","k","value","Value","Expression","Declaration","frames","Ruleset","v","visitorIterator","visitors","JoinSelectorVisitor","MarkVisibleSelectorsVisitor","ExtendVisitor","ToCSSVisitor","compress","Boolean","preEvalVisitors","pluginManager","i","first","get","isPreEvalVisitor","indexOf","push","run","isPreVisitor","unshift","eval","length"],"mappings":";;;;;;;AAAAA,QACI,aACA,mBACA,gBACD,SAAUC,EAAaC,EAAaC,GACnC,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAWL,EAAaM,EAAUL,EAAaM,EAAOL,EAiE1D,SAASM,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAnEAL,EAAOD,QAAU,SAAUW,EAAMC,GAE7B,IAAIC,EAAWC,GADfF,EAAUA,OACyBE,UAAWC,EAAU,IAAIb,EAASc,KAAKJ,GACjD,iBAAdE,GAA2BP,MAAMC,QAAQM,KAChDA,EAAYG,OAAOC,KAAKJ,GAAWK,IAAI,SAAUC,GAC7C,IAAIC,EAAQP,EAAUM,GAOtB,OANMC,aAAiBjB,EAAKkB,QAClBD,aAAiBjB,EAAKmB,aACxBF,EAAQ,IAAIjB,EAAKmB,YAAYF,KAEjCA,EAAQ,IAAIjB,EAAKkB,OAAOD,KAErB,IAAIjB,EAAKoB,YAAY,IAAMJ,EAAGC,GAAO,EAAO,KAAM,KAE7DN,EAAQU,QAAU,IAAIrB,EAAKsB,QAAQ,KAAMZ,KAE7C,IAK6Ba,EAAGC,EAL5BC,GACI,IAAI1B,EAAQ2B,oBACZ,IAAI3B,EAAQ4B,6BAA4B,GACxC,IAAI5B,EAAQ6B,cACZ,IAAI7B,EAAQ8B,cAAeC,SAAUC,QAAQvB,EAAQsB,aACtDE,KACP,GAAIxB,EAAQyB,cAAe,CACvBT,EAAkBhB,EAAQyB,cAAclC,UACxC,IAAK,IAAImC,EAAI,EAAGA,EAAI,EAAGA,IAEnB,IADAV,EAAgBW,QACTZ,EAAIC,EAAgBY,OACnBb,EAAEc,iBACQ,IAANH,IAA2C,IAAhCF,EAAgBM,QAAQf,KACnCS,EAAgBO,KAAKhB,GACrBA,EAAEiB,IAAIjC,IAGA,IAAN2B,IAAoC,IAAzBT,EAASa,QAAQf,KACxBA,EAAEkB,aACFhB,EAASiB,QAAQnB,GAEjBE,EAASc,KAAKhB,IAOtCd,EAAYF,EAAKoC,KAAKhC,GACtB,IAASuB,EAAI,EAAGA,EAAIT,EAASmB,OAAQV,IACjCT,EAASS,GAAGM,IAAI/B,GAEpB,GAAID,EAAQyB,cAER,IADAT,EAAgBW,QACTZ,EAAIC,EAAgBY,QACM,IAAzBX,EAASa,QAAQf,KAA6C,IAAhCS,EAAgBM,QAAQf,IACtDA,EAAEiB,IAAI/B,GAIlB,OAAOA,GAWPR,EAAkBJ,EAAOD,SAClBC,EAAOD,QACTK,EAAkBL,GAChBA,OADN","file":"../../engine/transform-tree.js","sourcesContent":["define([\n    './contexts',\n    './visitors/index',\n    './tree/index'\n], function (__module__0, __module__1, __module__2) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var contexts = __module__0, visitor = __module__1, tree = __module__2;\n    module.exports = function (root, options) {\n        options = options || {};\n        var evaldRoot, variables = options.variables, evalEnv = new contexts.Eval(options);\n        if (typeof variables === 'object' && !Array.isArray(variables)) {\n            variables = Object.keys(variables).map(function (k) {\n                var value = variables[k];\n                if (!(value instanceof tree.Value)) {\n                    if (!(value instanceof tree.Expression)) {\n                        value = new tree.Expression([value]);\n                    }\n                    value = new tree.Value([value]);\n                }\n                return new tree.Declaration('@' + k, value, false, null, 0);\n            });\n            evalEnv.frames = [new tree.Ruleset(null, variables)];\n        }\n        var visitors = [\n                new visitor.JoinSelectorVisitor(),\n                new visitor.MarkVisibleSelectorsVisitor(true),\n                new visitor.ExtendVisitor(),\n                new visitor.ToCSSVisitor({ compress: Boolean(options.compress) })\n            ], preEvalVisitors = [], v, visitorIterator;\n        if (options.pluginManager) {\n            visitorIterator = options.pluginManager.visitor();\n            for (var i = 0; i < 2; i++) {\n                visitorIterator.first();\n                while (v = visitorIterator.get()) {\n                    if (v.isPreEvalVisitor) {\n                        if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                            preEvalVisitors.push(v);\n                            v.run(root);\n                        }\n                    } else {\n                        if (i === 0 || visitors.indexOf(v) === -1) {\n                            if (v.isPreVisitor) {\n                                visitors.unshift(v);\n                            } else {\n                                visitors.push(v);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        evaldRoot = root.eval(evalEnv);\n        for (var i = 0; i < visitors.length; i++) {\n            visitors[i].run(evaldRoot);\n        }\n        if (options.pluginManager) {\n            visitorIterator.first();\n            while (v = visitorIterator.get()) {\n                if (visitors.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                    v.run(evaldRoot);\n                }\n            }\n        }\n        return evaldRoot;\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}