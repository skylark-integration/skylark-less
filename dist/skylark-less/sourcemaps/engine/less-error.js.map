{"version":3,"sources":["engine/less-error.js"],"names":["utils","require","LessError","module","exports","e","fileContentMap","currentFilename","Error","call","this","filename","message","stack","input","contents","loc","getLocation","index","line","col","column","callLine","lines","split","type","found","match","parseInt","callExtract","extract","Object","create","F","prototype","constructor","toString","options","error","stylize","str","push","errorTxt","slice","substr","join"],"mappings":"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","file":"../../engine/less-error.js","sourcesContent":["var utils = require('./utils');\nvar LessError = module.exports = function LessError(e, fileContentMap, currentFilename) {\n    Error.call(this);\n    var filename = e.filename || currentFilename;\n    this.message = e.message;\n    this.stack = e.stack;\n    if (fileContentMap && filename) {\n        var input = fileContentMap.contents[filename], loc = utils.getLocation(e.index, input), line = loc.line, col = loc.column, callLine = e.call && utils.getLocation(e.call, input).line, lines = input ? input.split('\\n') : '';\n        this.type = e.type || 'Syntax';\n        this.filename = filename;\n        this.index = e.index;\n        this.line = typeof line === 'number' ? line + 1 : null;\n        this.column = col;\n        if (!this.line && this.stack) {\n            var found = this.stack.match(/(<anonymous>|Function):(\\d+):(\\d+)/);\n            if (found) {\n                if (found[2]) {\n                    this.line = parseInt(found[2]) - 2;\n                }\n                if (found[3]) {\n                    this.column = parseInt(found[3]);\n                }\n            }\n        }\n        this.callLine = callLine + 1;\n        this.callExtract = lines[callLine];\n        this.extract = [\n            lines[this.line - 2],\n            lines[this.line - 1],\n            lines[this.line]\n        ];\n    }\n};\nif (typeof Object.create === 'undefined') {\n    var F = function () {\n    };\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n} else {\n    LessError.prototype = Object.create(Error.prototype);\n}\nLessError.prototype.constructor = LessError;\nLessError.prototype.toString = function (options) {\n    options = options || {};\n    var message = '';\n    var extract = this.extract || [];\n    var error = [];\n    var stylize = function (str) {\n        return str;\n    };\n    if (options.stylize) {\n        var type = typeof options.stylize;\n        if (type !== 'function') {\n            throw Error('options.stylize should be a function, got a ' + type + '!');\n        }\n        stylize = options.stylize;\n    }\n    if (this.line !== null) {\n        if (typeof extract[0] === 'string') {\n            error.push(stylize(this.line - 1 + ' ' + extract[0], 'grey'));\n        }\n        if (typeof extract[1] === 'string') {\n            var errorTxt = this.line + ' ';\n            if (extract[1]) {\n                errorTxt += extract[1].slice(0, this.column) + stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') + extract[1].slice(this.column + 1), 'red'), 'inverse');\n            }\n            error.push(errorTxt);\n        }\n        if (typeof extract[2] === 'string') {\n            error.push(stylize(this.line + 1 + ' ' + extract[2], 'grey'));\n        }\n        error = error.join('\\n') + stylize('', 'reset') + '\\n';\n    }\n    message += stylize(this.type + 'Error: ' + this.message, 'red');\n    if (this.filename) {\n        message += stylize(' in ', 'red') + this.filename;\n    }\n    if (this.line) {\n        message += stylize(' on line ' + this.line + ', column ' + (this.column + 1) + ':', 'grey');\n    }\n    message += '\\n' + error;\n    if (this.callLine) {\n        message += stylize('from ', 'red') + (this.filename || '') + '/n';\n        message += stylize(this.callLine, 'grey') + ' ' + this.callExtract + '/n';\n    }\n    return message;\n};"]}