{"version":3,"sources":["engine/less-error.js"],"names":["define","__module__0","exports","module","utils","LessError","e","fileContentMap","currentFilename","Error","call","this","filename","message","stack","input","contents","loc","getLocation","index","line","col","column","callLine","lines","split","type","found","match","parseInt","callExtract","extract","Object","create","F","prototype","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","constructor","toString","options","error","stylize","str","push","errorTxt","slice","substr","join"],"mappings":"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","file":"../../engine/less-error.js","sourcesContent":["define(['./utils'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var utils = __module__0;\n    var LessError = module.exports = function LessError(e, fileContentMap, currentFilename) {\n        Error.call(this);\n        var filename = e.filename || currentFilename;\n        this.message = e.message;\n        this.stack = e.stack;\n        if (fileContentMap && filename) {\n            var input = fileContentMap.contents[filename], loc = utils.getLocation(e.index, input), line = loc.line, col = loc.column, callLine = e.call && utils.getLocation(e.call, input).line, lines = input ? input.split('\\n') : '';\n            this.type = e.type || 'Syntax';\n            this.filename = filename;\n            this.index = e.index;\n            this.line = typeof line === 'number' ? line + 1 : null;\n            this.column = col;\n            if (!this.line && this.stack) {\n                var found = this.stack.match(/(<anonymous>|Function):(\\d+):(\\d+)/);\n                if (found) {\n                    if (found[2]) {\n                        this.line = parseInt(found[2]) - 2;\n                    }\n                    if (found[3]) {\n                        this.column = parseInt(found[3]);\n                    }\n                }\n            }\n            this.callLine = callLine + 1;\n            this.callExtract = lines[callLine];\n            this.extract = [\n                lines[this.line - 2],\n                lines[this.line - 1],\n                lines[this.line]\n            ];\n        }\n    };\n    if (typeof Object.create === 'undefined') {\n        var F = function () {\n        };\n        F.prototype = Error.prototype;\n        LessError.prototype = new F();\n    } else {\n        LessError.prototype = Object.create(Error.prototype);\n    }\n    LessError.prototype.constructor = LessError;\n    LessError.prototype.toString = function (options) {\n        options = options || {};\n        var message = '';\n        var extract = this.extract || [];\n        var error = [];\n        var stylize = function (str) {\n            return str;\n        };\n        if (options.stylize) {\n            var type = typeof options.stylize;\n            if (type !== 'function') {\n                throw Error('options.stylize should be a function, got a ' + type + '!');\n            }\n            stylize = options.stylize;\n        }\n        if (this.line !== null) {\n            if (typeof extract[0] === 'string') {\n                error.push(stylize(this.line - 1 + ' ' + extract[0], 'grey'));\n            }\n            if (typeof extract[1] === 'string') {\n                var errorTxt = this.line + ' ';\n                if (extract[1]) {\n                    errorTxt += extract[1].slice(0, this.column) + stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') + extract[1].slice(this.column + 1), 'red'), 'inverse');\n                }\n                error.push(errorTxt);\n            }\n            if (typeof extract[2] === 'string') {\n                error.push(stylize(this.line + 1 + ' ' + extract[2], 'grey'));\n            }\n            error = error.join('\\n') + stylize('', 'reset') + '\\n';\n        }\n        message += stylize(this.type + 'Error: ' + this.message, 'red');\n        if (this.filename) {\n            message += stylize(' in ', 'red') + this.filename;\n        }\n        if (this.line) {\n            message += stylize(' on line ' + this.line + ', column ' + (this.column + 1) + ':', 'grey');\n        }\n        message += '\\n' + error;\n        if (this.callLine) {\n            message += stylize('from ', 'red') + (this.filename || '') + '/n';\n            message += stylize(this.callLine, 'grey') + ' ' + this.callExtract + '/n';\n        }\n        return message;\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}