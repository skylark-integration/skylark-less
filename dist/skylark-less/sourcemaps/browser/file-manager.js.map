{"version":3,"sources":["browser/file-manager.js"],"names":["define","__module__0","exports","module","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","options","logger","fileCache","FileManager","prototype","alwaysMakePathsAbsolute","join","basePath","laterPath","this","extractUrlParts","path","doXHR","url","type","callback","errback","xhr","XMLHttpRequest","async","isFileProtocol","fileAsync","handleResponse","status","responseText","getResponseHeader","overrideMimeType","debug","open","setRequestHeader","send","onreadystatechange","readyState","supports","filename","currentDirectory","environment","clearFileCache","loadFile","isPathAbsolute","ext","tryAppendExtension","href","window","location","self","Promise","resolve","reject","useFileCache","lessText","contents","webInfo","lastModified","Date","e","message","mime","data"],"mappings":";;;;;;;AAAAA,QAAQ,+CAAgD,SAAUC,GAC9D,aACA,IAAIC,KACAC,GAAWD,YAwGf,SAASE,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OA1GAF,EAAOD,QAAU,SAAUQ,EAASC,GAChC,IACIC,KACAC,EAAc,aA4FlB,OA1FAA,EAAYC,UAAY,IAJEb,GAKJc,wBAA0B,WAC5C,OAAO,GAEXF,EAAYC,UAAUE,KAAO,SAAcC,EAAUC,GACjD,OAAKD,EAGEE,KAAKC,gBAAgBF,EAAWD,GAAUI,KAFtCH,GAIfL,EAAYC,UAAUQ,MAAQ,SAAeC,EAAKC,EAAMC,EAAUC,GAC9D,IAAIC,EAAM,IAAIC,eACVC,GAAQnB,EAAQoB,gBAAiBpB,EAAQqB,UAQ7C,SAASC,EAAeL,EAAKF,EAAUC,GAC/BC,EAAIM,QAAU,KAAON,EAAIM,OAAS,IAClCR,EAASE,EAAIO,aAAcP,EAAIQ,kBAAkB,kBACvB,mBAAZT,GACdA,EAAQC,EAAIM,OAAQV,GAXQ,mBAAzBI,EAAIS,kBACXT,EAAIS,iBAAiB,YAEzBzB,EAAO0B,MAAM,iBAAmBd,EAAM,KACtCI,EAAIW,KAAK,MAAOf,EAAKM,GACrBF,EAAIY,iBAAiB,SAAUf,GAAQ,4CACvCG,EAAIa,KAAK,MAQL9B,EAAQoB,iBAAmBpB,EAAQqB,UAChB,IAAfJ,EAAIM,QAAgBN,EAAIM,QAAU,KAAON,EAAIM,OAAS,IACtDR,EAASE,EAAIO,cAEbR,EAAQC,EAAIM,OAAQV,GAEjBM,EACPF,EAAIc,mBAAqB,WACC,GAAlBd,EAAIe,YACJV,EAAeL,EAAKF,EAAUC,IAItCM,EAAeL,EAAKF,EAAUC,IAGtCb,EAAYC,UAAU6B,SAAW,SAAUC,EAAUC,EAAkBnC,EAASoC,GAC5E,OAAO,GAEXjC,EAAYC,UAAUiC,eAAiB,WACnCnC,MAEJC,EAAYC,UAAUkC,SAAW,SAAkBJ,EAAUC,EAAkBnC,EAASoC,GAChFD,IAAqB1B,KAAK8B,eAAeL,KACzCA,EAAWC,EAAmBD,GAElCA,EAAWlC,EAAQwC,IAAM/B,KAAKgC,mBAAmBP,EAAUlC,EAAQwC,KAAON,EAC1ElC,EAAUA,MACV,IACI0C,EADYjC,KAAKC,gBAAgBwB,EAAUS,OAAOC,SAASF,MAC1C7B,IACjBgC,EAAOpC,KACX,OAAO,IAAIqC,QAAQ,SAAUC,EAASC,GAClC,GAAIhD,EAAQiD,cAAgB/C,EAAUwC,GAClC,IACI,IAAIQ,EAAWhD,EAAUwC,GACzB,OAAOK,GACHI,SAAUD,EACVhB,SAAUQ,EACVU,SAAWC,aAAc,IAAIC,QAEnC,MAAOC,GACL,OAAOP,GACHd,SAAUQ,EACVc,QAAS,sBAAwBd,EAAO,cAAgBa,EAAEC,UAItEX,EAAKjC,MAAM8B,EAAM1C,EAAQyD,KAAM,SAAuBC,EAAML,GACxDnD,EAAUwC,GAAQgB,EAClBX,GACII,SAAUO,EACVxB,SAAUQ,EACVU,SAAWC,aAAcA,MAE9B,SAAoB9B,EAAQV,GAC3BmC,GACIlC,KAAM,OACN0C,QAAS,IAAM3C,EAAM,mBAAqBU,EAAS,IACnDmB,KAAMA,SAKfvC,GAWPT,EAAkBD,EAAOD,SAClBC,EAAOD,QACTE,EAAkBF,GAChBA,OADN","file":"../../browser/file-manager.js","sourcesContent":["define(['../engine/environment/abstract-file-manager'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    module.exports = function (options, logger) {\n        var AbstractFileManager = __module__0;\n        var fileCache = {};\n        var FileManager = function () {\n        };\n        FileManager.prototype = new AbstractFileManager();\n        FileManager.prototype.alwaysMakePathsAbsolute = function alwaysMakePathsAbsolute() {\n            return true;\n        };\n        FileManager.prototype.join = function join(basePath, laterPath) {\n            if (!basePath) {\n                return laterPath;\n            }\n            return this.extractUrlParts(laterPath, basePath).path;\n        };\n        FileManager.prototype.doXHR = function doXHR(url, type, callback, errback) {\n            var xhr = new XMLHttpRequest();\n            var async = options.isFileProtocol ? options.fileAsync : true;\n            if (typeof xhr.overrideMimeType === 'function') {\n                xhr.overrideMimeType('text/css');\n            }\n            logger.debug(\"XHR: Getting '\" + url + \"'\");\n            xhr.open('GET', url, async);\n            xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n            xhr.send(null);\n            function handleResponse(xhr, callback, errback) {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    callback(xhr.responseText, xhr.getResponseHeader('Last-Modified'));\n                } else if (typeof errback === 'function') {\n                    errback(xhr.status, url);\n                }\n            }\n            if (options.isFileProtocol && !options.fileAsync) {\n                if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300) {\n                    callback(xhr.responseText);\n                } else {\n                    errback(xhr.status, url);\n                }\n            } else if (async) {\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState == 4) {\n                        handleResponse(xhr, callback, errback);\n                    }\n                };\n            } else {\n                handleResponse(xhr, callback, errback);\n            }\n        };\n        FileManager.prototype.supports = function (filename, currentDirectory, options, environment) {\n            return true;\n        };\n        FileManager.prototype.clearFileCache = function () {\n            fileCache = {};\n        };\n        FileManager.prototype.loadFile = function loadFile(filename, currentDirectory, options, environment) {\n            if (currentDirectory && !this.isPathAbsolute(filename)) {\n                filename = currentDirectory + filename;\n            }\n            filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n            options = options || {};\n            var hrefParts = this.extractUrlParts(filename, window.location.href);\n            var href = hrefParts.url;\n            var self = this;\n            return new Promise(function (resolve, reject) {\n                if (options.useFileCache && fileCache[href]) {\n                    try {\n                        var lessText = fileCache[href];\n                        return resolve({\n                            contents: lessText,\n                            filename: href,\n                            webInfo: { lastModified: new Date() }\n                        });\n                    } catch (e) {\n                        return reject({\n                            filename: href,\n                            message: 'Error loading file ' + href + ' error was ' + e.message\n                        });\n                    }\n                }\n                self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n                    fileCache[href] = data;\n                    resolve({\n                        contents: data,\n                        filename: href,\n                        webInfo: { lastModified: lastModified }\n                    });\n                }, function doXHRError(status, url) {\n                    reject({\n                        type: 'File',\n                        message: \"'\" + url + \"' wasn't found (\" + status + ')',\n                        href: href\n                    });\n                });\n            });\n        };\n        return FileManager;\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}