/**
 * skylark-less - A version of less.js that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylarkui/skylark-less/
 * @license MIT
 */
var contexts=require("./contexts"),Parser=require("./parser/parser"),LessError=require("./less-error"),utils=require("./utils"),PromiseConstructor="undefined"==typeof Promise?require("promise"):Promise,logger=require("./logger");module.exports=function(e){var t=function(e,t,r){this.less=e,this.rootFilename=r.filename,this.paths=t.paths||[],this.contents={},this.contentsIgnoredChars={},this.mime=t.mime,this.error=null,this.context=t,this.queue=[],this.files={}};return t.prototype.push=function(t,r,i,o,n){var s=this,l=this.context.pluginManager.Loader;this.queue.push(t);var a=function(e,r,i){s.queue.splice(s.queue.indexOf(t),1);var l=i===s.rootFilename;o.optional&&e?(n(null,{rules:[]},!1,null),logger.info("The file "+i+" was skipped because it was not found and the import was marked optional.")):(s.files[i]||o.inline||(s.files[i]={root:r,options:o}),e&&!s.error&&(s.error=e),n(e,r,l,i))},u={rewriteUrls:this.context.rewriteUrls,entryPath:i.entryPath,rootpath:i.rootpath,rootFilename:i.rootFilename},c=e.getFileManager(t,i.currentDirectory,this.context,e);if(c){var h,p=function(e){var t,r=e.filename,n=e.contents.replace(/^\uFEFF/,"");u.currentDirectory=c.getPath(r),u.rewriteUrls&&(u.rootpath=c.join(s.context.rootpath||"",c.pathDiff(u.currentDirectory,u.entryPath)),!c.isPathAbsolute(u.rootpath)&&c.alwaysMakePathsAbsolute()&&(u.rootpath=c.join(u.entryPath,u.rootpath))),u.filename=r;var h=new contexts.Parse(s.context);h.processImports=!1,s.contents[r]=n,(i.reference||o.reference)&&(u.reference=!0),o.isPlugin?(t=l.evalPlugin(n,h,s,o.pluginArgs,u))instanceof LessError?a(t,null,r):a(null,t,r):o.inline?a(null,n,r):!s.files[r]||s.files[r].options.multiple||o.multiple?new Parser(h,s,u).parse(n,function(e,t){a(e,t,r)}):a(null,s.files[r].root,r)},f=utils.clone(this.context);r&&(f.ext=o.isPlugin?".js":".less"),o.isPlugin?(f.mime="application/javascript",h=l.loadPlugin(t,i.currentDirectory,f,e,c)):h=c.loadFile(t,i.currentDirectory,f,e,function(e,t){e?a(e):p(t)}),h&&h.then(p,a)}else a({message:"Could not find a file-manager for "+t})},t};
//# sourceMappingURL=../sourcemaps/engine/import-manager.js.map
